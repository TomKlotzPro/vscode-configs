{
	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",
	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles file blame annotations
	//  - heatmap: Toggles file heatmap annotations
	//  - changes: Toggles file changes annotations
	"gitlens.fileAnnotations.command": null,
	// Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
	// 
	"gitlens.insiders": null,
	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",
	// Specifies whether to enable GitLens+ features
	"gitlens.plusFeatures.enabled": true,
	// Specifies the proxy configuration to use. If not specified, the proxy configuration will be determined based on VS Code or OS settings
	"gitlens.proxy": null,
	// Specifies whether to show the Welcome (Quick Setup) experience on first install
	"gitlens.showWelcomeOnInstall": true,
	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,
	// Specifies whether to enable virtual repositories support
	"gitlens.virtualRepositories.enabled": true,
	// Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).
	"dart.additionalAnalyzerFileExtensions": [],
	// An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.
	"dart.analysisExcludedFolders": [],
	// Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).
	"dart.analyzeAngularTemplates": true,
	// Additional arguments to pass to the Dart Analysis Server.
	"dart.analyzerAdditionalArgs": [],
	// The port number to be used for the Dart analyzer diagnostic server.
	"dart.analyzerDiagnosticsPort": null,
	// The path to a custom Dart Analysis Server. This setting is intended for use by Dart Analysis Server developers.
	"dart.analyzerPath": null,
	// An SSH host to run the Analysis Server.
	// This can be useful when modifying code on a remote machine using SSHFS.
	"dart.analyzerSshHost": null,
	// The port number to be used for the Dart Analysis Server VM service. This setting is intended for use by Dart Analysis Server developers.
	"dart.analyzerVmServicePort": null,
	// Whether to show a notification the first few times an Analysis Server exception occurs.
	"dart.notifyAnalyzerErrors": true,
	// Whether to ignore workspace folders and perform analysis based on the open files, as if no workspace was open at all. This allows opening large folders without causing them to be completely analyzed.
	"dart.onlyAnalyzeProjectsWithOpenFiles": false,
	// Whether to show TODOs in the Problems list. Can be a boolean to enable all TODO comments (TODO, FIXME, HACK, UNDONE) or an array of which types to enable. Older Dart SDKs may not support some TODO kinds.
	"dart.showTodos": true,
	// Whether to use the Dart Analyzer's original protocol instead of LSP. Some features are not supported when using the legacy protocol and support for it will eventually be removed. Please file issues on GitHub in the Dart-Code repo if you find yourself needing to enable this setting.
	"dart.useLegacyAnalyzerProtocol": false,
	// Custom settings for launching DevTools. This setting is intended for use by Dart DevTools developers.
	"dart.customDevTools": {},
	// Whether to launch external DevTools windows using Chrome or the system default browser.
	//  - chrome: Locate and launch Google Chrome from your system
	//  - default: Use your systems default web browser
	"dart.devToolsBrowser": "chrome",
	// Which editor/column to open [Dart DevTools](https://dart.dev/tools/dart-devtools) in.
	//  - beside: Open DevTools in beside the active editor
	//  - active: Open DevTools over the top of the active editor
	//  - external: Open DevTools externally in its own browser window
	"dart.devToolsLocation": "beside",
	// The port number to be used for the Dart DevTools.
	"dart.devToolsPort": null,
	// Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.
	"dart.devToolsReuseWindows": true,
	// The theme to use for Dart DevTools.
	"dart.devToolsTheme": "dark",
	// Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.
	//  - never: Do not automatically launch DevTools when starting a debug session
	//  - flutter: Automatically launch DevTools when starting a Flutter debug session
	//  - always: Automatically launch DevTools when starting any debug session
	"dart.openDevTools": "never",
	// Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.
	"dart.shareDevToolsWithFlutter": true,
	// Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `dart.shareDevToolsWithFlutter` setting is also enabled.
	"dart.showInspectorNotificationsForWidgetErrors": true,
	// Whether to update DevTools if you are not using the latest version. This only applies to SDKs prior to Dart v2.15, since DevTools is included in the SDK since v2.15.
	"dart.updateDevTools": true,
	// Whether to use folding data from the Dart Analysis Server instead of the built-in VS Code indent-based folding.
	"dart.analysisServerFolding": true,
	// Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).
	"dart.autoImportCompletions": true,
	// Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).
	// 
	// When using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.
	//  - none: Never insert slashes automatically
	//  - tripleSlash: Insert `///` when pressing `<enter>` at the end of a triple-slash comment
	//  - all: Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment
	"dart.automaticCommentSlashes": "tripleSlash",
	// Whether to show annotations against constructor, method invocations and lists that span multiple lines.
	"dart.closingLabels": true,
	// Whether to insert parentheses and placeholders for positional and required arguments during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.
	"dart.completeFunctionCalls": true,
	// What level of documentation to show in Hovers and Code Completion details. This setting is only supported for Dart SDKs after v2.18.
	//  - full: Show full documentation
	//  - summary: Show short documentatin summary
	//  - none: Do not show documentation
	"dart.documentation": "full",
	// An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.
	"dart.doNotFormat": [],
	// Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `dart.previewCommitCharacters`.
	"dart.enableCompletionCommitCharacters": false,
	// Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.
	"dart.enableSdkFormatter": true,
	// Whether to include Dart and Flutter snippets in code completion.
	"dart.enableSnippets": true,
	// Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.
	"dart.insertArgumentPlaceholders": true,
	// The maximum length of a line of code. This is used by the document formatter. If you change this value, you may wish to update `editor.rulers` (which draws vertical lines in the editor) in the `["dart"]` section if your settings to match.
	"dart.lineLength": 80,
	// Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).
	"dart.lspSnippetTextEdits": true,
	// Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.
	"dart.renameFilesWithClasses": "never",
	// Whether to show CodeLens actions in the editor for opening online DartPad samples.
	"dart.showDartPadSampleCodeLens": true,
	// Whether to show quick fixes for ignoring hints and lints.
	"dart.showIgnoreQuickFixes": true,
	// Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.
	"dart.showMainCodeLens": true,
	// Whether to show CodeLens actions in the editor for quick running / debugging tests.
	"dart.showTestCodeLens": true,
	// Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.
	"dart.updateImportsOnRename": true,
	// Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.
	"dart.warnWhenEditingFilesInPubCache": true,
	// Whether to show a warning when modifying files outside of the workspace.
	"dart.warnWhenEditingFilesOutsideWorkspace": true,
	// Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.
	"dart.flutterAdbConnectOnChromeOs": false,
	// Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `dart.flutterRunAdditionalArgs` setting.
	"dart.flutterAdditionalArgs": [],
	// Additional args to pass to the `flutter attach` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterAttachAdditionalArgs": [],
	// The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateAndroidLanguage": "kotlin",
	// The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateIOSLanguage": "swift",
	// The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateOrganization": null,
	// The platforms to enable for new projects created using the 'Flutter: New Project' command. If unset, all platforms will be enabled.
	"dart.flutterCreatePlatforms": null,
	// Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.
	"dart.flutterCustomEmulators": [],
	// Whether to automatically run the Generate Localizations command for Flutter apps when saving .arb files.
	//  - never: Do not generate localizations when saving
	//  - manual: Generate localizations for explicit manual saves (requires pressing Save explicitly if using autosave)
	//  - manualIfDirty: Generate localizations for explicit manual saves (requires pressing Save explicitly if using autosave) only if the saved file had changes
	//  - all: Generate localizations for all saves, manual or automatic
	//  - allIfDirty: Generate localizations for all saves, manual or automatic only if the saved file had changes
	"dart.flutterGenerateLocalizationsOnSave": "never",
	// Whether to show Flutter icons and colors in the editor gutter.
	"dart.flutterGutterIcons": true,
	// Whether to automatically send a Hot Reload request to Flutter apps during a debug session when saving files. Dart apps are controlled by the hotReloadOnSave setting.
	//  - never: Do not reload when saving
	//  - manual: Reload for explicit manual saves (requires pressing Save explicitly if using autosave)
	//  - manualIfDirty: Reload for explicit manual saves (requires pressing Save explicitly if using autosave) only if the saved file had changes
	//  - all: Reload for all saves, manual or automatic
	//  - allIfDirty: Reload for all saves, manual or automatic only if the saved file had changes
	"dart.flutterHotReloadOnSave": "manual",
	// Whether to show the Flutter Outline tree in the sidebar.
	"dart.flutterOutline": true,
	// Whether to remember which device was last (explicitly) selected for each project. When the remembered device is selected, it will prevent newly-connected mobile devices from being automatically selected (regardless of the `dart.flutterSelectDeviceWhenConnected` setting).
	"dart.flutterRememberSelectedDevice": true,
	// Additional args to pass to the `flutter run` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterRunAdditionalArgs": [],
	// The path to a directory to save Flutter screenshots.
	"dart.flutterScreenshotPath": null,
	// Whether to set newly connected devices as the current device in Flutter projects.
	"dart.flutterSelectDeviceWhenConnected": true,
	// When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.
	//  - local: Only show for local workspaces
	//  - always: Always show, even for remote sessions
	//  - never: Never show emulators
	"dart.flutterShowEmulators": "local",
	// When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).
	//  - remote: Only show for remote workspaces (includes browser-based workspaces)
	//  - always: Always show, even for local sessions
	"dart.flutterShowWebServerDevice": "remote",
	// Additional args to pass to the `flutter test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterTestAdditionalArgs": [],
	// Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.
	"dart.flutterTrackWidgetCreation": true,
	// Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.
	//  - auto: Allow Flutter to pick the best renderer based on the users device
	//  - html: Always use the HTML renderer
	//  - canvaskit: Always use the CanvasKit renderer
	"dart.flutterWebRenderer": "auto",
	// Whether to automatically send a Hot Reload request to Dart apps during a debug session when saving files. Flutter apps are controlled by the flutterHotReloadOnSave setting.
	//  - never: Do not reload when saving
	//  - manual: Reload for explicit manual saves (requires pressing Save explicitly if using autosave)
	//  - manualIfDirty: Reload for explicit manual saves (requires pressing Save explicitly if using autosave) only if the saved file had changes
	//  - all: Reload for all saves, manual or automatic
	//  - allIfDirty: Reload for all saves, manual or automatic only if the saved file had changes
	"dart.hotReloadOnSave": "never",
	// Whether to use the --offline switch for commands like 'pub get' and 'Flutter: New Project'.
	"dart.offline": false,
	// The path to a log file for very detailed logging in the Dart Analysis Server that may be useful when trying to diagnose Analysis Server issues.
	"dart.analyzerInstrumentationLogFile": null,
	// The path to a log file for communication between Dart Code and the Analysis Server.
	"dart.analyzerLogFile": null,
	// The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints.
	"dart.dapLogFile": null,
	// The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.dartTestLogFile": null,
	// The path to a low-traffic log file for the Dart DevTools service.
	"dart.devToolsLogFile": null,
	// The path to a low-traffic log file for basic extension and editor issues.
	"dart.extensionLogFile": null,
	// The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.
	"dart.flutterDaemonLogFile": null,
	// The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterRunLogFile": null,
	// The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterTestLogFile": null,
	// The maximum number of completion items to return from a code completion request. Updated results will be fetched as additional characters are typed. Lower numbers may improved performance. Only affects LSP for > Dart SDK 2.17.
	"dart.maxCompletionItems": 100000,
	// The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.
	"dart.maxLogLineLength": 2000,
	// The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.vmServiceLogFile": null,
	// The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.webDaemonLogFile": null,
	// Whether to prompt to get/upgrade packages when opening a project with missing/out of date packages.
	"dart.promptToGetPackages": true,
	// Additional args to pass to all `pub` commands.
	"dart.pubAdditionalArgs": [],
	// Whether to automatically run `pub get` on nested projects above or below the one where the pubspec was changed.
	//  - none: Only run `pub get` for the project whose pubspec was changed
	//  - both: Run `pub get` also in parent or child projects of the one whose pubspec was changed
	//  - above: Run `pub get` also in parent projects of the one whose pubspec was changed
	//  - below: Run `pub get` also in child projects of the one whose pubspec was changed
	"dart.runPubGetOnNestedProjects": "none",
	// Whether to run `pub get` whenever `pubspec.yaml` is saved.
	//  - always: Always run when pubspec is changed
	//  - prompt: Prompt to run when pubspec is changed
	//  - never: Never run when pubspec is changed
	"dart.runPubGetOnPubspecChanges": "always",
	// Additional args to pass to the `build_runner` when building/watching/serving.
	"dart.buildRunnerAdditionalArgs": [],
	// Additional args to pass to the `dart` command when running CLI scripts. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.cliAdditionalArgs": [],
	// Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.
	//  - debugConsole: Run in the Debug Console pane, using the input as a REPL to evaluate expressions
	//  - terminal: Run in the VS Code integrated terminal where input will be sent to stdin
	//  - externalTerminal: Run in an external terminal where input will be sent to stdin
	"dart.cliConsole": "debugConsole",
	// The path to a custom Dart Debug Adapter. This setting is intended for use by Dart Debug Adapter developers.
	"dart.customDartDapPath": null,
	// The path to a custom Flutter Debug Adapter. This setting is intended for use by Dart Debug Adapter developers.
	"dart.customFlutterDapPath": null,
	// The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.
	//  - sse: Server-Sent Events
	//  - ws: WebSockets
	"dart.debugExtensionBackendProtocol": "ws",
	// Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.
	"dart.debugExternalPackageLibraries": false,
	// Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.
	"dart.debugSdkLibraries": false,
	// Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).
	"dart.evaluateGettersInDebugViews": true,
	// Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.
	"dart.evaluateToStringInDebugViews": true,
	// Determines how to display Hot Restart and Hot Reload progress.
	//  - notification: Hot reload progress will be shown in a toast notification
	//  - statusBar: Hot reload progress will be shown only in the status bar
	"dart.hotReloadProgress": "notification",
	// Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.
	"dart.promptToRunIfErrors": true,
	// Whether to show logs from the `dart:developer` `log()` function in the debug console.
	"dart.showDartDeveloperLogs": true,
	// Whether to show DevTools buttons in the floating Debug toolbar.
	"dart.showDevToolsDebugToolBarButtons": true,
	// Whether to suppress test timeouts when running/debugging tests. To work properly this requires package:test version 1.20.1 or newer. For older versions, the default timeout will be increased to 1d but this will not affect tests that have explicit (non-factor) timeouts set with @timeout.
	//  - never: Do not suppress test timeouts
	//  - debug: Suppress test timeouts when Debugging
	//  - always: Suppress test timeouts both when Running and Debugging
	"dart.suppressTestTimeouts": "never",
	// Additional args to pass to the `dart test` command. Using the `args`/`toolArgs` fields in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.testAdditionalArgs": [],
	// Additional args to pass to the Dart VM when running/debugging command line apps or Dart test scripts.
	"dart.vmAdditionalArgs": [],
	// Whether to check you are using the latest version of the Dart SDK at startup.
	"dart.checkForSdkUpdates": true,
	// The location of the Flutter SDK to use. If blank (or not a valid SDK), Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.
	"dart.flutterSdkPath": null,
	// An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs that can be used for fast SDK switching. These paths are not used directly when searching for an SDK. When this setting is populated, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.flutterSdkPaths": [],
	// The location of the Dart SDK to use for analyzing and executing code. If blank (or not a valid SDK), Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.
	"dart.sdkPath": null,
	// An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs that can be used for fast SDK switching. These paths are not used directly when searching for an SDK. When this setting is populated, the SDK version number in the status bar can be used to quickly switch between SDKs.
	"dart.sdkPaths": [],
	// Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.
	"dart.allowTestsOutsideTestFolder": false,
	// When to automatically switch focus to the test list (array to support multiple values).
	"dart.openTestView": [
		"testRunStart"
	],
	// Whether to show skipped tests in the test tree.
	"dart.showSkippedTests": true,
	// Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.
	"dart.env": {},
	// How many levels (including the workspace roots) down the workspace to search for Dart/Flutter projects. Increasing this number may help detect Flutter projects that are deeply nested in your workspace but slow down all operations that search for projects, including extension activation.
	"dart.projectSearchDepth": 5,
	// EXPERIMENTAL: The port where flutter daemon can be accessed if daemon is run remotely. This setting is intended for use by Google developers.
	"dart.daemonPort": null,
	// Whether to use code snippets from the Dart Analysis Server instead of those included in the extension. Server snippets are context and language-version aware and should be preferred.
	"dart.enableServerSnippets": true,
	// Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.
	"dart.normalizeFileCasing": false,
	// EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.
	"dart.previewCommitCharacters": false,
	// EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).
	"dart.previewFlutterUiGuides": false,
	// EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).
	"dart.previewFlutterUiGuidesCustomTracking": false,
	// Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.
	"dart.previewHotReloadOnSaveWatcher": false,
	// PREVIEW: Whether to use the new debug adapters shipped in the Dart and Flutter SDKs. This setting will only apply if your SDK is new enough to include an appropriate version of the DAP server. Setting the value to `true` will opt-in to the new DAPs. Setting to `false` will opt-out. Leaving as `null` will allow the extension to decide when to enable the SDK DAPs as part of a progressive rollout.
	"dart.previewSdkDaps": null,
	// Contrôle si les actions inline sont toujours visibles dans la vue Contrôle de code source.
	"scm.alwaysShowActions": false,
	// Contrôle si les dépôts doivent toujours être visibles dans l’affichage Contrôle de code source.
	"scm.alwaysShowRepositories": false,
	// Contrôle si l’affichage Contrôle de code source doit automatiquement afficher et sélectionner les fichiers lors de leur ouverture.
	"scm.autoReveal": true,
	// Contrôle le badge de comptage sur l'icône Contrôle de code source de la barre d'activités.
	//  - all: Affichez la somme de tous les badges de comptage de fournisseurs de contrôle de code source.
	//  - focused: Affichez le badge de compte du fournisseur de commande de source ciblé.
	//  - off: Désactivez le badge de compte Commande de source.
	"scm.countBadge": "all",
	// Contrôle le mode d'affichage du dépôt de contrôle de code source par défaut.
	//  - tree: Affichez les changements de dépôt dans une arborescence.
	//  - list: Affichez les changements du dépôt dans une liste.
	"scm.defaultViewMode": "list",
	// Contrôle le référentiel de contrôle de code source par défaut qui modifie l’ordre de tri lorsqu’il est affiché en tant que liste.
	//  - name: Trier les modifications du référentiel par nom de fichier
	//  - path: Trier les modifications du référentiel par chemin
	//  - status: Trier les modifications du référentiel par état Contrôle de code source.
	"scm.defaultViewSortKey": "path",
	// Contrôle les décorations diff dans l'éditeur
	//  - all: Affichez les décorations de différence dans tous les emplacements disponibles.
	//  - gutter: Affichez les décorations de différence seulement dans la marge de l'éditeur.
	//  - overview: Affichez les décorations de différence seulement dans la règle d'aperçu.
	//  - minimap: Affichez les décorations de différence seulement dans le minimap.
	//  - none: N'affichez pas les décorations de différence.
	"scm.diffDecorations": "all",
	// Contrôle le comportement des décorations de la gouttière des différences du contrôle de code source.
	//  - diff: Affiche l'aperçu des différences de manière incluse en cas de clic.
	//  - none: Ne fait rien.
	"scm.diffDecorationsGutterAction": "diff",
	// Contrôle si un modèle est utilisé pour les décorations de différences dans la reliure.
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},
	// Contrôle la visibilité du décorateur de diff du contrôle de code source dans la reliure.
	//  - always: Affichez tout le temps le décorateur de diff dans la reliure.
	//  - hover: Montrez le décorateur de diff dans la reliure seulement au pointage.
	"scm.diffDecorationsGutterVisibility": "always",
	// Contrôle la largeur (px) des décorations de différenciation dans la marge (ajouts et modifications).
	"scm.diffDecorationsGutterWidth": 3,
	// Contrôle si les espaces blancs de début et de fin sont ignorés dans les décorations de reliure diff du contrôle de code source.
	//  - true: Ignorer les espaces de début et de fin.
	//  - false: Ne pas ignorer les espaces de début et de fin
	//  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",
	// Contrôle la police du message d'entrée. Utilisez 'default' pour la famille de polices de l'interface utilisateur du plan de travail, 'editor' pour la valeur de '#editor.fontFamily#' ou une famille de polices personnalisée.
	"scm.inputFontFamily": "default",
	// Contrôle la taille de police du message d'entrée en pixels.
	"scm.inputFontSize": 13,
	// Contrôle les badges de comptage sur les en-têtes de fournisseur de contrôle de code source. Ces en-têtes apparaissent uniquement quand il y a plusieurs fournisseurs.
	//  - hidden: Masquez les badges de comptage de fournisseurs de contrôle de code source.
	//  - auto: Affichez uniquement le badge de comptage de fournisseurs de contrôle de code source lorsque la valeur est différente de zéro.
	//  - visible: Affichez les badges de comptage de fournisseurs de contrôle de code source.
	"scm.providerCountBadge": "hidden",
	// Contrôle l’ordre de tri des dépôts dans l’affichage des référentiels de contrôle de code source.
	//  - discovery time: Les référentiels dans l’affichage Référentiels de contrôle de code source sont triés par heure de découverte. Les référentiels dans l’affichage Contrôle de code source sont triés dans l’ordre dans lequel ils ont été sélectionnés.
	//  - name: Les référentiels dans les référentiels de contrôle de code source et les affichages de contrôle de code source sont triés par nom de référentiel.
	//  - path: Les référentiels dans les référentiels de contrôle de code source et les affichages de contrôle de code source sont triés par chemin d'accès de référentiel.
	"scm.repositories.sortOrder": "discovery time",
	// Contrôle le nombre de dépôts visibles dans la section Dépôts de contrôle de code source. Définissez la valeur '0' pour redimensionner manuellement la vue.
	"scm.repositories.visible": 10,
	// Contrôle si un bouton d’action peut être affiché dans l’affichage Contrôle de code source.
	"scm.showActionButton": true,
	// Contrôle si l'éditeur affiche CodeLens.
	"diffEditor.codeLens": false,
	// 
	//  - smart: Utilise l’algorithme de comparaison par défaut.
	//  - experimental: Utilise un algorithme de comparaison expérimental.
	"diffEditor.diffAlgorithm": "smart",
	// Quand il est activé, l'éditeur de différences ignore les changements d'espace blanc de début ou de fin.
	"diffEditor.ignoreTrimWhitespace": true,
	// Délai d'expiration en millisecondes avant annulation du calcul de diff. Utilisez 0 pour supprimer le délai d'expiration.
	"diffEditor.maxComputationTime": 5000,
	// Taille de fichier maximale en Mo pour laquelle calculer les différences. Utilisez 0 pour ne pas avoir de limite.
	"diffEditor.maxFileSize": 50,
	// Contrôle si l'éditeur de différences affiche les indicateurs +/- pour les changements ajoutés/supprimés .
	"diffEditor.renderIndicators": true,
	// Lorsqu’il est activé, l’éditeur de différences affiche des flèches dans sa marge de glyphe pour rétablir les modifications.
	"diffEditor.renderMarginRevertIcon": true,
	// Contrôle si l'éditeur de différences affiche les différences en mode côte à côte ou inline.
	"diffEditor.renderSideBySide": true,
	// 
	//  - off: Le retour automatique à la ligne n'est jamais effectué.
	//  - on: Le retour automatique à la ligne s'effectue en fonction de la largeur de la fenêtre d'affichage.
	//  - inherit: Le retour automatique à la ligne dépend du paramètre `editor.wordWrap`.
	"diffEditor.wordWrap": "inherit",
	// Contrôle si les suggestions doivent être acceptées sur les caractères de validation, et entre ce caractère. Par exemple, en JavaScript, le point-virgule ('; ') peut être un caractère de validation qui accepte une suggestion.
	"editor.acceptSuggestionOnCommitCharacter": true,
	// Contrôle si les suggestions sont acceptées après appui sur 'Entrée', en plus de 'Tab'. Permet d’éviter toute ambiguïté entre l’insertion de nouvelles lignes et l'acceptation de suggestions.
	//  - on
	//  - smart: Accepter uniquement une suggestion avec 'Entrée' quand elle effectue une modification textuelle.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",
	// Contrôle le nombre de lignes de l’éditeur qu’un lecteur d’écran peut lire en une seule fois. Quand nous détectons un lecteur d’écran, nous définissons automatiquement la valeur par défaut à 500. Attention : Les valeurs supérieures à la valeur par défaut peuvent avoir un impact important sur les performances.
	"editor.accessibilityPageSize": 10,
	// Contrôle si l'éditeur doit s'exécuter dans un mode optimisé pour les lecteurs d'écran.
	//  - auto: L'éditeur utilise les API de la plateforme pour détecter si un lecteur d'écran est attaché.
	//  - on: L'éditeur est optimisé en permanence pour les lecteurs d'écran. Le retour automatique à la ligne est désactivé.
	//  - off: L'éditeur n'est jamais optimisé pour une utilisation avec un lecteur d'écran.
	"editor.accessibilitySupport": "auto",
	// Contrôle si l’éditeur doit fermer automatiquement les parenthèses quand l’utilisateur ajoute une parenthèse ouvrante.
	//  - always
	//  - languageDefined: Utilisez les configurations de langage pour déterminer quand fermer automatiquement les parenthèses.
	//  - beforeWhitespace: Fermer automatiquement les parenthèses uniquement lorsque le curseur est à gauche de l’espace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",
	// Contrôle si l'éditeur doit supprimer les guillemets ou crochets fermants adjacents au moment de la suppression.
	//  - always
	//  - auto: Supprimez les guillemets ou crochets fermants adjacents uniquement s'ils ont été insérés automatiquement.
	//  - never
	"editor.autoClosingDelete": "auto",
	// Contrôle si l'éditeur doit taper avant les guillemets ou crochets fermants.
	//  - always
	//  - auto: Tapez avant les guillemets ou les crochets fermants uniquement s'ils sont automatiquement insérés.
	//  - never
	"editor.autoClosingOvertype": "auto",
	// Contrôle si l’éditeur doit fermer automatiquement les guillemets après que l’utilisateur ajoute un guillemet ouvrant.
	//  - always
	//  - languageDefined: Utilisez les configurations de langage pour déterminer quand fermer automatiquement les guillemets.
	//  - beforeWhitespace: Fermer automatiquement les guillemets uniquement lorsque le curseur est à gauche de l’espace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",
	// Contrôle si l'éditeur doit ajuster automatiquement le retrait quand les utilisateurs tapent, collent, déplacent ou mettent en retrait des lignes.
	//  - none: L'éditeur n'insère pas de retrait automatiquement.
	//  - keep: L'éditeur conserve le retrait de la ligne actuelle.
	//  - brackets: L'éditeur conserve le retrait de la ligne actuelle et honore les crochets définis par le langage.
	//  - advanced: L'éditeur conserve le retrait de la ligne actuelle, honore les crochets définis par le langage et appelle des objets onEnterRules spéciaux définis par les langages.
	//  - full: L'éditeur conserve le retrait de la ligne actuelle, honore les crochets définis par le langage, appelle des objets onEnterRules spéciaux définis par les langages et honore les objets indentationRules définis par les langages.
	"editor.autoIndent": "full",
	// Contrôle si l'éditeur doit automatiquement entourer les sélections quand l'utilisateur tape des guillemets ou des crochets.
	//  - languageDefined: Utilisez les configurations de langue pour déterminer quand entourer automatiquement les sélections.
	//  - quotes: Entourez avec des guillemets et non des crochets.
	//  - brackets: Entourez avec des crochets et non des guillemets.
	//  - never
	"editor.autoSurround": "languageDefined",
	// Contrôle si la colorisation des paires de crochets est activée ou non. Utilisez `workbench.colorCustomizations` pour remplacer les couleurs de surbrillance des crochets.
	"editor.bracketPairColorization.enabled": true,
	// Contrôle si chaque type de crochet possède son propre pool de couleurs indépendant.
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,
	// Types d'action de code à exécuter à l'enregistrement.
	"editor.codeActionsOnSave": {},
	// Activez/désactivez l’affichage des en-têtes de groupe dans le menu d’action du code.
	"editor.codeActionWidget.showHeaders": true,
	// Contrôle si l'éditeur affiche CodeLens.
	"editor.codeLens": true,
	// Contrôle la famille de polices pour CodeLens.
	"editor.codeLensFontFamily": "",
	// Contrôle la taille de police en pixels pour CodeLens. Quand la valeur est '0', 90 % de '#editor.fontSize#' est utilisé.
	"editor.codeLensFontSize": 0,
	// Contrôle si l'éditeur doit afficher les éléments décoratifs de couleurs inline et le sélecteur de couleurs.
	"editor.colorDecorators": true,
	// Autoriser l'utilisation de la souris et des touches pour sélectionner des colonnes.
	"editor.columnSelection": false,
	// Contrôle si les lignes vides doivent être ignorées avec des actions d'activation/de désactivation, d'ajout ou de suppression des commentaires de ligne.
	"editor.comments.ignoreEmptyLines": true,
	// Contrôle si un espace est inséré pour les commentaires.
	"editor.comments.insertSpace": true,
	// Contrôle si la coloration syntaxique doit être copiée dans le presse-papiers.
	"editor.copyWithSyntaxHighlighting": true,
	// Contrôler le style d’animation du curseur.
	"editor.cursorBlinking": "blink",
	// Contrôle si l'animation du point d'insertion doit être activée.
	"editor.cursorSmoothCaretAnimation": false,
	// Contrôle le style du curseur.
	"editor.cursorStyle": "line",
	// Contrôle le nombre minimal de lignes de début et de fin visibles autour du curseur. Également appelé 'scrollOff' ou 'scrollOffset' dans d'autres éditeurs.
	"editor.cursorSurroundingLines": 0,
	// Contrôle quand 'cursorSurroundingLines' doit être appliqué.
	//  - default: 'cursorSurroundingLines' est appliqué seulement s'il est déclenché via le clavier ou une API.
	//  - all: 'cursorSurroundingLines' est toujours appliqué.
	"editor.cursorSurroundingLinesStyle": "default",
	// Détermine la largeur du curseur lorsque `editor.cursorStyle` est à `line`.
	"editor.cursorWidth": 0,
	// Définit un fournisseur de plages de pliage par défaut qui est prioritaire sur tous les autres fournisseurs de plages de pliage. Doit être l’identificateur d’une extension contribuant à un fournisseur de plage de pliage.
	//  - null: Tous les fournisseurs de plages de pliage actives
	//  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - codeandstuff.package-json-upgrade: Shows available updates in package.json files. Offers quick fix command to update them and to show the changelog.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - octref.vetur: Vue tooling for VS Code
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - sidharthachatterjee.vscode-tailwindcss
	//  - redhat.vscode-xml: XML Language Support by Red Hat
	//  - shakram02.bash-beautify: Format / Beautify bash and shell scripts
	//  - artlaman.chalice-icon-theme: A minimalistic icon theme
	//  - naumovs.color-highlight: Highlight web colors in your editor
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ZainChen.json: Json for Visual Studio Code
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - mohsen1.prettify-json: Visual Studio Code Prettify JSON Extension
	//  - 2gua.rainbow-brackets: A rainbow brackets extension for VS Code.
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - zengxingxin.sort-js-object-keys: An extension to sort the js object keys
	//  - RobbOwen.synthwave-vscode: A Synthwave-inspired colour theme to satisfy your neon dreams
	//  - ChakrounAnas.turbo-console-log: Automating the process of writing meaningful log messages.
	//  - Equinusocio.vsc-material-theme: The most epic theme now for Visual Studio Code
	//  - equinusocio.vsc-material-theme-icons: Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.
	//  - redhat.vscode-commons: Base utilities for Red Hat extensions. Notably controls telemetry settings.
	//  - be5invis.vscode-custom-css: Custom CSS and JS for Visual Studio Code
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - johnpapa.vscode-peacock: Subtly change the workspace color of your workspace. Ideal when you have multiple VS Code instances and you want to quickly identify which is which.
	//  - tonybaloney.vscode-pets: Pets for your VS Code
	//  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	"editor.defaultFoldingRangeProvider": null,
	// Définit un formateur par défaut qui est prioritaire sur tous les autres paramètres de formateur. Doit être l'identificateur d'une extension contribuant à un formateur.
	//  - null: Aucun(e)
	//  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
	//  - shakram02.bash-beautify: Format / Beautify bash and shell scripts
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - Zignd.html-css-class-completion: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - codeandstuff.package-json-upgrade: Shows available updates in package.json files. Offers quick fix command to update them and to show the changelog.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - octref.vetur: Vue tooling for VS Code
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
	//  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
	//  - vscjava.vscode-maven: Manage Maven projects, execute goals, generate project from archetype, improve user experience for Java developers.
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - sidharthachatterjee.vscode-tailwindcss
	//  - redhat.vscode-xml: XML Language Support by Red Hat
	//  - artlaman.chalice-icon-theme: A minimalistic icon theme
	//  - naumovs.color-highlight: Highlight web colors in your editor
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - eamodio.gitlens: Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ZainChen.json: Json for Visual Studio Code
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - vscode.media-preview: Provides VS Code's built-in previews for images, audio, and video
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - mohsen1.prettify-json: Visual Studio Code Prettify JSON Extension
	//  - 2gua.rainbow-brackets: A rainbow brackets extension for VS Code.
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - zengxingxin.sort-js-object-keys: An extension to sort the js object keys
	//  - RobbOwen.synthwave-vscode: A Synthwave-inspired colour theme to satisfy your neon dreams
	//  - ChakrounAnas.turbo-console-log: Automating the process of writing meaningful log messages.
	//  - Equinusocio.vsc-material-theme: The most epic theme now for Visual Studio Code
	//  - equinusocio.vsc-material-theme-icons: Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.
	//  - redhat.vscode-commons: Base utilities for Red Hat extensions. Notably controls telemetry settings.
	//  - be5invis.vscode-custom-css: Custom CSS and JS for Visual Studio Code
	//  - vscjava.vscode-java-dependency: Manage Java projects in Visual Studio Code
	//  - vscjava.vscode-java-test: Run and debug JUnit or TestNG test cases.
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - johnpapa.vscode-peacock: Subtly change the workspace color of your workspace. Ideal when you have multiple VS Code instances and you want to quickly identify which is which.
	//  - tonybaloney.vscode-pets: Pets for your VS Code
	//  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	"editor.defaultFormatter": null,
	// Contrôle si le geste de souris Accéder à la définition ouvre toujours le widget d'aperçu.
	"editor.definitionLinkOpensInPeek": false,
	// Contrôle si `editor.tabSize#` et `#editor.insertSpaces` sont automatiquement détectés lors de l’ouverture d’un fichier en fonction de son contenu.
	"editor.detectIndentation": true,
	// Contrôle si l’éditeur autorise le déplacement de sélections par glisser-déplacer.
	"editor.dragAndDrop": true,
	// Contrôle si vous pouvez faire glisser et déposer un fichier dans un éditeur de texte en maintenant la touche Maj enfoncée (au lieu d’ouvrir le fichier dans un éditeur).
	"editor.dropIntoEditor.enabled": true,
	// Contrôle si la copie sans sélection permet de copier la ligne actuelle.
	"editor.emptySelectionClipboard": true,
	// Activez/désactivez l’exécution des modifications à partir des extensions lors du collage.
	"editor.experimental.pasteActions.enabled": false,
	// Multiplicateur de vitesse de défilement quand vous appuyez sur 'Alt'.
	"editor.fastScrollSensitivity": 5,
	// Contrôle si le widget Recherche doit ajouter des lignes supplémentaires en haut de l'éditeur. Quand la valeur est true, vous pouvez faire défiler au-delà de la première ligne si le widget Recherche est visible.
	"editor.find.addExtraSpaceOnTop": true,
	// Contrôle la condition d'activation automatique de la recherche dans la sélection.
	//  - never: Ne jamais activer automatiquement la recherche dans la sélection (par défaut).
	//  - always: Toujours activer automatiquement la recherche dans la sélection.
	//  - multiline: Activez Rechercher automatiquement dans la sélection quand plusieurs lignes de contenu sont sélectionnées.
	"editor.find.autoFindInSelection": "never",
	// Contrôle si le curseur doit sauter pour rechercher les correspondances lors de la saisie.
	"editor.find.cursorMoveOnType": true,
	// Détermine si le Widget Recherche devrait lire ou modifier le presse-papiers de recherche partagé sur macOS.
	"editor.find.globalFindClipboard": false,
	// Contrôle si la recherche redémarre automatiquement depuis le début (ou la fin) quand il n'existe aucune autre correspondance.
	"editor.find.loop": true,
	// Détermine si la chaîne de recherche dans le Widget Recherche est initialisée avec la sélection de l’éditeur.
	//  - never: Ne lancez jamais la chaîne de recherche dans la sélection de l’éditeur.
	//  - always: Toujours amorcer la chaîne de recherche à partir de la sélection de l’éditeur, y compris le mot à la position du curseur.
	//  - selection: Chaîne de recherche initiale uniquement dans la sélection de l’éditeur.
	"editor.find.seedSearchStringFromSelection": "always",
	// Contrôle si l'éditeur a le pliage de code activé.
	"editor.folding": true,
	// Contrôle si l'éditeur doit mettre en évidence les plages pliées.
	"editor.foldingHighlight": true,
	// Contrôle si l’éditeur réduit automatiquement les plages d’importation.
	"editor.foldingImportsByDefault": false,
	// Nombre maximal de régions pliables. L’augmentation de cette valeur peut réduire la réactivité de l’éditeur lorsque la source actuelle comprend un grand nombre de régions pliables.
	"editor.foldingMaximumRegions": 5000,
	// Contrôle la stratégie de calcul des plages de pliage.
	//  - auto: Utilisez une stratégie de pliage propre à la langue, si disponible, sinon utilisez la stratégie basée sur le retrait.
	//  - indentation: Utilisez la stratégie de pliage basée sur le retrait.
	"editor.foldingStrategy": "auto",
	// Contrôle la famille de polices.
	"editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",
	// Configure les ligatures de police ou les fonctionnalités de police. Il peut s'agir d'une valeur booléenne permettant d'activer/de désactiver les ligatures, ou d'une chaîne correspondant à la valeur de la propriété CSS 'font-feature-settings'.
	"editor.fontLigatures": false,
	// Contrôle la taille de police en pixels.
	"editor.fontSize": 12,
	// Contrôle l'épaisseur de police. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"editor.fontWeight": "normal",
	// Détermine si l’éditeur doit automatiquement mettre en forme le contenu collé. Un formateur doit être disponible et être capable de mettre en forme une plage dans un document.
	"editor.formatOnPaste": false,
	// Met en forme un fichier à l'enregistrement. Un formateur doit être disponible, le fichier ne doit pas être enregistré après un délai et l'éditeur ne doit pas être en cours d'arrêt.
	"editor.formatOnSave": false,
	// Permet de contrôler si la mise en forme au moment de l'enregistrement met en forme la totalité du fichier ou seulement les modifications apportées. S'applique uniquement quand '#editor.formatOnSave#' est activé.
	//  - file: Met en forme la totalité du fichier.
	//  - modifications: Met en forme les modifications (nécessite le contrôle de code source).
	//  - modificationsIfAvailable: Tente de mettre en forme les modifications uniquement (nécessite le contrôle de code source). Si le contrôle de code source ne peut pas être utilisé, le fichier entier est mis en forme.
	"editor.formatOnSaveMode": "file",
	// Contrôle si l’éditeur doit mettre automatiquement en forme la ligne après la saisie.
	"editor.formatOnType": false,
	// Contrôle si l'éditeur doit afficher la marge de glyphes verticale. La marge de glyphes sert principalement au débogage.
	"editor.glyphMargin": true,
	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la déclaration' est l'emplacement actuel.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la définition' est l'emplacement actuel.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
	// ID de commande alternatif exécuté quand le résultat de 'Atteindre l'implémentation' est l'emplacement actuel.
	"editor.gotoLocation.alternativeImplementationCommand": "",
	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la référence' est l'emplacement actuel.
	"editor.gotoLocation.alternativeReferenceCommand": "",
	// ID de commande alternatif exécuté quand le résultat de 'Atteindre la définition de type' est l'emplacement actuel.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
	// Ce paramètre est déprécié, utilisez des paramètres distincts comme 'editor.editor.gotoLocation.multipleDefinitions' ou 'editor.editor.gotoLocation.multipleImplementations' à la place.
	// 
	"editor.gotoLocation.multiple": null,
	// Contrôle le comportement de la commande 'Atteindre la déclaration' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleDeclarations": "peek",
	// Contrôle le comportement de la commande 'Atteindre la définition' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleDefinitions": "peek",
	// Contrôle le comportement de la commande 'Atteindre les implémentations' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleImplementations": "peek",
	// Contrôle le comportement de la commande 'Atteindre les références' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleReferences": "peek",
	// Contrôle le comportement de la commande 'Atteindre la définition de type' quand plusieurs emplacements cibles existent.
	//  - peek: Montrer l'aperçu des résultats (par défaut)
	//  - gotoAndPeek: Accéder au résultat principal et montrer un aperçu
	//  - goto: Accéder au résultat principal et activer l'accès sans aperçu pour les autres
	"editor.gotoLocation.multipleTypeDefinitions": "peek",
	// Contrôle si les guides de la paire de crochets sont activés ou non.
	//  - true: Désactive les repères de paire de crochets.
	//  - active: Active les repères de paire de crochets uniquement pour la paire de crochets actifs.
	//  - false: Désactive les repères de paire de crochets.
	"editor.guides.bracketPairs": false,
	// Contrôle si les guides de la paire de crochets horizontaux sont activés ou non.
	//  - true: Active les repères horizontaux en plus des repères de paire de crochets verticaux.
	//  - active: Active les repères horizontaux uniquement pour la paire de crochets actifs.
	//  - false: Désactive les repères de paire de crochets horizontaux.
	"editor.guides.bracketPairsHorizontal": "active",
	// Contrôle si l’éditeur doit mettre en surbrillance la paire de crochets actifs.
	"editor.guides.highlightActiveBracketPair": true,
	// Contrôle si l’éditeur doit mettre en surbrillance le guide de mise en retrait actif.
	//  - true: Met en surbrillance le guide de retrait actif.
	//  - always: Met en surbrillance le repère de retrait actif même si les repères de crochet sont mis en surbrillance.
	//  - false: Ne mettez pas en surbrillance le repère de retrait actif.
	"editor.guides.highlightActiveIndentation": true,
	// Contrôle si l’éditeur doit afficher les guides de mise en retrait.
	"editor.guides.indentation": true,
	// Contrôle si le curseur doit être masqué dans la règle de la vue d’ensemble.
	"editor.hideCursorInOverviewRuler": false,
	// Préférez afficher les points au-dessus de la ligne, s’il y a de l’espace.
	"editor.hover.above": true,
	// Contrôle le délai en millisecondes, après lequel le survol est affiché.
	"editor.hover.delay": 300,
	// Contrôle si le pointage est affiché.
	"editor.hover.enabled": true,
	// Contrôle si le pointage doit rester visible quand la souris est déplacée au-dessus.
	"editor.hover.sticky": true,
	// Active les indicateurs inlay dans l’éditeur.
	//  - on: Les indicateurs d’inlay sont activés.
	//  - onUnlessPressed: Les indicateurs d’inlay sont affichés par défaut et masqués lors de la conservation Ctrl+Option
	//  - offUnlessPressed: Les indicateurs d’inlay sont masqués par défaut et s’affichent lorsque vous maintenez Ctrl+Option
	//  - off: Les indicateurs d’inlay sont désactivés.
	"editor.inlayHints.enabled": "on",
	// Contrôle la famille de polices des indicateurs d’inlay dans l’éditeur. Lorsqu’il est défini sur vide, le `editor.fontFamily` est utilisé.
	"editor.inlayHints.fontFamily": "",
	// Contrôle la taille de police des indicateurs d’inlay dans l’éditeur. Par défaut, le `editor.fontSize` est utilisé lorsque la valeur configurée est inférieure à `5` ou supérieure à la taille de police de l’éditeur.
	"editor.inlayHints.fontSize": 0,
	// Active le remplissage autour des indicateurs d’inlay dans l’éditeur.
	"editor.inlayHints.padding": false,
	// Contrôle si les suggestions en ligne doivent être affichées automatiquement dans l’éditeur.
	"editor.inlineSuggest.enabled": true,
	// Espaces insérés quand vous appuyez sur la touche Tab. Ce paramètre est remplacé en fonction du contenu du fichier quand `editor.detectIndentation` est activé.
	"editor.insertSpaces": true,
	// Définit les symboles de type crochet qui augmentent ou diminuent le retrait.
	"editor.language.brackets": null,
	// Définit les paires de crochets qui sont colorisées par leur niveau d’imbrication si la colorisation des paires de crochets est activée.
	"editor.language.colorizedBracketPairs": null,
	// Traitement spécial des fichiers volumineux pour désactiver certaines fonctionnalités utilisant beaucoup de mémoire.
	"editor.largeFileOptimizations": true,
	// Contrôle l'espacement des lettres en pixels.
	"editor.letterSpacing": 0,
	// Active l’ampoule d’action de code dans l’éditeur.
	"editor.lightbulb.enabled": true,
	// Contrôle la hauteur de ligne. 
	//  - Utilisez 0 pour calculer automatiquement la hauteur de ligne à partir de la taille de police.
	//  : les valeurs comprises entre 0 et 8 sont utilisées comme multiplicateur avec la taille de police.
	//  : les valeurs supérieures ou égales à 8 seront utilisées comme valeurs effectives.
	"editor.lineHeight": 0,
	// Contrôle l'affichage des numéros de ligne.
	//  - off: Les numéros de ligne ne sont pas affichés.
	//  - on: Les numéros de ligne sont affichés en nombre absolu.
	//  - relative: Les numéros de ligne sont affichés sous la forme de distance en lignes à la position du curseur.
	//  - interval: Les numéros de ligne sont affichés toutes les 10 lignes.
	"editor.lineNumbers": "on",
	// Contrôle si la modification liée est activée dans l'éditeur. En fonction du langage, les symboles associés, par exemple les balises HTML, sont mis à jour durant le processus de modification.
	"editor.linkedEditing": false,
	// Contrôle si l’éditeur doit détecter les liens et les rendre cliquables.
	"editor.links": true,
	// Mettez en surbrillance les crochets correspondants.
	"editor.matchBrackets": "always",
	// Les lignes plus longues que cette valeur ne sont pas tokenisées pour des raisons de performances
	"editor.maxTokenizationLineLength": 20000,
	// Contrôle si la minimap est masquée automatiquement.
	"editor.minimap.autohide": false,
	// Contrôle si la minimap est affichée.
	"editor.minimap.enabled": true,
	// Limiter la largeur de la minimap pour afficher au plus un certain nombre de colonnes.
	"editor.minimap.maxColumn": 120,
	// Afficher les caractères réels sur une ligne par opposition aux blocs de couleur.
	"editor.minimap.renderCharacters": true,
	// Échelle du contenu dessiné dans le minimap : 1, 2 ou 3.
	"editor.minimap.scale": 1,
	// Contrôle quand afficher le curseur du minimap.
	"editor.minimap.showSlider": "mouseover",
	// Contrôle le côté où afficher la minimap.
	"editor.minimap.side": "right",
	// Contrôle la taille du minimap.
	//  - proportional: Le minimap a la même taille que le contenu de l'éditeur (défilement possible).
	//  - fill: Le minimap s'agrandit ou se réduit selon les besoins pour remplir la hauteur de l'éditeur (pas de défilement).
	//  - fit: Le minimap est réduit si nécessaire pour ne jamais dépasser la taille de l'éditeur (pas de défilement).
	"editor.minimap.size": "proportional",
	// Un multiplicateur à utiliser sur les `deltaX` et `deltaY` des événements de défilement de roulette de souris.
	"editor.mouseWheelScrollSensitivity": 1,
	// Faire un zoom sur la police de l'éditeur quand l'utilisateur fait tourner la roulette de la souris tout en maintenant la touche 'Ctrl' enfoncée.
	"editor.mouseWheelZoom": false,
	// Fusionnez plusieurs curseurs quand ils se chevauchent.
	"editor.multiCursorMergeOverlapping": true,
	// Modificateur à utiliser pour ajouter plusieurs curseurs avec la souris. Les mouvements de la souris Atteindre la définition et Ouvrir le lien s’adaptent afin qu’ils ne soient pas en conflit avec le [modificateur multicurseur](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modificateur).
	//  - ctrlCmd: Mappe vers 'Contrôle' dans Windows et Linux, et vers 'Commande' dans macOS.
	//  - alt: Mappe vers 'Alt' dans Windows et Linux, et vers 'Option' dans macOS.
	"editor.multiCursorModifier": "alt",
	// Contrôle le collage quand le nombre de lignes du texte collé correspond au nombre de curseurs.
	//  - spread: Chaque curseur colle une seule ligne de texte.
	//  - full: Chaque curseur colle le texte en entier.
	"editor.multiCursorPaste": "spread",
	// Contrôle si l'éditeur doit mettre en surbrillance les occurrences de symboles sémantiques.
	"editor.occurrencesHighlight": true,
	// Contrôle si une bordure doit être dessinée autour de la règle de la vue d'ensemble.
	"editor.overviewRulerBorder": true,
	// Contrôle la quantité d'espace entre le bord inférieur de l'éditeur et la dernière ligne.
	"editor.padding.bottom": 0,
	// Contrôle la quantité d’espace entre le bord supérieur de l’éditeur et la première ligne.
	"editor.padding.top": 0,
	// Détermine si le menu de suggestions de paramètres se ferme ou reviens au début lorsque la fin de la liste est atteinte.
	"editor.parameterHints.cycle": false,
	// Active une fenêtre contextuelle qui affiche de la documentation sur les paramètres et des informations sur les types à mesure que vous tapez.
	"editor.parameterHints.enabled": true,
	// Contrôle s'il faut mettre le focus sur l'éditeur inline ou sur l'arborescence dans le widget d'aperçu.
	//  - tree: Focus sur l'arborescence à l'ouverture de l'aperçu
	//  - editor: Placer le focus sur l'éditeur à l'ouverture de l'aperçu
	"editor.peekWidgetDefaultFocus": "tree",
	// Contrôle si les suggestions doivent s’afficher automatiquement lors de la saisie. Cela peut être contrôlé pour la saisie dans des commentaires, des chaînes et d’autres codes. Vous pouvez configurer la suggestion rapide pour qu’elle s’affiche sous forme de texte fantôme ou avec le widget de suggestion. Tenez également compte du paramètre '#editor.suggestOnTriggerCharacters#' qui contrôle si des suggestions sont déclenchées par des caractères spéciaux.
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},
	// Contrôle le délai en millisecondes après lequel des suggestions rapides sont affichées.
	"editor.quickSuggestionsDelay": 10,
	// Activer/désactiver la possibilité d'afficher un aperçu des changements avant le renommage
	"editor.rename.enablePreview": true,
	// Déprécié. Utilisez 'editor.linkedEditing' à la place.
	// Contrôle si l'éditeur renomme automatiquement selon le type.
	"editor.renameOnType": false,
	// Contrôle si l’éditeur doit afficher les caractères de contrôle.
	"editor.renderControlCharacters": true,
	// Affichez le dernier numéro de ligne quand le fichier se termine par un saut de ligne.
	"editor.renderFinalNewline": true,
	// Contrôle la façon dont l’éditeur doit afficher la mise en surbrillance de la ligne actuelle.
	//  - none
	//  - gutter
	//  - line
	//  - all: Met en surbrillance la gouttière et la ligne actuelle.
	"editor.renderLineHighlight": "line",
	// Contrôle si l'éditeur doit afficher la mise en surbrillance de la ligne actuelle uniquement quand il a le focus.
	"editor.renderLineHighlightOnlyWhenFocus": false,
	// Contrôle la façon dont l’éditeur doit restituer les caractères espaces.
	//  - none
	//  - boundary: Affiche les espaces blancs à l'exception des espaces uniques entre les mots.
	//  - selection: Afficher les espaces blancs uniquement sur le texte sélectionné.
	//  - trailing: Affiche uniquement les caractères correspondant aux espaces blancs de fin.
	//  - all
	"editor.renderWhitespace": "selection",
	// Contrôle si les sélections doivent avoir des angles arrondis.
	"editor.roundedSelection": true,
	// Rendre les règles verticales après un certain nombre de caractères à espacement fixe. Utiliser plusieurs valeurs pour plusieurs règles. Aucune règle n'est dessinée si le tableau est vide.
	"editor.rulers": [],
	// Contrôle la visibilité de la barre de défilement horizontale.
	//  - auto: La barre de défilement horizontale sera visible uniquement lorsque cela est nécessaire.
	//  - visible: La barre de défilement horizontale est toujours visible.
	//  - hidden: La barre de défilement horizontale est toujours masquée.
	"editor.scrollbar.horizontal": "auto",
	// Hauteur de la barre de défilement horizontale.
	"editor.scrollbar.horizontalScrollbarSize": 12,
	// Contrôle si les clics permettent de faire défiler par page ou d’accéder à la position de clic.
	"editor.scrollbar.scrollByPage": false,
	// Contrôle la visibilité de la barre de défilement verticale.
	//  - auto: La barre de défilement verticale sera visible uniquement lorsque cela est nécessaire.
	//  - visible: La barre de défilement verticale est toujours visible.
	//  - hidden: La barre de défilement verticale est toujours masquée.
	"editor.scrollbar.vertical": "auto",
	// Largeur de la barre de défilement verticale.
	"editor.scrollbar.verticalScrollbarSize": 14,
	// Contrôle le nombre de caractères supplémentaires, au-delà duquel l’éditeur défile horizontalement.
	"editor.scrollBeyondLastColumn": 4,
	// Contrôle si l’éditeur défile au-delà de la dernière ligne.
	"editor.scrollBeyondLastLine": true,
	// Faites défiler uniquement le long de l'axe prédominant quand le défilement est à la fois vertical et horizontal. Empêche la dérive horizontale en cas de défilement vertical sur un pavé tactile.
	"editor.scrollPredominantAxis": true,
	// Contrôle si l'éditeur doit mettre en surbrillance les correspondances similaires à la sélection.
	"editor.selectionHighlight": true,
	// Contrôle si semanticHighlighting est affiché pour les langages qui le prennent en charge.
	//  - true: Coloration sémantique activée pour tous les thèmes de couleur.
	//  - false: Coloration sémantique désactivée pour tous les thèmes de couleur.
	//  - configuredByTheme: La coloration sémantique est configurée par le paramètre 'semanticHighlighting' du thème de couleur actuel.
	"editor.semanticHighlighting.enabled": "configuredByTheme",
	// Substitue la couleur et les styles des jetons sémantiques de l'éditeur à partir du thème de couleur sélectionné.
	"editor.semanticTokenColorCustomizations": {},
	// Contrôle les variables dépréciées barrées.
	"editor.showDeprecated": true,
	// Contrôle quand afficher les contrôles de pliage sur la reliure.
	//  - always: Affichez toujours les contrôles de pliage.
	//  - never: N’affichez jamais les contrôles de pliage et réduisez la taille de la marge.
	//  - mouseover: Affichez uniquement les contrôles de pliage quand la souris est au-dessus de la reliure.
	"editor.showFoldingControls": "mouseover",
	// Contrôle la disparition du code inutile.
	"editor.showUnused": true,
	// Indique si les espaces blancs de début et de fin doivent toujours être sélectionnés.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,
	// Contrôle si l'éditeur défile en utilisant une animation.
	"editor.smoothScrolling": false,
	// Contrôle si les extraits de code surround with-snippets ou de modèle de fichier s’affichent sous forme d’actions de code.
	"editor.snippets.codeActions.enabled": true,
	// Contrôle si les extraits de code s'affichent en même temps que d'autres suggestions, ainsi que leur mode de tri.
	//  - top: Afficher des suggestions d’extraits au-dessus d’autres suggestions.
	//  - bottom: Afficher des suggestions d’extraits en-dessous d’autres suggestions.
	//  - inline: Afficher des suggestions d’extraits avec d’autres suggestions.
	//  - none: Ne pas afficher de suggestions d’extrait de code.
	"editor.snippetSuggestions": "inline",
	// Garder les éditeurs d'aperçu ouverts même si l'utilisateur double-clique sur son contenu ou appuie sur la touche Échap. 
	"editor.stablePeek": false,
	// Affiche les étendues actives imbriqués pendant le défilement en haut de l’éditeur.
	"editor.stickyScroll.enabled": false,
	// Définit le nombre maximal de lignes rémanentes à afficher.
	"editor.stickyScroll.maxLineCount": 5,
	// Émule le comportement des tabulations pour la sélection quand des espaces sont utilisés à des fins de mise en retrait. La sélection respecte les taquets de tabulation.
	"editor.stickyTabStops": false,
	// Ce paramètre est déprécié, veuillez utiliser des paramètres distincts comme 'editor.suggest.showKeywords' ou 'editor.suggest.showSnippets' à la place.
	// 
	"editor.suggest.filteredTypes": {},
	// Détermine si le filtre et le tri des suggestions doivent prendre en compte les fautes de frappes mineures.
	"editor.suggest.filterGraceful": true,
	// Contrôle si les mots sont remplacés en cas d'acceptation de la saisie semi-automatique. Notez que cela dépend des extensions adhérant à cette fonctionnalité.
	//  - insert: Insérez une suggestion sans remplacer le texte à droite du curseur.
	//  - replace: Insérez une suggestion et remplacez le texte à droite du curseur.
	"editor.suggest.insertMode": "insert",
	// Contrôle si le tri favorise les mots qui apparaissent à proximité du curseur.
	"editor.suggest.localityBonus": false,
	// Quand le filtrage IntelliSense est activé, le premier caractère correspond à un début de mot, par exemple 'c' sur 'Console' ou 'WebContext' mais _not_ sur 'description'. Si désactivé, IntelliSense affiche plus de résultats, mais les trie toujours par qualité de correspondance.
	"editor.suggest.matchOnWordStartOnly": true,
	// Ce paramètre est déprécié. Le widget de suggestion peut désormais être redimensionné.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,
	// Contrôle si la sortie de la suggestion doit être affichée en aperçu dans l’éditeur.
	"editor.suggest.preview": false,
	// Contrôle si les sélections de suggestion mémorisées sont partagées entre plusieurs espaces de travail et fenêtres (nécessite '#editor.suggestSelection#').
	"editor.suggest.shareSuggestSelections": false,
	// Si activé, IntelliSense montre des suggestions de type 'class'.
	"editor.suggest.showClasses": true,
	// Si activé, IntelliSense montre des suggestions de type 'color'.
	"editor.suggest.showColors": true,
	// Si activé, IntelliSense montre des suggestions de type 'constant'.
	"editor.suggest.showConstants": true,
	// Si activé, IntelliSense montre des suggestions de type 'constructor'.
	"editor.suggest.showConstructors": true,
	// Si activé, IntelliSense montre des suggestions de type 'customcolor'.
	"editor.suggest.showCustomcolors": true,
	// Si cette option est activée, IntelliSense montre des suggestions `dépréciées`.
	"editor.suggest.showDeprecated": true,
	// Si activé, IntelliSense montre des suggestions de type 'enumMember'.
	"editor.suggest.showEnumMembers": true,
	// Si activé, IntelliSense montre des suggestions de type 'enum'.
	"editor.suggest.showEnums": true,
	// Si activé, IntelliSense montre des suggestions de type 'event'.
	"editor.suggest.showEvents": true,
	// Si activé, IntelliSense montre des suggestions de type 'field'.
	"editor.suggest.showFields": true,
	// Si activé, IntelliSense montre des suggestions de type 'file'.
	"editor.suggest.showFiles": true,
	// Si activé, IntelliSense montre des suggestions de type 'folder'.
	"editor.suggest.showFolders": true,
	// Si activé, IntelliSense montre des suggestions de type 'function'.
	"editor.suggest.showFunctions": true,
	// Contrôle s'il faut montrer ou masquer les icônes dans les suggestions.
	"editor.suggest.showIcons": true,
	// Détermine si les détails du widget de suggestion sont inclus dans l'étiquette ou uniquement dans le widget de détails
	"editor.suggest.showInlineDetails": true,
	// Si activé, IntelliSense montre des suggestions de type 'interface'.
	"editor.suggest.showInterfaces": true,
	// Si activé, IntelliSense montre des suggestions de type 'problèmes'.
	"editor.suggest.showIssues": true,
	// Si activé, IntelliSense montre des suggestions de type 'keyword'.
	"editor.suggest.showKeywords": true,
	// Si activé, IntelliSense montre des suggestions de type 'method'.
	"editor.suggest.showMethods": true,
	// Si activé, IntelliSense montre des suggestions de type 'module'.
	"editor.suggest.showModules": true,
	// Si activé, IntelliSense montre des suggestions de type 'operator'.
	"editor.suggest.showOperators": true,
	// Si activé, IntelliSense montre des suggestions de type 'property'.
	"editor.suggest.showProperties": true,
	// Si activé, IntelliSense montre des suggestions de type 'reference'.
	"editor.suggest.showReferences": true,
	// Si activé, IntelliSense montre des suggestions de type 'snippet'.
	"editor.suggest.showSnippets": true,
	// Contrôle la visibilité de la barre d'état en bas du widget de suggestion.
	"editor.suggest.showStatusBar": false,
	// Si activé, IntelliSense montre des suggestions de type 'struct'.
	"editor.suggest.showStructs": true,
	// Si activé, IntelliSense montre des suggestions de type 'typeParameter'.
	"editor.suggest.showTypeParameters": true,
	// Si activé, IntelliSense montre des suggestions de type 'unit'.
	"editor.suggest.showUnits": true,
	// Si activé, IntelliSense montre des suggestions de type 'utilisateur'.
	"editor.suggest.showUsers": true,
	// Si activé, IntelliSense montre des suggestions de type 'value'.
	"editor.suggest.showValues": true,
	// Si activé, IntelliSense montre des suggestions de type 'variable'.
	"editor.suggest.showVariables": true,
	// Si activé, IntelliSense montre des suggestions de type 'text'.
	"editor.suggest.showWords": true,
	// Contrôle si un extrait de code actif empêche les suggestions rapides.
	"editor.suggest.snippetsPreventQuickSuggestions": true,
	// Taille de police pour le widget suggest. Lorsqu’elle est définie sur `0`, la valeur de `editor.fontSize` est utilisée.
	"editor.suggestFontSize": 0,
	// Hauteur de ligne pour le widget suggest. Lorsqu’elle est définie sur `0`, la valeur de `editor.lineHeight` est utilisée. La valeur minimale est 8.
	"editor.suggestLineHeight": 0,
	// Contrôle si les suggestions devraient automatiquement s’afficher lorsque vous tapez les caractères de déclencheur.
	"editor.suggestOnTriggerCharacters": true,
	// Contrôle comment les suggestions sont pré-sélectionnés lors de l’affichage de la liste de suggestion.
	//  - first: Sélectionnez toujours la première suggestion.
	//  - recentlyUsed: Sélectionnez les suggestions récentes sauf si une entrée ultérieure en a sélectionné une, par ex., 'console.| -> console.log', car 'log' a été effectué récemment.
	//  - recentlyUsedByPrefix: Sélectionnez des suggestions en fonction des préfixes précédents qui ont complété ces suggestions, par ex., 'co -> console' et 'con -> const'.
	"editor.suggestSelection": "first",
	// Active les complétions par tabulation
	//  - on: La complétion par tabulation insérera la meilleure suggestion lorsque vous appuyez sur tab.
	//  - off: Désactiver les complétions par tabulation.
	//  - onlySnippets: Compléter les extraits de code par tabulation lorsque leur préfixe correspond. Fonctionne mieux quand les 'quickSuggestions' ne sont pas activées.
	"editor.tabCompletion": "off",
	// Le nombre d’espaces auxquels une tabulation est égale. Ce paramètre est substitué basé sur le contenu du fichier lorsque `editor.detectIndentation` est activé.
	"editor.tabSize": 4,
	// Substitue les couleurs de syntaxe et le style de police de l'éditeur à partir du thème de couleur sélectionné.
	"editor.tokenColorCustomizations": {},
	// Supprimer l'espace blanc de fin inséré automatiquement.
	"editor.trimAutoWhitespace": true,
	// Contrôle si le fait de cliquer sur le contenu vide après une ligne pliée déplie la ligne.
	"editor.unfoldOnClickAfterEndOfLine": false,
	// Définit les caractères autorisés qui ne sont pas mis en surbrillance.
	"editor.unicodeHighlight.allowedCharacters": {},
	// Les caractères Unicode communs aux paramètres régionaux autorisés ne sont pas mis en surbrillance.
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},
	// Contrôle si les caractères mis en surbrillance peuvent être déconcertés avec des caractères ASCII de base, à l’exception de ceux qui sont courants dans les paramètres régionaux utilisateur actuels.
	"editor.unicodeHighlight.ambiguousCharacters": true,
	// Contrôle si les caractères des commentaires doivent également faire l’objet d’une mise en surbrillance Unicode.
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",
	// Contrôle si les caractères des chaînes de texte doivent également faire l’objet d’une mise en surbrillance Unicode.
	"editor.unicodeHighlight.includeStrings": true,
	// Contrôle si les caractères qui réservent de l’espace ou qui n’ont pas de largeur sont mis en surbrillance.
	"editor.unicodeHighlight.invisibleCharacters": true,
	// Contrôle si tous les caractères ASCII non basiques sont mis en surbrillance. Seuls les caractères compris entre U+0020 et U+007E, tabulation, saut de ligne et retour chariot sont considérés comme des ASCII de base.
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",
	// Supprimez les marques de fin de ligne inhabituelles susceptibles de causer des problèmes.
	//  - auto: Les marques de fin de ligne inhabituelles sont automatiquement supprimées.
	//  - off: Les marques de fin de ligne inhabituelles sont ignorées.
	//  - prompt: Les marques de fin de ligne inhabituelles demandent à être supprimées.
	"editor.unusualLineTerminators": "prompt",
	// L'insertion et la suppression des espaces blancs suit les taquets de tabulation.
	"editor.useTabStops": true,
	// Contrôle si la saisie semi-automatique doit être calculée en fonction des mots présents dans le document.
	"editor.wordBasedSuggestions": true,
	// Contrôle la façon dont sont calculées les complétions basées sur des mots dans les documents.
	//  - currentDocument: Suggère uniquement des mots dans le document actif.
	//  - matchingDocuments: Suggère des mots dans tous les documents ouverts du même langage.
	//  - allDocuments: Suggère des mots dans tous les documents ouverts.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",
	// Caractères utilisés comme séparateurs de mots durant la navigation ou les opérations basées sur les mots
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
	// Contrôle comment les lignes doivent être limitées.
	//  - off: Le retour automatique à la ligne n'est jamais effectué.
	//  - on: Le retour automatique à la ligne s'effectue en fonction de la largeur de la fenêtre d'affichage.
	//  - wordWrapColumn: Les lignes seront terminées à `editor.wordWrapColumn`.
	//  - bounded: Les lignes seront terminées au minimum du viewport et `editor.wordWrapColumn`.
	"editor.wordWrap": "off",
	// Contrôle la colonne de terminaison de l’éditeur lorsque `editor.wordWrap` est à `wordWrapColumn` ou `bounded`.
	"editor.wordWrapColumn": 80,
	// Contrôle la mise en retrait des lignes justifiées.
	//  - none: Aucune mise en retrait. Les lignes enveloppées commencent à la colonne 1.
	//  - same: Les lignes enveloppées obtiennent la même mise en retrait que le parent.
	//  - indent: Les lignes justifiées obtiennent une mise en retrait +1 vers le parent.
	//  - deepIndent: Les lignes justifiées obtiennent une mise en retrait +2 vers le parent. 
	"editor.wrappingIndent": "same",
	// Contrôle l’algorithme qui calcule les points d’habillage. Notez qu’en mode d’accessibilité, les options avancées sont utilisées pour une expérience optimale.
	//  - simple: Suppose que tous les caractères ont la même largeur. Il s'agit d'un algorithme rapide qui fonctionne correctement pour les polices à espacement fixe et certains scripts (comme les caractères latins) où les glyphes ont la même largeur.
	//  - advanced: Délègue le calcul des points de wrapping au navigateur. Il s'agit d'un algorithme lent qui peut provoquer le gel des grands fichiers, mais qui fonctionne correctement dans tous les cas.
	"editor.wrappingStrategy": "simple",
	// Contrôle le comportement d'un clic sur une icône de la barre d'activités dans le workbench.
	//  - toggle: Masquer la barre latérale si l'élément sur lequel l'utilisateur a cliqué est déjà visible.
	//  - focus: Mettre le focus sur la barre latérale si l'élément sur lequel l'utilisateur a cliqué est déjà visible.
	"workbench.activityBar.iconClickBehavior": "toggle",
	// Contrôle la visibilité de la barre d'activités dans le banc d'essai.
	"workbench.activityBar.visible": true,
	// Remplace les couleurs du thème de couleur sélectionné.
	"workbench.colorCustomizations": {},
	// Spécifie le thème de couleur utilisé dans le banc d'essai.
	"workbench.colorTheme": "Default Dark+",
	// Contrôle le nombre de commandes récemment utilisées à retenir dans l’historique de la palette de commande. Spécifier la valeur 0 pour désactiver l’historique des commandes.
	"workbench.commandPalette.history": 50,
	// Contrôle si la dernière saisie tapée dans la palette de commande devrait être restaurée lors de l’ouverture la prochaine fois.
	"workbench.commandPalette.preserveInput": false,
	// Si un éditeur correspondant à l’un des types répertoriés est ouvert en tant que premier dans un groupe d’éditeurs et que plusieurs groupes sont ouverts, le groupe est automatiquement verrouillé. Les groupes verrouillés sont utilisés uniquement pour ouvrir les éditeurs lorsqu’ils sont explicitement choisis par le mouvement de l’utilisateur (par exemple, glisser-déplacer), mais pas par défaut. Par conséquent, l’éditeur actif dans un groupe verrouillé est moins susceptible d’être remplacé accidentellement par un autre éditeur.
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.editorinputs.searchEditorInput": false,
		"vscode-interactive-input": false,
		"interactive": false,
		"terminalEditor": true,
		"vscode.markdown.preview.editor": false,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"gitlens.rebase": false,
		"java.formatterSettingsEditor": false,
		"jupyter-notebook": false,
		"mainThreadWebview-markdown.preview": false
	},
	// Détermine si la disposition centrée doit être redimensionnée automatiquement sur la largeur maximale quand plusieurs groupes sont ouverts. Quand il ne reste plus qu'un groupe ouvert, il est redimensionné sur la largeur centrée d'origine.
	"workbench.editor.centeredLayoutAutoResize": true,
	// Contrôle le comportement des groupes d'éditeurs vides quand le dernier onglet du groupe est fermé. Quand ce paramètre est activé, les groupes vides se ferment automatiquement. Quand le paramètre est désactivé, les groupes vides restent dans la grille.
	"workbench.editor.closeEmptyGroups": true,
	// Contrôle si les éditeurs montrant un fichier qui a été ouvert pendant la session doivent se fermer automatiquement lorsqu'ils sont supprimés ou renommés par un autre processus. Si vous désactivez cette option, l'éditeur restera ouvert lors d'un tel événement. Notez que la suppression à partir de l'application fermera toujours l'éditeur et que les éditeurs avec des changements non sauvegardés ne seront jamais fermés pour préserver vos données.
	"workbench.editor.closeOnFileDelete": false,
	// Détermine si les éléments décoratifs de fichiers de l'éditeur doivent utiliser des badges.
	"workbench.editor.decorations.badges": true,
	// Détermine si les éléments décoratifs de fichiers de l'éditeur doivent utiliser des couleurs.
	"workbench.editor.decorations.colors": true,
	// L'éditeur par défaut pour les fichiers détectés comme binaires. Si non défini, l'utilisateur sera présenté avec un sélecteur.
	"workbench.editor.defaultBinaryEditor": "",
	// Détermine si les éditeurs ouverts s’affichent en tant qu’éditeurs d’aperçu. Les éditeurs d’aperçu ne restent pas ouverts, sont réutilisés jusqu’à ce qu’ils soient explicitement définis pour être conservés ouverts (par exemple, via un double clic ou une modification) et affichent les noms de fichiers en italique.
	"workbench.editor.enablePreview": true,
	// Détermine si les éditeurs restent en mode aperçu quand l'utilisateur démarre une navigation dans du code à partir de ces derniers. Les éditeurs en mode aperçu ne restent pas ouverts. Ils sont réutilisés jusqu'à ce qu'ils soient explicitement configurés pour rester ouverts (par exemple via un double clic ou une modification). Cette valeur est ignorée quand '#workbench.editor.enablePreview#' est désactivé.
	"workbench.editor.enablePreviewFromCodeNavigation": false,
	// Détermine si les éditeurs ouverts à partir de Quick Open s’affichent en tant qu’éditeurs d’aperçu. Les éditeurs d’aperçu ne restent pas ouverts et sont réutilisés jusqu’à ce qu’ils soient explicitement définis pour rester ouverts (par exemple, par double clic ou modification). Cette valeur est ignorée lorsque '#workbench.editor.enablePreview#' est désactivé.
	"workbench.editor.enablePreviewFromQuickOpen": false,
	// Contrôle si les onglets sont fermés dans l'ordre du dernier utilisé ou de gauche à droite.
	"workbench.editor.focusRecentEditorAfterClose": true,
	// Contrôle si une bordure supérieure est dessinée sur les onglets pour les éditeurs qui ont des modifications non sauvegardées. Cette valeur est ignorée lorsque `workbench.editor.showTabs` est désactivé.
	"workbench.editor.highlightModifiedTabs": false,
	// Active l’utilisation de l’historique de l’éditeur dans la détection de langue. Ainsi, la détection automatique de la langue favorise les langues qui ont été récemment ouvertes et permet à la détection automatique de la langue de fonctionner avec des entrées plus petites.
	"workbench.editor.historyBasedLanguageDetection": true,
	// Contrôle le format de l’étiquette pour un éditeur.
	//  - default: Afficher le nom du fichier. Lorsque les onglets sont activés et que deux fichiers portent le même nom dans un groupe, les sections distinctes du chemin de chaque fichier sont ajoutées. Lorsque les onglets sont désactivés, le chemin d’accès relatif au dossier de l'espace de travail est affiché si l’éditeur est actif.
	//  - short: Afficher le nom du fichier suivi du nom de dossier.
	//  - medium: Afficher le nom du fichier suivi de son chemin d’accès relatif au dossier de l'espace de travail.
	//  - long: Afficher le nom du fichier suivi de son chemin d’accès absolu.
	"workbench.editor.labelFormat": "default",
	// Contrôle si la langue dans un éditeur de texte est détectée automatiquement, sauf si le langage a été explicitement défini par le sélecteur de langue. Elle peut également être définie en fonction de la langue pour que vous puissiez spécifier les langues dont vous ne souhaitez pas désactiver la désactivation. Cela est utile pour les langues comme la démarque qui contiennent souvent d’autres langues susceptibles d’inciter la détection de langage à penser qu’il s’agit de la langue incorporée et non de la démarque.
	"workbench.editor.languageDetection": true,
	// Lorsque cette option est activée, affiche un correctif rapide de la barre d’état lorsque la langue de l’éditeur ne correspond pas à la langue de contenu détectée.
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},
	// Contrôle si le nombre d'éditeurs ouverts doit être limité ou non. Lorsque cette option est activée, les éditeurs les moins récemment utilisés seront fermés pour faire de la place aux éditeurs nouvellement ouverts.
	"workbench.editor.limit.enabled": false,
	// Contrôle si le nombre maximal d’éditeurs ouverts doit exclure les éditeurs modifiés pour compter dans la limite configurée.
	"workbench.editor.limit.excludeDirty": false,
	// Contrôle si le nombre maximal d'éditeurs ouverts s'applique par groupe d'éditeurs ou pour tous les groupes d'éditeurs.
	"workbench.editor.limit.perEditorGroup": false,
	// Contrôle le nombre maximal d’éditeurs ouverts. Utilisez le paramètre `workbench.editor.limit.perEditorGroup` pour contrôler cette limite par groupe d’éditeurs ou dans tous les groupes.
	"workbench.editor.limit.value": 10,
	// Active l’utilisation des boutons de souris quatre et cinq pour les commandes « Retour » et « Avancer ».
	"workbench.editor.mouseBackForwardToNavigate": true,
	// Contrôle l’étendue de la navigation dans l’historique dans les éditeurs pour les commandes telles que « Revenir en arrière » et « Aller de l’avant ».
	//  - default: Parcourez tous les éditeurs et groupes d’éditeurs ouverts.
	//  - editorGroup: Naviguez uniquement dans les éditeurs du groupe d’éditeurs actif.
	//  - editor: Naviguez uniquement dans l’éditeur actif.
	"workbench.editor.navigationScope": "default",
	// Permet de définir où s'ouvrent les éditeurs. Sélectionnez `left` ou `right` pour ouvrir les éditeurs à gauche ou à droite de celui actuellement actif. Sélectionnez `first` ou `last` pour ouvrir les éditeurs indépendamment de celui actuellement actif.
	"workbench.editor.openPositioning": "right",
	// Contrôle la direction par défaut des éditeurs ouverts côte à côte (par exemple, à partir de l'Explorateur). Par défaut, les éditeurs s'ouvrent sur le côté droit de celui qui est actif. Si la valeur est 'down', les éditeurs s'ouvrent sous celui qui est actif.
	"workbench.editor.openSideBySideDirection": "right",
	// Contrôle le dimensionnement des onglets d'éditeur épinglés. Les onglets épinglés sont triés et placés au début de tous les onglets ouverts. En règle générale, ils ne se ferment pas tant qu'ils ne sont pas détachés. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	//  - normal: Un onglet épinglé hérite de l'apparence des onglets non épinglés.
	//  - compact: Un onglet épinglé s'affiche de manière compacte avec uniquement une icône ou la première lettre du nom de l'éditeur.
	//  - shrink: Un onglet épinglé se réduit à une taille fixe compacte affichant des parties du nom de l'éditeur.
	"workbench.editor.pinnedTabSizing": "normal",
	// Quand cette option est activée, un modèle de détection de langage qui prend en compte l’historique de l’éditeur est prioritaire.
	"workbench.editor.preferHistoryBasedLanguageDetection": false,
	// Restaure le dernier état d’affichage de l’éditeur (par exemple, la position de défilement) lors de la réouverture des éditeurs après leur fermeture. L’état d’affichage de l’éditeur est stocké par groupe d’éditeurs et ignoré lorsqu’un groupe se ferme. Utilisez le paramètre `workbench.editor.sharedViewState` pour utiliser le dernier état d’affichage connu dans tous les groupes d’éditeurs si aucun état d’affichage précédent n’a été trouvé pour un groupe d’éditeurs.
	"workbench.editor.restoreViewState": true,
	// Contrôle si un éditeur est affiché dans un des groupes visibles si ouvert. Si désactivé, un éditeur préférera s'ouvrir dans le groupe éditeur actuellement actif. Si activé, un éditeur déjà ouvert s’affichera au lieu de s’ouvrir à nouveau dans le groupe éditeur actuellement actif. Notez qu’il y a des cas où ce paramètre est ignoré, par exemple lorsque vous forcez un éditeur à s'ouvrir dans un groupe spécifique ou sur le côté du groupe actuellement actif.
	"workbench.editor.revealIfOpen": false,
	// Contrôle si le défilement des onglets permet de les ouvrir ou non. Par défaut, les onglets s'affichent uniquement si vous les faites défiler, mais ils ne s'ouvrent pas. Vous pouvez appuyer de façon prolongée sur la touche Maj pendant le défilement afin de changer le comportement pour cette durée. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.scrollToSwitchTabs": false,
	// Conserve l’état d’affichage de l’éditeur le plus récent (par exemple, la position de défilement) dans tous les groupes d’éditeurs et le restaure si aucun état d’affichage d’éditeur spécifique n’est trouvé pour le groupe d’éditeurs.
	"workbench.editor.sharedViewState": false,
	// Détermine si les éditeurs ouverts doivent s'afficher ou non avec une icône. Cela nécessite notamment l'activation d'un thème d'icône de fichier.
	"workbench.editor.showIcons": true,
	// Contrôle si les éditeurs ouverts devraient être affichés dans des onglets ou non.
	"workbench.editor.showTabs": true,
	// Contrôle la disposition du moment où un éditeur est fractionné dans un groupe d’éditeurs pour qu’il soit vertical ou horizontal.
	//  - vertical: Les éditeurs sont positionnés de haut en bas.
	//  - horizontal: Les éditeurs sont positionnés de gauche à droite.
	"workbench.editor.splitInGroupLayout": "horizontal",
	// Détermine si vous pouvez séparer les groupes d'éditeurs à partir d'opérations de glisser-déposer, notamment en déposant un éditeur ou un fichier sur les bords de la zone d'éditeur.
	"workbench.editor.splitOnDragAndDrop": true,
	// Contrôle la taille des groupes d'éditeurs pendant leur fractionnement.
	//  - distribute: Divise tous les groupes d'éditeurs à parts égales.
	//  - split: Divise le groupe d'éditeurs actif en parts égales.
	"workbench.editor.splitSizing": "distribute",
	// Contrôle la position des boutons de fermeture des onglets de l'éditeur, ou les désactive quand le paramètre a la valeur 'off'. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.tabCloseButton": "right",
	// Contrôle le dimensionnement des onglets d'éditeur. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	//  - fit: Toujours garder les onglets assez grands pour afficher l’étiquette de l’éditeur complet.
	//  - shrink: Permettre aux onglets d'être plus petits lorsque l’espace disponible n’est pas suffisant pour afficher tous les onglets à la fois.
	"workbench.editor.tabSizing": "fit",
	// Contrôle la hauteur des barres de défilement utilisées pour les onglets et des barres de navigation dans la zone de titre de l'éditeur.
	//  - default: Taille par défaut.
	//  - large: Augmente la taille pour faciliter sa saisie avec la souris.
	"workbench.editor.titleScrollbarSizing": "default",
	// Contrôle si l’indicateur de texte sans titre doit être visible dans l’éditeur.
	"workbench.editor.untitled.hint": "text",
	// Contrôle le format de l'étiquette pour un éditeur sans titre.
	//  - content: Le nom du fichier sans titre est dérivé du contenu de sa première ligne, sauf si le fichier est associé à un chemin. Le nom est rétabli si la ligne est vide ou si elle ne contient aucun caractère.
	//  - name: Le nom du fichier sans titre n'est pas dérivé du contenu du fichier.
	"workbench.editor.untitled.labelFormat": "content",
	// Détermine si les onglets doivent être placés sur plusieurs lignes quand ils dépassent l'espace disponible, ou si une barre de défilement doit s'afficher à la place. Cette valeur est ignorée quand '#workbench.editor.showTabs#' est désactivé.
	"workbench.editor.wrapTabs": false,
	// Configurez des modèles glob pour les éditeurs (par exemple, `"*.hex": "hexEditor.hexEdit"`). Ces modèles ont priorité sur le comportement par défaut.
	"workbench.editorAssociations": {},
	// Contrôle s’il faut reprendre automatiquement une session de modification disponible pour l’espace de travail actuel.
	//  - onReload: Reprendre automatiquement la session de modification disponible lors du rechargement de la fenêtre.
	//  - off: Ne tentez jamais de reprendre une session de modification.
	"workbench.editSessions.autoResume": "onReload",
	// Contrôle s’il faut inviter l’utilisateur à stocker les sessions de modification lors de l’utilisation de Continuer à travailler sur.
	//  - prompt: Invitez l’utilisateur à se connecter pour stocker les sessions de modification avec Continuer à travailler.
	//  - off: N’utilisez pas de sessions de modification avec Continuer à travailler, sauf si l’utilisateur a déjà activé les sessions de modification.
	"workbench.editSessions.continueOn": "prompt",
	// Récupère les fonctionnalités expérimentales pour exécuter à partir d’un service en ligne de Microsoft.
	"workbench.enableExperiments": true,
	// Ce paramètre a été déconseillé en faveur de `workbench.editSessions.autoResume`.
	// 
	//  - onReload: Reprendre automatiquement la session de modification disponible lors du rechargement de la fenêtre.
	//  - off: Ne tentez jamais de reprendre une session de modification.
	"workbench.experimental.editSessions.autoResume": "onReload",
	// Contrôle s’il faut stocker automatiquement une session de modification disponible pour l’espace de travail actuel.
	//  - onShutdown: Stocker automatiquement la session de modification actuelle à la fermeture de la fenêtre.
	//  - off: Ne jamais tenter de stocker automatiquement une session de modification.
	"workbench.experimental.editSessions.autoStore": "off",
	// Ce paramètre a été déconseillé en faveur de `workbench.experimental.continueOn`.
	// Contrôle s’il faut inviter l’utilisateur à stocker les sessions de modification lors de l’utilisation de Continuer à travailler sur.
	//  - prompt: Invitez l’utilisateur à se connecter pour stocker les sessions de modification avec Continuer à travailler.
	//  - off: N’utilisez pas de sessions de modification avec Continuer à travailler, sauf si l’utilisateur a déjà activé les sessions de modification.
	"workbench.experimental.editSessions.continueOn": "prompt",
	// Ce paramètre est déconseillé, car les sessions d’édition ne sont plus expérimentales. Consultez `workbench.editSessions.autoResume#` et `#workbench.editSessions.continueOn` pour configurer le comportement lié à Modifier les sessions.
	// 
	"workbench.experimental.editSessions.enabled": true,
	// Contrôle s’il faut afficher les sessions de modification qui correspondent partiellement à la session active.
	"workbench.experimental.editSessions.partialMatches.enabled": false,
	// Ce paramètre a été déprécié en faveur de `workbench.layoutControl.enabled`
	// Contrôle si les contrôles de disposition dans la barre de titre personnalisée sont activés via `window.titleBarStyle`.
	"workbench.experimental.layoutControl.enabled": false,
	// Ce paramètre a été déprécié en faveur de `workbench.layoutControl.type`
	// Contrôle si le contrôle de disposition dans la barre de titre personnalisée s’affiche en tant que bouton de menu unique ou avec plusieurs boutons bascules d’interface utilisateur.
	//  - menu: Affiche un bouton unique avec une liste déroulante des options de disposition.
	//  - toggles: Affiche plusieurs boutons permettant de basculer la visibilité des panneaux et de la barre latérale.
	//  - both: Affiche les boutons déroulants et bascules.
	"workbench.experimental.layoutControl.type": "both",
	// Contrôle si la fonctionnalité d’évaluation de l’aperçu des profils Paramètres doit être activée.
	"workbench.experimental.settingsProfiles.enabled": false,
	// Configurez le mode d'ouverture à utiliser pour les URI externes (HTTP, HTTPS).
	"workbench.externalUriOpeners": {},
	// Contrôle la méthode d'aliasing de polices dans le banc d'essai.
	//  - default: Lissage de sous-pixel des polices. Sur la plupart des affichages non-retina, cela vous donnera le texte le plus vif.
	//  - antialiased: Lisser les polices au niveau du pixel, plutôt que les sous-pixels. Peut faire en sorte que la police apparaisse plus légère dans l’ensemble.
	//  - none: Désactive le lissage des polices. Le texte s'affichera avec des bordures dentelées.
	//  - auto: Applique `default` ou `antialiased`automatiquement en se basant sur la résolution de l'affichage.
	"workbench.fontAliasing": "default",
	// Contrôle le délai en millisecondes au-delà duquel le pointage est affiché pour les éléments du banc d'essai (par exemple, certains éléments d'arborescence fournis par l'extension). L'actualisation des éléments déjà visibles peut s'avérer nécessaire pour que le changement apporté au paramètre prenne effet.
	"workbench.hover.delay": 1500,
	// Spécifie le thème d'icône de fichier utilisé dans le banc d'essai ou 'null' pour ne pas afficher les icônes de fichier.
	//  - null: Aucune icône de fichier
	//  - vs-minimal
	//  - vs-seti
	//  - chalice-icon-theme
	//  - eq-material-theme-icons
	//  - eq-material-theme-icons-darker
	//  - eq-material-theme-icons-palenight
	//  - eq-material-theme-icons-ocean
	//  - eq-material-theme-icons-light
	//  - material-icon-theme
	//  - seti
	"workbench.iconTheme": "vs-seti",
	// Contrôle si les contrôles de disposition dans la barre de titre personnalisée sont activés via `window.titleBarStyle`.
	"workbench.layoutControl.enabled": true,
	// Contrôle si le contrôle de disposition dans la barre de titre personnalisée s’affiche en tant que bouton de menu unique ou avec plusieurs boutons bascules d’interface utilisateur.
	//  - menu: Affiche un bouton unique avec une liste déroulante des options de disposition.
	//  - toggles: Affiche plusieurs boutons permettant de basculer la visibilité des panneaux et de la barre latérale.
	//  - both: Affiche les boutons déroulants et bascules.
	"workbench.layoutControl.type": "both",
	// Contrôle le mode de recherche par défaut pour les listes et les arborescences dans Workbench.
	//  - highlight: Mettez en surbrillance les éléments lors de la recherche. La navigation vers le haut et le bas traverse uniquement les éléments en surbrillance.
	//  - filter: Filtrez des éléments lors de la recherche.
	"workbench.list.defaultFindMode": "highlight",
	// Multiplicateur de vitesse de défilement quand vous appuyez sur 'Alt'.
	"workbench.list.fastScrollSensitivity": 5,
	// Contrôle si les listes et les arborescences prennent en charge le défilement horizontal dans le banc d'essai. Avertissement : L'activation de ce paramètre a un impact sur les performances.
	"workbench.list.horizontalScrolling": false,
	// Utilisez plutôt 'workbench.list.defaultFindMode'.
	// Contrôle le style de navigation au clavier pour les listes et les arborescences dans le banc d'essai. Les options sont Simple, Mise en surbrillance et Filtrer.
	//  - simple: La navigation au clavier Simple place le focus sur les éléments qui correspondent à l'entrée de clavier. La mise en correspondance est effectuée sur les préfixes uniquement.
	//  - highlight: La navigation de mise en surbrillance au clavier met en surbrillance les éléments qui correspondent à l'entrée de clavier. La navigation ultérieure vers le haut ou vers le bas parcourt uniquement les éléments mis en surbrillance.
	//  - filter: La navigation au clavier Filtrer filtre et masque tous les éléments qui ne correspondent pas à l'entrée de clavier.
	"workbench.list.keyboardNavigation": "highlight",
	// Un multiplicateur à utiliser sur les `deltaX` et `deltaY` des événements de défilement de roulette de souris.
	"workbench.list.mouseWheelScrollSensitivity": 1,
	// Le modificateur à utiliser pour ajouter un élément dans les arbres et listes pour une sélection multiple avec la souris (par exemple dans l’Explorateur, les éditeurs ouverts et la vue scm). Les mouvements de la souris 'Ouvrir à côté' (si pris en charge) s'adapteront tels qu’ils n'entrent pas en conflit avec le modificateur multiselect.
	//  - ctrlCmd: Mappe vers 'Contrôle' dans Windows et Linux, et vers 'Commande' dans macOS.
	//  - alt: Mappe vers 'Alt' dans Windows et Linux, et vers 'Option' dans macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",
	// Contrôle l'ouverture des éléments dans les arborescences et les listes à l'aide de la souris (si cela est pris en charge). Notez que certaines arborescences et listes peuvent choisir d'ignorer ce paramètre, s'il est non applicable.
	"workbench.list.openMode": "singleClick",
	// Détermine si les listes et les arborescences ont un défilement fluide.
	"workbench.list.smoothScrolling": false,
	// Contrôle si l'historique local des fichiers est activé. Lorsqu'il est activé, le contenu des fichiers d'un éditeur qui est enregistré sera stocké dans un emplacement de sauvegarde afin de pouvoir restaurer ou revoir le contenu ultérieurement. La modification de ce paramètre n'a aucun effet sur les entrées existantes de l'historique des fichiers locaux.
	"workbench.localHistory.enabled": true,
	// Configurez les [motifs globaux](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) pour exclure les fichiers de l'historique des fichiers locaux. La modification de ce paramètre n'a aucun effet sur les entrées existantes de l'historique des fichiers locaux.
	"workbench.localHistory.exclude": {},
	// Contrôle le nombre maximum d'entrées d'historique de fichier local par fichier. Lorsque le nombre d'entrées de l'historique du fichier local dépasse ce nombre pour un fichier, les entrées les plus anciennes sont supprimées.
	"workbench.localHistory.maxFileEntries": 50,
	// Contrôle la taille maximale d'un fichier (en Ko) à prendre en compte pour l'historique des fichiers locaux. Les fichiers dont la taille est supérieure ne seront pas ajoutés à l'historique des fichiers locaux. La modification de ce paramètre n'a aucun effet sur les entrées existantes de l'historique des fichiers locaux.
	"workbench.localHistory.maxFileSize": 256,
	// Configurez un intervalle en secondes pendant lequel la dernière entrée dans l'historique du fichier local est remplacée par l'entrée en cours d'ajout. Cela permet de réduire le nombre total d'entrées qui sont ajoutées, par exemple lorsque la sauvegarde automatique est activée. Ce paramètre est uniquement appliqué aux entrées qui ont la même source d'origine. La modification de ce paramètre n'a aucun effet sur les entrées existantes de l'historique des fichiers locaux.
	"workbench.localHistory.mergeWindow": 10,
	// Contrôle l’emplacement par défaut du panneau (terminal, console de débogage, sortie, problèmes) dans un nouvel espace de travail. Il peut s’afficher en bas, à droite ou à gauche de la zone de l’éditeur.
	"workbench.panel.defaultLocation": "bottom",
	// Contrôle si le panneau s'ouvre de manière agrandie. Il peut soit toujours s'ouvrir de manière agrandie, soit ne jamais s'ouvrir de manière agrandie, soit s'ouvrir dans le dernier état dans lequel il se trouvait avant sa fermeture.
	//  - always: Toujours ouvrir le panneau de manière agrandie.
	//  - never: Ne jamais ouvrir le panneau de manière agrandie. Le panneau s'ouvre en étant réduit.
	//  - preserve: Ouvrez le panneau dans l'état dans lequel il se trouvait, avant sa fermeture.
	"workbench.panel.opensMaximized": "preserve",
	// Spécifie le thème de couleur par défaut pour l'apparence d'OS sombre quand '#window.autoDetectColorScheme#' est activé.
	"workbench.preferredDarkColorTheme": "Default Dark+",
	// Spécifie le thème de couleur par défaut utilisé en mode sombre de contraste élevé quand '#window.autoDetectHighContrast#' est activé.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",
	// Spécifie le thème de couleur par défaut utilisé en mode clair de contraste élevé quand '#window.autoDetectHighContrast#' est activé.
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",
	// Spécifie le thème de couleur par défaut pour l'apparence d'OS claire quand '#window.autoDetectColorScheme#' est activé.
	"workbench.preferredLightColorTheme": "Default Light+",
	// Spécifie le thème d'icône de produit utilisé.
	//  - Default: Par défaut
	"workbench.productIconTheme": "Default",
	// Contrôles si le menu Quick Open doit se fermer automatiquement dès qu'il perd le focus.
	"workbench.quickOpen.closeOnFocusLost": true,
	// Détermine si la dernière entrée tapée dans Quick Open doit être restaurée à la prochaine ouverture.
	"workbench.quickOpen.preserveInput": false,
	// Contrôle si le banc d’essai doit être affiché avec moins d’animations.
	//  - on: Toujours afficher avec un mouvement réduit
	//  - off: Ne pas afficher avec un mouvement réduit
	//  - auto: Rendu avec mouvement réduit en fonction de la configuration du système d’exploitation
	"workbench.reduceMotion": "auto",
	// Contrôle le délai de rétroaction du pointage (en millisecondes) de la zone de glissement entre les vues/éditeurs.
	"workbench.sash.hoverDelay": 300,
	// Contrôle la taille en pixels de la zone de commentaires de la zone de glissement entre les vues/éditeurs. Affectez-lui une valeur plus élevée si vous pensez qu'il est difficile de redimensionner les vues à l'aide de la souris.
	"workbench.sash.size": 4,
	// Détermine quel éditeur de paramètres utiliser par défaut.
	//  - ui: Utiliser l’éditeur d’interface utilisateur de paramètres.
	//  - json: Utiliser l’éditeur de fichiers JSON.
	"workbench.settings.editor": "ui",
	// Contrôle si vous voulez activer le mode de recherche de langage naturel pour les paramètres de contrôle. La recherche en langage naturel est assurée par un service Microsoft en ligne.
	"workbench.settings.enableNaturalLanguageSearch": true,
	// Contrôle si ouvrir les paramètres de raccourcis clavier ouvre également un éditeur affichant toutes les combinaisons de touches par défaut.
	"workbench.settings.openDefaultKeybindings": false,
	// Contrôle si l'ouverture des paramètres ouvre également un éditeur affichant tous les paramètres par défaut.
	"workbench.settings.openDefaultSettings": false,
	// Contrôle le comportement de la table des matières de l'éditeur de paramètres pendant la recherche.
	//  - hide: Masquer la Table des matières lors de la recherche.
	//  - filter: Filtrer la Table des matières à quelques catégories ayant des paramètres correspondants. Cliquer sur une catégorie filtrera les résultats pour cette catégorie.
	"workbench.settings.settingsSearchTocBehavior": "filter",
	// Contrôle s'il faut utiliser l'éditeur JSON de fractionnement pour modifier les paramètres au format JSON.
	"workbench.settings.useSplitJSON": false,
	// Contrôle l’emplacement de la barre latérale principale et de la barre d’activité. Ils peuvent s’afficher à gauche ou à droite du workbench. La barre latérale secondaire s’affiche sur le côté opposé du workbench.
	"workbench.sideBar.location": "left",
	// Contrôle quel éditeur s’affiche au démarrage, si aucun n'est restauré de la session précédente.
	//  - none: Démarrage sans éditeur.
	//  - welcomePage: Ouvrir la page d’accueil qui propose du contenu pour faciliter la prise en main de VS Code et des extensions.
	//  - readme: Ouvre le fichier README lors de l'ouverture d'un dossier qui en contient un, sinon il revient à 'welcomePage'. Remarque : ceci n'est observé que comme une configuration globale, elle sera ignorée si elle est définie dans une configuration d'espace de travail ou de dossier.
	//  - newUntitledFile: Ouvrez un nouveau fichier sans titre (s'applique uniquement à l'ouverture d'une fenêtre vide).
	//  - welcomePageInEmptyWorkbench: Ouvre la page d'accueil à l'ouverture d'un banc d'essai vide.
	"workbench.startupEditor": "welcomePage",
	// Contrôle la visibilité de la barre d'état au bas du banc d'essai.
	"workbench.statusBar.visible": true,
	// Si cette option est activée, les conseils en filigrane s'affichent quand aucun éditeur n'est ouvert.
	"workbench.tips.enabled": true,
	// Contrôle la façon dont les dossiers de l'arborescence sont développés quand vous cliquez sur les noms de dossiers. Notez que certaines arborescences et listes peuvent choisir d'ignorer ce paramètre, s'il est non applicable.
	"workbench.tree.expandMode": "singleClick",
	// Contrôle la mise en retrait de l'arborescence, en pixels.
	"workbench.tree.indent": 8,
	// Contrôle si l'arborescence doit afficher les repères de mise en retrait.
	"workbench.tree.renderIndentGuides": "onHover",
	// Lorsque cette option est activée, des invites de domaine approuvé s’affichent lors de l’ouverture de liens dans les espaces de travail approuvés.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,
	// Contrôle la visibilité des actions d'en-tête de vue. Les actions d'en-tête de vue peuvent être soit toujours visibles, ou uniquement visibles quand cette vue a le focus ou est survolée.
	"workbench.view.alwaysShowHeaderActions": false,
	// Lorsqu'elle est activée, la page de démarrage contient des liens supplémentaires vers des didacticiels vidéo.
	"workbench.welcomePage.experimental.videoTutorials": "off",
	// Déconseillé, utilisez le 'workbench.reduceMotion' global.
	// Lorsque cette option est activée, réduisez le mouvement dans la page d’accueil.
	"workbench.welcomePage.preferReducedMotion": false,
	// Lorsqu’elle est activée, la procédure pas à pas d’une extension s’ouvre lors de l’installation de l’extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,
	// Contrôle l’affichage de la bannière en mode restreint.
	//  - always: Affichez la bannière chaque fois qu’un espace de travail non approuvé est ouvert.
	//  - untilDismissed: Afficher la bannière lorsqu’un espace de travail non approuvé est ouvert jusqu’à ce qu’il soit ignoré.
	//  - never: N’affichez pas la bannière lorsqu’un espace de travail non approuvé est ouvert.
	"security.workspace.trust.banner": "untilDismissed",
	// Contrôle si la fenêtre vide est approuvée par défaut dans VS Code. Quand cette option est utilisée avec `security.workspace.trust.untrustedFiles`, vous pouvez activer toutes les fonctionnalités de VS Code sans afficher d’invite dans une fenêtre vide.
	"security.workspace.trust.emptyWindow": true,
	// Contrôle si l’approbation d’espace de travail est activée dans VS Code.
	"security.workspace.trust.enabled": true,
	// Contrôle le délai d’affichage de l’invite de démarrage pour l’approbation d’un espace de travail.
	//  - always: Demander l’approbation chaque fois qu’un espace de travail non approuvé est ouvert.
	//  - once: Demander l’approbation la première fois qu’un espace de travail non approuvé est ouvert.
	//  - never: Ne pas demander l’approbation quand un espace de travail non approuvé est ouvert.
	"security.workspace.trust.startupPrompt": "once",
	// Contrôle comment gérer l’ouverture de fichiers non approuvés dans un espace de travail approuvé. Ce paramètre s’applique également à l’ouverture de fichiers dans une fenêtre vide approuvée par le biais de `security.workspace.trust.emptyWindow`.
	//  - prompt: Demander comment gérer les fichiers non approuvés pour chaque espace de travail. Une fois que des fichiers non approuvés ont été introduits dans un espace de travail approuvé, cette demande ne vous sera plus faite.
	//  - open: Toujours autoriser l’introduction de fichiers non approuvés dans un espace de travail approuvé sans invite.
	//  - newWindow: Toujours ouvrir les fichiers non approuvés dans une fenêtre distincte en mode restreint sans invite.
	"security.workspace.trust.untrustedFiles": "prompt",
	// Si cette option est définie, bascule automatiquement vers le thème de couleurs par défaut en fonction du mode de couleurs du système d’exploitation. Si le mode du système d’exploitation est sombre, le thème à utiliser est défini par `workbench.preferredDarkColorTheme#`, ou s’il est clair par `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,
	// Si cette option est activée, le thème à contraste élevé est automatiquement choisi quand le système d’exploitation utilise un thème à contraste élevé. Le thème à contraste élevé à utiliser est défini par `workbench.preferredHighContrastColorTheme#` and `#workbench.preferredHighContrastLightColorTheme`.
	"window.autoDetectHighContrast": true,
	// Si activée, cliquer sur une fenêtre inactive activera la fenêtre et déclenchera l’élément sous la souris, si elle est cliquable. Si désactivé, cliquer n’importe où sur une fenêtre inactive va seulement l'activer et un second clic sur l’élément sera nécessaire.
	"window.clickThroughInactive": true,
	// Contrôle si la fermeture du dernier éditeur doit également fermer la fenêtre. Ce paramètre s’applique uniquement pour les fenêtres qui n'affichent pas de dossiers.
	"window.closeWhenEmpty": false,
	// Afficher le lanceur de commandes avec le titre de la fenêtre. Ce paramètre n’a d’effet que lorsque `window.titleBarStyle` est défini sur `custom`.
	"window.commandCenter": false,
	// Contrôle s’il faut afficher une boîte de dialogue de confirmation avant de fermer la fenêtre ou de quitter l’application.
	//  - always: Toujours demander une confirmation.
	//  - keyboardOnly: Demandez uniquement une confirmation si une combinaison de touches a été utilisée.
	//  - never: Ne demandez jamais explicitement de confirmation.
	"window.confirmBeforeClose": "never",
	// Ajustez l'apparence des fenêtres de dialogue.
	"window.dialogStyle": "native",
	// Si activé, un double clic sur l'icône de l'application dans la barre de titre ferme la fenêtre, laquelle ne peut pas être déplacée par l'icône. Ce paramètre s'applique uniquement quand '#window.titleBarStyle#' est défini sur 'custom'.
	"window.doubleClickIconToClose": false,
	// Expérimental : quand cette option est activée, le mode bac à sable (sandbox) est activé dans la fenêtre via l’API Electron.
	"window.experimental.useSandbox": false,
	// Détermine si le plein écran natif doit être utilisé sur macOS. Désactivez cette option pour empêcher macOS de créer un espace en cas de passage au plein écran.
	"window.nativeFullScreen": true,
	// Active les onglets macOS Sierra. Notez que vous devez redémarrer l'ordinateur pour appliquer les modifications et que les onglets natifs désactivent tout style de barre de titre personnalisé configuré, le cas échéant.
	"window.nativeTabs": false,
	// Contrôle les dimensions d'ouverture d'une nouvelle fenêtre quand au moins une fenêtre est déjà ouverte. Par défaut, une nouvelle fenêtre s'ouvre au centre de l'écran avec des dimensions réduites. Notez que ce paramètre n'a aucun impact sur la première fenêtre ouverte, laquelle est toujours restaurée à la taille et l'emplacement définis au moment de sa fermeture.
	//  - default: Permet d'ouvrir les nouvelles fenêtres au centre de l'écran.
	//  - inherit: Permet d'ouvrir les nouvelles fenêtres avec la même dimension que la dernière fenêtre active.
	//  - offset: Ouvrez les nouvelles fenêtres avec la même dimension que la dernière fenêtre active et une position décalée.
	//  - maximized: Permet d'ouvrir les nouvelles fenêtres de manière agrandie.
	//  - fullscreen: Permet d'ouvrir les nouvelles fenêtres en mode plein écran.
	"window.newWindowDimensions": "default",
	// Contrôle si les fichiers doivent s'ouvrir dans une nouvelle fenêtre lors de l'utilisation d'une ligne de commande ou d'un dialogue de fichier. 
	// Notez qu'il peut toujours y avoir des cas où ce paramètre est ignoré (par exemple, lors de l'utilisation de l'option de ligne de commande `--new-window` ou `--reuse-window`).
	//  - on: Les fichiers seront ouverts dans une nouvelle fenêtre.
	//  - off: Les fichiers seront ouverts dans la fenêtre avec le dossier des fichiers ouverts ou la dernière fenêtre active.
	//  - default: Les fichiers seront ouverts dans la fenêtre avec le dossier des fichiers ouverts ou la dernière fenêtre active sauf si ouvert via le Dock ou depuis la recherche.
	"window.openFilesInNewWindow": "off",
	// Contrôle si les dossiers doivent s'ouvrir dans une nouvelle fenêtre ou remplacer la dernière fenêtre active.
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` ou `--reuse-window`).
	//  - on: Les dossiers seront ouverts dans une nouvelle fenêtre.
	//  - off: Les dossiers remplaceront la dernière fenêtre active.
	//  - default: Les dossiers seront ouverts dans une nouvelle fenêtre, à moins qu’un dossier est sélectionné dans l’application (par exemple via le menu fichier).
	"window.openFoldersInNewWindow": "default",
	// Contrôle si une nouvelle fenêtre vide doit s’ouvrir lors du démarrage d’une seconde instance sans arguments, ou si la dernière instance en cours d’exécution doit obtenir le focus.
	// Notez qu’il peut encore exister des cas où ce paramètre est ignoré (par exemple lorsque vous utilisez l'option de ligne de commande `--new-window` or `--reuse-window`).
	//  - on: Ouvrir une nouvelle fenêtre vide.
	//  - off: Mettre le focus sur la dernière instance active
	"window.openWithoutArgumentsInNewWindow": "off",
	// Contrôle si une fenêtre doit être restaurée en mode plein écran si elle a été fermée dans ce mode.
	"window.restoreFullscreen": false,
	// Contrôle la façon dont les fenêtres sont rouvertes après le tout premier démarrage. Ce paramètre n'a aucun effet quand l'application est déjà en cours d'exécution.
	//  - preserve: Rouvre toujours toutes les fenêtres. Si un dossier ou un espace de travail est ouvert (par exemple à partir de la ligne de commande), il s'ouvre dans une nouvelle fenêtre, sauf s'il est déjà ouvert. Si des fichiers sont ouverts, ils s'ouvrent dans l'une des fenêtres restaurées.
	//  - all: Rouvre toutes les fenêtres, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - folders: Rouvre toutes les fenêtres qui comportaient des dossiers ou des espaces de travail ouverts, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - one: Rouvre la dernière fenêtre active, sauf si un dossier, un espace de travail ou un fichier est ouvert (par exemple à partir de la ligne de commande).
	//  - none: Ne rouvre jamais une fenêtre. À moins qu'un dossier ou un espace de travail ne soit ouvert (par exemple à partir de la ligne de commande), une fenêtre vide s'affiche.
	"window.restoreWindows": "all",
	// Contrôle basé sur l’éditeur actif du titre de la fenêtre. Les variables sont remplacées selon le contexte :
	// - '${activeEditorShort}' : nom du fichier (par ex., myFile.txt).
	// - '${activeEditorMedium}' : chemin du fichier relatif au dossier d'espace de travail (par ex., myFolder/myFileFolder/myFile.txt).
	// - '${activeEditorLong}' : chemin complet du fichier (par ex., /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - '${activeFolderShort}' : nom du dossier contenant le fichier (par ex., myFileFolder).
	// - '${activeFolderMedium}' : chemin du dossier contenant le fichier, relatif au dossier d'espace de travail (par ex., myFolder/myFileFolder).
	// - '${activeFolderLong}' : chemin complet du dossier contenant le fichier (par ex., /Users/Development/myFolder/myFileFolder).
	// - '${folderName} : nom du dossier d'espace de travail contenant le fichier (par ex., myFolder).
	// - '${folderPath}' : chemin de fichier du dossier d'espace de travail contenant le fichier (par ex., /Users/Development/myFolder).
	// - '${rootName}' : nom de l'espace de travail ou du dossier ouvert (par exemple myFolder ou myWorkspace).
	// - '${rootPath}' : chemin de fichier de l'espace de travail ou du dossier ouvert (par exemple /Users/Development/myWorkspace).
	// - « ${appName} » : par exemple, VS Code.
	// - '${remoteName}' : par ex., SSH
	// - `${dirty}`: un indicateur pour quand l’éditeur actif a des modifications non enregistrées.
	// - '${separator}' : séparateur conditionnel ("-") qui apparaît uniquement quand il est entouré de variables avec des valeurs ou du texte statique.
	"window.title": "${activeEditorShort}${separator}${rootName}",
	// Réglez l'apparence de la barre de titre de la fenêtre. Sur Linux et Windows, ce paramètre affecte aussi l'apparence de l'application et du menu contextuel. L'application des changements nécessite un redémarrage complet.
	"window.titleBarStyle": "custom",
	// Séparateur utilisé par `window.title`.
	"window.titleSeparator": " — ",
	// Modifiez le niveau de zoom de la fenêtre. La taille d'origine est 0. Chaque incrément supérieur (exemple : 1) ou inférieur (exemple : -1) représente un zoom 20 % plus gros ou plus petit. Vous pouvez également entrer des décimales pour changer le niveau de zoom avec une granularité plus fine.
	"window.zoomLevel": 0,
	// Configurez les associations entre les fichiers et les langages (exemple : "*.extension": "html"`). Celles-ci sont prioritaires sur les associations par défaut des langages installés. 
	"files.associations": {},
	// Lorsque cette option est activée, l’éditeur tente de deviner l’encodage du jeu de caractères lors de l’ouverture des fichiers. Ce paramètre peut également être configuré par langue. Notez que ce paramètre n’est pas respecté par la recherche de texte. Seuls les `files.encoding` sont respectés.
	"files.autoGuessEncoding": false,
	// Contrôle la [sauvegarde automatique](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) des éditeurs qui ont des modifications non enregistrées.
	//  - off: Un éditeur avec des modifications n’est jamais enregistré automatiquement.
	//  - afterDelay: Un éditeur avec des modifications est automatiquement enregistré après le `files.autoSaveDelay` configuré.
	//  - onFocusChange: Un éditeur avec des modifications est automatiquement sauvegardé lorsque l'éditeur perd le focus.
	//  - onWindowChange: Un éditeur avec des modifications est automatiquement sauvegardé lorsque la fenêtre perd le focus.
	"files.autoSave": "off",
	// Contrôle le délai en millisecondes après lequel un éditeur avec des modifications non sauvegardées est enregistré automatiquement. S'applique uniquement lorsque `files.autoSave` est défini sur `afterDelay`.
	"files.autoSaveDelay": 1000,
	// Identificateur de langue par défaut attribué aux nouveaux fichiers. S'il est configuré sur '${activeEditorLanguage}', utilise l’identificateur de langue de l'éditeur de texte actif le cas échéant.
	"files.defaultLanguage": "",
	// Déplace les fichiers/dossiers dans la corbeille du système d'exploitation (corbeille sous Windows) lors de la suppression. Désactiver ceci supprimera définitivement les fichiers/dossiers.
	"files.enableTrash": true,
	// Encodage de jeu de caractères par défaut à utiliser lors de la lecture et l’écriture des fichiers. Ce paramètre peut également être configuré par langage.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",
	// Caractère de fin de ligne par défaut.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Utilise le caractère de fin de ligne spécifique du système d'exploitation.
	"files.eol": "auto",
	// Configurez des [modèles glob](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) pour exclure des fichiers et des dossiers. Par exemple, l'explorateur de fichier choisit les fichiers et dossiers à afficher ou masquer en fonction de ce paramètre. Consultez le paramètre '#search.exclude#'' pour définir des exclusions propres à la recherche.
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},
	// Contrôle si les fichiers non enregistrés sont mémorisés entre les sessions, ce qui permet d'ignorer la demande d'enregistrement à la sortie de l'éditeur.
	//  - off: Désactiver la sortie à chaud. Une invite s'affiche lors de la tentative de fermeture d'une fenêtre contenant des éditeurs dont les modifications n'ont pas été sauvegardées.
	//  - onExit: La sortie à chaud se déclenche quand la dernière fenêtre est fermée dans Windows/Linux, ou quand la commande 'workbench.action.quit' se déclenche (palette de commandes, combinaison de touches, menu). Toutes les fenêtres qui n'ont pas de dossiers ouverts sont restaurées au prochain lancement. Une liste des fenêtres ouvertes avec des fichiers non enregistrés est accessible via Fichier > Ouvrir les éléments récents > Plus...
	//  - onExitAndWindowClose: La sortie à chaud se déclenche quand la dernière fenêtre est fermée dans Windows/Linux, ou quand la commande 'workbench.action.quit' se déclenche (palette de commandes, combinaison de touches, menu) ainsi que pour toute fenêtre comportant un dossier ouvert, qu'il s'agisse ou non de la dernière fenêtre. Toutes les fenêtres qui n'ont pas de dossiers ouverts sont restaurées au prochain lancement. Une liste des fenêtres ouvertes avec des fichiers non enregistrés est accessible via Fichier > Ouvrir les éléments récents > Plus...
	"files.hotExit": "onExit",
	// Quand l'option est activée, une nouvelle ligne finale est insérée à la fin du fichier au moment de son enregistrement.
	"files.insertFinalNewline": false,
	// Contrôle la mémoire disponible pour VS Code après le redémarrage en cas de tentative d'ouverture de fichiers volumineux. Même effet que de spécifier '--max-memory=NEWSIZE' sur la ligne de commande.
	"files.maxMemoryForLargeFilesMB": 4096,
	// Délai d'attente en millisecondes après lequel les participants pour la création, le renommage et la suppression de fichier sont supprimés. Utilisez '0' pour désactiver les participants.
	"files.participants.timeout": 60000,
	// Contrôle si les fichiers qui faisaient partie d’une refactorisation sont enregistrés automatiquement
	"files.refactoring.autoSave": true,
	// Restaurez la pile des opérations d'annulation à la réouverture d'un fichier.
	"files.restoreUndoStack": true,
	// Un conflit d'enregistrement peut se produire quand un fichier est enregistré sur un disque qui a été modifié par un autre programme dans l'intervalle. Pour éviter une perte de données, l'utilisateur est invité à comparer les changements dans l'éditeur avec la version sur disque. Changez ce paramètre seulement si vous rencontrez fréquemment des erreurs de conflit d'enregistrement, car il peut entraîner une perte de données s'il est utilisé sans précaution.
	//  - askUser: Refuse l'enregistrement et demande la résolution manuelle du conflit d'enregistrement.
	//  - overwriteFileOnDisk: Résout le conflit d'enregistrement en remplaçant le fichier sur le disque par les changements effectués dans l'éditeur.
	"files.saveConflictResolution": "askUser",
	// Active la boîte de dialogue de fichier simple, qui remplace alors la boîte de dialogue de fichier système.
	"files.simpleDialog.enable": false,
	// Si l'option est activée, va supprimer toutes les nouvelles lignes après la dernière ligne à la fin du fichier lors de l’enregistrement.
	"files.trimFinalNewlines": false,
	// Si l'option est activée, l'espace blanc de fin est supprimé au moment de l'enregistrement d'un fichier.
	"files.trimTrailingWhitespace": false,
	// Configurer les chemins ou les motifs globaux à exclure de la surveillance des fichiers. Les chemins ou les motifs glob de base qui sont relatifs (par exemple `build/output` ou `*.js`) seront résolus en un chemin absolu en utilisant l'espace de travail actuellement ouvert. Les modèles globaux complexes doivent correspondre à des chemins absolus (c'est-à-dire préfixer avec `**/` ou le chemin complet et suffixer avec `/**` pour correspondre aux fichiers dans un chemin) pour correspondre correctement (par exemple `**/build/output/**` ou `/Users/name/workspaces/project/build/output/**`). Si vous constatez que le processus de surveillance des fichiers consomme beaucoup de CPU, assurez-vous d'exclure les grands dossiers qui présentent moins d'intérêt (comme les dossiers de sortie de compilation).
	"files.watcherExclude": {
		"**/.dart_tool": true
	},
	// Configurez des chemins supplémentaires pour surveiller les modifications dans l’espace de travail. Par défaut, tous les dossiers d’espace de travail sont observés de manière récursive, à l’exception des dossiers qui sont des liens symboliques. Vous pouvez ajouter explicitement des chemins absolus ou relatifs pour prendre en charge la surveillance des dossiers qui sont des liens symboliques. Les chemins relatifs seront résolus en un chemin absolu en utilisant l'espace de travail actuellement ouvert.
	"files.watcherInclude": [],
	// Contrôle la taille de police (en pixels) du clavier en mode de capture vidéo d'écran.
	"screencastMode.fontSize": 56,
	// Contrôle la durée (en millisecondes) d'affichage de la superposition du clavier en mode capture vidéo.
	"screencastMode.keyboardOverlayTimeout": 800,
	// Contrôle ce qui est affiché dans la superposition du clavier lorsque seuls les raccourcis sont affichés.
	//  - keys: Clés
	//  - command: Titre de la commande
	//  - commandWithGroup: Titre de commande préfixé par son groupe
	//  - commandAndKeys: Titre et clés de la commande.
	//  - commandWithGroupAndKeys: Titre et clés de la commande, avec la commande préfixée par son groupe
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",
	// Contrôle la couleur hexadécimale (#RGB, #RGBA, #RRGGBB ou #RRGGBBAA) de l'indicateur de la souris en mode capture vidéo.
	"screencastMode.mouseIndicatorColor": "#FF0000",
	// Contrôle la taille (en pixels) de l'indicateur de la souris en mode capture vidéo.
	"screencastMode.mouseIndicatorSize": 20,
	// Affichez uniquement les raccourcis clavier en mode capture d'écran.
	"screencastMode.onlyKeyboardShortcuts": false,
	// Contrôle le décalage vertical de la superposition du mode de capture vidéo depuis le bas par rapport à la hauteur du Workbench.
	"screencastMode.verticalOffset": 20,
	// Contrôle si activer le Mode Zen centre également la mise en page.
	"zenMode.centerLayout": true,
	// Contrôle si activer le Mode Zen met aussi le workbench en mode plein écran.
	"zenMode.fullScreen": true,
	// Contrôle si l'activation du mode Zen masque également la barre d'activités à gauche ou à droite du banc d'essai.
	"zenMode.hideActivityBar": true,
	// Contrôle si l'activation du mode Zen masque aussi les numéros de ligne de l'éditeur.
	"zenMode.hideLineNumbers": true,
	// Contrôle si l'activation du mode Zen masque également la barre d’état au bas du banc d'essai.
	"zenMode.hideStatusBar": true,
	// Contrôle si l'activation du mode Zen masque également les onglets du banc d'essai.
	"zenMode.hideTabs": true,
	// Détermine si une fenêtre doit être restaurée en mode zen, si celle-ci a été fermée en mode zen.
	"zenMode.restore": true,
	// Contrôle si le mode notifications ne pas déranger doit être activé en mode zen. Si la valeur est true, seules les notifications d’erreur s’affichent.
	"zenMode.silentNotifications": true,
	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.currentLine.dateFormat": null,
	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,
	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",
	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,
	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,
	// Specifies the uncommitted changes format of the current line blame annotation. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting.
	// 
	// **NOTE**: Setting this to an empty string will disable current line blame annotations for uncommitted changes.
	"gitlens.currentLine.uncommittedChangesFormat": null,
	// Contrôle si l’Explorateur devrait automatiquement afficher et sélectionner les fichiers lors de leur ouverture.
	//  - true: Les fichiers seront affichés et sélectionnés.
	//  - false: Les fichiers ne seront pas affichés ni sélectionnés.
	//  - focusNoScroll: Les fichiers ne défilent pas dans la vue, mais ils ont toujours le focus.
	"explorer.autoReveal": true,
	// Contrôle si l'explorateur doit afficher les dossiers de manière compacte. Sous cette forme, les dossiers enfant sont compressés individuellement dans un élément d'arborescence combiné. Utile pour les structures de package Java, par exemple.
	"explorer.compactFolders": true,
	// Contrôle si l’Explorateur devrait demander confirmation lorsque vous supprimez un fichier via la corbeille.
	"explorer.confirmDelete": true,
	// Contrôle si l’Explorateur doit demander confirmation pour déplacer des fichiers et des dossiers par glisser/déplacer.
	"explorer.confirmDragAndDrop": true,
	// Contrôle si l'explorateur doit demander une confirmation lors de l'annulation.
	//  - verbose: Explorer vous demandera avant toutes les opérations d'annulation.
	//  - default: L'explorateur vous demandera avant les opérations d'annulation destructrices.
	//  - light: L'explorateur ne demandera pas avant d'annuler les opérations lorsqu'il est sélectionné.
	"explorer.confirmUndo": "default",
	// Caractère de séparation de chemin utilisé lors de la copie de chemins d’accès relatifs au fichier.
	//  - /: Utilisez la barre oblique comme caractère de séparation du chemin d’accès.
	//  - \: Utilisez la barre oblique inverse comme caractère de séparation du chemin d’accès.
	//  - auto: Utilise un caractère de séparation de chemin d’accès spécifique au système d’exploitation.
	"explorer.copyRelativePathSeparator": "auto",
	// Contrôle si les décorations de fichier devraient utiliser des badges.
	"explorer.decorations.badges": true,
	// Contrôle si les décorations de fichier devraient utiliser des couleurs.
	"explorer.decorations.colors": true,
	// Détermine si l'Explorateur autorise le déplacement des fichiers et des dossiers par glisser-déposer. Ce paramètre affecte uniquement le glisser-déposer dans l'Explorateur.
	"explorer.enableDragAndDrop": true,
	// Contrôle si l'explorateur doit prendre en charge l'annulation des opérations sur les fichiers et les dossiers.
	"explorer.enableUndo": true,
	// Contrôle si les entrées dans .gitignore doivent être analysées et exclues de l’explorateur. Similaire à `files.exclude`.
	"explorer.excludeGitIgnore": false,
	// Contrôle si l’explorateur doit développer des espaces de travail multi-racine contenant un seul dossier pendant l’initialisation
	"explorer.expandSingleFolderWorkspaces": true,
	// Contrôle si l’imbrication de fichiers est activée dans l’Explorateur. L’imbrication de fichiers permet de regrouper visuellement les fichiers associés dans un répertoire sous un seul fichier parent.
	"explorer.fileNesting.enabled": false,
	// Contrôle si les imbrications de fichiers sont automatiquement développées. `explorer.fileNesting.enabled` doit être défini pour que cela prenne effet.
	"explorer.fileNesting.expand": true,
	// Contrôle l’imbrication des fichiers dans l’Explorateur. `explorer.fileNesting.enabled` doit être défini pour que cela prenne effet. Chaque __Item__ représente un modèle parent et peut contenir un caractère « * » unique qui correspond à n’importe quelle chaîne. Chaque __Value__ représente une liste séparée par des virgules des modèles enfants qui doivent être affichés imbriqués sous un parent donné. Les modèles enfants peuvent contenir plusieurs jetons spéciaux :
	// - '${capture}' : correspond à la valeur résolue du '*' du modèle parent
	// - '${basename}' : correspond au nom de base du fichier parent, 'file' dans 'file.ts'
	// - '${extname}' : correspond à l’extension du fichier parent, 'ts' dans 'file.ts'
	// - '${dirname}' : correspond au nom de répertoire du fichier parent,  'src' dans 'src/file.ts'
	// - '*' : correspond à n’importe quelle chaîne, ne peut être utilisé qu’une seule fois par modèle enfant
	"explorer.fileNesting.patterns": {
		"pubspec.yaml": "pubspec.lock,pubspec_overrides.yaml,.packages,.flutter-plugins,.flutter-plugins-dependencies,.metadata",
		"*.dart": "${capture}.g.dart"
	},
	// Contrôle la stratégie de nommage à utiliser lorsque vous donnez un nouveau nom à un élément dupliqué d'Explorer à coller.
	//  - simple: Ajoute le mot « copy » à la fin du nom dupliqué, potentiellement suivi par un nombre
	//  - smart: Ajoute un nombre à la fin du nom dupliqué. Si le nom comporte déjà un nombre, essayez d'augmenter ce nombre
	//  - disabled: Désactive l’attribution de noms incrémentielle. Si deux fichiers portant le même nom existent, vous êtes invité à remplacer le fichier existant
	"explorer.incrementalNaming": "simple",
	// Nombre minimal d’emplacements d’éditeur affichés dans le volet Éditeurs ouverts. Si la valeur est 0, le volet Éditeurs ouverts se redimensionne dynamiquement en fonction du nombre d’éditeurs.
	"explorer.openEditors.minVisible": 0,
	// Contrôle l'ordre de tri des éditeurs dans le volet Éditeurs ouverts.
	//  - editorOrder: Les éditeurs sont triés dans l'ordre selon lequel les onglets d'éditeur sont affichés.
	//  - alphabetical: Les éditeurs sont classés par ordre alphabétique par nom d’onglet dans chaque groupe d’éditeurs.
	//  - fullPath: Les éditeurs sont classés par ordre alphabétique par chemin d’accès complet dans chaque groupe d’éditeurs.
	"explorer.openEditors.sortOrder": "editorOrder",
	// Nombre maximal d’éditeurs affiché dans le volet Ouvrir les éditeurs. La définition de cette valeur sur 0 masque le volet Ouvrir les éditeurs.
	"explorer.openEditors.visible": 9,
	// Contrôle le tri basé sur les propriétés des fichiers et des dossiers dans l'explorateur. Lorsque `explorer.fileNesting.enabled` est activé, contrôle également le tri des fichiers imbriqués.
	//  - default: Les fichiers et dossiers sont triés par nom. Les dossiers sont affichés avant les fichiers.
	//  - mixed: Les fichiers et dossiers sont triés par nom. Les fichiers sont imbriqués dans les dossiers.
	//  - filesFirst: Les fichiers et dossiers sont triés par nom. Les fichiers sont affichés avant les dossiers.
	//  - type: Les fichiers et dossiers sont groupés par type d’extension puis triés par nom. Les dossiers sont affichés avant les fichiers.
	//  - modified: Les fichiers et dossiers sont triés par date de dernière modification dans l'ordre décroissant. Les dossiers sont affichés avant les fichiers.
	//  - foldersNestsFiles: Les fichiers et dossiers sont triés selon leur nom. Les dossiers sont affichés avant les fichiers. Les fichiers avec des enfants imbriqués sont affichés avant les autres fichiers.
	"explorer.sortOrder": "default",
	// Contrôle le tri lexicographique des noms de fichiers et de dossiers dans l’explorateur.
	//  - default: Les noms en majuscules et en minuscules ne sont pas séparés.
	//  - upper: Les noms en majuscules sont regroupés avant les noms en minuscules.
	//  - lower: Les noms en minuscules sont regroupés avant les noms en majuscules.
	//  - unicode: Les noms sont triés dans l’ordre Unicode.
	"explorer.sortOrderLexicographicOptions": "default",
	// Specifies the command to be executed when an _authors_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for commits within the range
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",
	// Specifies whether to provide an _authors_ CodeLens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,
	// Specifies how to format absolute dates in the Git CodeLens. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.codeLens.dateFormat": null,
	// Specifies whether to provide any Git CodeLens, by default. Use the `Toggle Git CodeLens` command (`gitlens.toggleCodeLens`) to toggle the Git CodeLens on and off for the current window
	"gitlens.codeLens.enabled": true,
	// Specifies whether to provide any Git CodeLens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,
	// Specifies the command to be executed when a _recent change_ CodeLens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the commit details
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",
	// Specifies whether to provide a _recent change_ CodeLens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,
	// Specifies where Git CodeLens will be shown in the document
	//  - document: Adds CodeLens at the top of the document
	//  - containers: Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)
	//  - blocks: Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],
	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,
	// Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],
	// Specifies the string to be shown in place of the _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",
	// Specifies the string to be shown in place of both the _recent change_ and _authors_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",
	// Specifies the string to be shown in place of the _recent change_ CodeLens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",
	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",
	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git CodeLens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Shows the commit details
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit URL to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file URL to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",
	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.statusBar.dateFormat": null,
	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,
	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",
	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,
	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,
	// Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",
	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,
	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,
	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,
	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",
	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,
	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,
	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,
	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,
	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",
	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,
	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,
	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,
	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",
	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",
	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,
	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,
	// Contrôle le positionnement de la barre d'action sur des lignes dans la vue de recherche.
	//  - auto: Positionnez la barre d'action à droite quand la vue de recherche est étroite et immédiatement après le contenu quand la vue de recherche est large.
	//  - right: Positionnez toujours la barre d'action à droite.
	"search.actionsPosition": "right",
	// Contrôle si les résultats de recherche seront réduits ou développés.
	//  - auto: Les fichiers avec moins de 10 résultats sont développés. Les autres sont réduits.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",
	// Contrôle si les décorations de fichier de recherche doivent utiliser des badges.
	"search.decorations.badges": true,
	// Contrôle si les décorations de fichier de recherche doivent utiliser des couleurs.
	"search.decorations.colors": true,
	// Contrôle le mode d’affichage des résultats de recherche par défaut.
	//  - tree: Affiche les résultats de la recherche sous forme d’arborescence.
	//  - list: Affiche les résultats de la recherche sous forme de liste.
	"search.defaultViewMode": "list",
	// Configurez des [modèles glob](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) pour exclure des fichiers et des dossiers dans les recherches en texte intégral et le mode Quick Open. Hérite tous les modèles glob du paramètre '#files.exclude#'.
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},
	// Contrôle s'il faut suivre les symlinks pendant la recherche.
	"search.followSymlinks": true,
	// Contrôle si la vue de recherche doit lire ou modifier le presse-papiers partagé sur macOS.
	"search.globalFindClipboard": false,
	// Ce paramètre est déprécié. Faites plutôt glisser l’icône de recherche vers un nouvel emplacement.
	// Contrôle si la recherche s’affiche comme une vue dans la barre latérale ou comme un panneau dans la zone de panneaux pour plus d'espace horizontal.
	"search.location": "sidebar",
	// Le cache de recherche est conservé dans l’hôte d’extension qui ne s’arrête jamais. Ce paramètre n’est donc plus nécessaire.
	// Si activé, le processus searchService est maintenu actif au lieu d'être arrêté au bout d'une heure d'inactivité. Ce paramètre conserve le cache de recherche de fichier en mémoire.
	"search.maintainFileSearchCache": false,
	// Contrôle le nombre maximal de résultats de la recherche, ce paramètre peut être défini sur «null» (vide) pour obtenir des résultats illimités.
	"search.maxResults": 20000,
	// Contrôle où se produisent les nouvelles opérations « Rechercher dans les fichiers » et « Rechercher dans le dossier » : dans la vue de recherche ou dans un éditeur de recherche
	//  - view: Effectuez une recherche dans la vue de recherche, soit dans le panneau, soit dans les barres latérales.
	//  - reuseEditor: Effectue la recherche dans un éditeur de recherche existant, le cas échéant, sinon effectue la recherche dans un nouvel éditeur de recherche.
	//  - newEditor: Effectue la recherche dans un nouvel éditeur de recherche.
	"search.mode": "view",
	// Contrôle l'ordre de tri de l'historique de l'éditeur en mode Quick Open pendant le filtrage.
	//  - default: Les entrées d'historique sont triées par pertinence en fonction de la valeur de filtre utilisée. Les entrées les plus pertinentes apparaissent en premier.
	//  - recency: Les entrées d'historique sont triées par date. Les dernières entrées ouvertes sont affichées en premier.
	"search.quickOpen.history.filterSortOrder": "default",
	// Indique si vous souhaitez inclure les résultats de fichiers récemment ouverts dans les résultats de fichiers pour Quick Open.
	"search.quickOpen.includeHistory": true,
	// Indique s’il faut inclure les résultats d’une recherche de symbole global dans les résultats de fichier pour Quick Open.
	"search.quickOpen.includeSymbols": false,
	// Nombre par défaut de lignes de contexte avoisinantes à utiliser au moment de la création d'éditeurs de recherche. Si vous utilisez '#search.searchEditor.reusePriorSearchConfiguration#', vous pouvez lui affecter la valeur 'null' (vide) pour utiliser la configuration précédente de l'éditeur de recherche.
	"search.searchEditor.defaultNumberOfContextLines": 1,
	// Configurez ce qui se passe après un double clic sur un résultat dans un éditeur de recherche.
	//  - selectWord: Double-cliquez pour sélectionner le mot sous le curseur.
	//  - goToLocation: Double-cliquez sur le résultat pour l'ouvrir dans le groupe d'éditeurs actif.
	//  - openLocationToSide: Double-cliquez pour ouvrir le résultat dans le groupe d'éditeurs ouvert ou dans un nouveau groupe d'éditeurs le cas échéant.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",
	// Quand cette option est activée, les nouveaux éditeurs de recherche réutilisent les inclusions, exclusions et indicateurs du dernier éditeur de recherche ouvert.
	"search.searchEditor.reusePriorSearchConfiguration": false,
	// Recherchez dans tous les fichiers à mesure que vous tapez.
	"search.searchOnType": true,
	// Lorsque `search.searchOnType#` est activé, contrôle le délai d’expiration en millisecondes entre un caractère tapé et le début de la recherche. N’a aucun effet lorsque `#search.searchOnType` est désactivé.
	"search.searchOnTypeDebouncePeriod": 300,
	// Mettez à jour la requête de recherche en fonction du texte sélectionné de l'éditeur quand vous placez le focus sur la vue de recherche. Cela se produit soit au moment du clic de souris, soit au déclenchement de la commande 'workbench.views.search.focus'.
	"search.seedOnFocus": false,
	// Activez l'initialisation de la recherche à partir du mot le plus proche du curseur quand l'éditeur actif n'a aucune sélection.
	"search.seedWithNearestWord": false,
	// Détermine s'il faut afficher les numéros de ligne dans les résultats de recherche.
	"search.showLineNumbers": false,
	// Faire une recherche non sensible à la casse si le modèle est tout en minuscules, dans le cas contraire, faire une rechercher sensible à la casse.
	"search.smartCase": false,
	// Contrôle l'ordre de tri des résultats de recherche.
	//  - default: Les résultats sont triés par dossier et noms de fichier, dans l'ordre alphabétique.
	//  - fileNames: Les résultats sont triés par noms de fichier en ignorant l'ordre des dossiers, dans l'ordre alphabétique.
	//  - type: Les résultats sont triés par extensions de fichier dans l'ordre alphabétique.
	//  - modified: Les résultats sont triés par date de dernière modification de fichier, dans l'ordre décroissant.
	//  - countDescending: Les résultats sont triés par nombre dans chaque fichier, dans l'ordre décroissant.
	//  - countAscending: Les résultats sont triés par nombre dans chaque fichier, dans l'ordre croissant.
	"search.sortOrder": "default",
	// Contrôle l'utilisation des fichiers globaux `.gitignore` et `.ignore` lors de la recherche de fichiers. Il faut que `search.useIgnoreFiles` soit activé.
	"search.useGlobalIgnoreFiles": false,
	// Contrôle s'il faut utiliser les fichiers `.gitignore` et `.ignore` par défaut pendant la recherche de fichiers.
	"search.useIgnoreFiles": true,
	// Contrôle l'utilisation des fichiers `.gitignore` et `.ignore` dans les répertoires parents lors de la recherche de fichiers. Il faut que `search.useIgnoreFiles` soit activé.
	"search.useParentIgnoreFiles": false,
	// Déprécié. PCRE2 est utilisé automatiquement lors de l'utilisation de fonctionnalités regex qui ne sont prises en charge que par PCRE2.
	// Détermine s'il faut utiliser le moteur regex PCRE2 dans la recherche de texte. Cette option permet d'utiliser des fonctionnalités regex avancées comme lookahead et les références arrière. Toutefois, les fonctionnalités PCRE2 ne sont pas toutes prises en charge, seulement celles qui sont aussi prises en charge par JavaScript.
	"search.usePCRE2": false,
	// Détermine s'il faut ouvrir l'aperçu du remplacement quand vous sélectionnez ou remplacez une correspondance.
	"search.useReplacePreview": true,
	// Déprécié. Utilisez "search.usePCRE2" pour prendre en charge la fonctionnalité regex avancée.
	// Ce paramètre est déprécié et remplacé par "search.usePCRE2".
	"search.useRipgrep": true,
	// Contrôle la logique de distribution des appuis sur les touches pour utiliser soit 'code' (recommandé), soit 'keyCode'.
	"keyboard.dispatch": "code",
	// Active les boutons de la touchbar macOS sur le clavier si disponible.
	"keyboard.touchbar.enabled": true,
	// Ensemble d'identificateurs pour les entrées de la Touch Bar qui ne doivent pas apparaître (par exemple 'workbench.action.navigateBack').
	"keyboard.touchbar.ignored": [],
	// Paramètre proxy à utiliser. S'il n'est pas défini, il est hérité des variables d'environnement 'http_proxy' et 'https_proxy'.
	"http.proxy": "",
	// Valeur à envoyer comme en-tête 'Proxy-Authorization' pour chaque demande de réseau.
	"http.proxyAuthorization": null,
	// Spécifie si le certificat de serveur proxy doit être vérifié par rapport à la liste des autorités de certification fournies.
	"http.proxyStrictSSL": true,
	// Utilisez la prise en charge du proxy pour les extensions.
	//  - off: Désactivez la prise en charge de proxy pour les extensions.
	//  - on: Activez la prise en charge de proxy pour les extensions.
	//  - fallback: Activer la prise en charge du proxy pour les extensions, revenir aux options de demande quand aucun proxy n’a été trouvé.
	//  - override: Activer le support de proxy pour les extensions, remplacer les options de demande.
	"http.proxySupport": "override",
	// Contrôle si les certificats d'autorité de certification doivent être chargés à partir de l'OS. (Sur Windows et macOS, vous devez recharger la fenêtre après la désactivation de ce paramètre.)
	"http.systemCertificates": true,
	// Ce paramètre est déprécié, utilisez 'update.mode' à la place.
	// Choisissez si vous voulez recevoir des mises à jour automatiques. Nécessite un redémarrage après le changement. Les mises à jour sont récupérées auprès d'un service en ligne Microsoft.
	"update.channel": "default",
	// Choisissez si vous voulez recevoir des mises à jour automatiques. Nécessite un redémarrage après le changement. Les mises à jour sont récupérées auprès d'un service en ligne Microsoft.
	//  - none: Désactivez les mises à jour.
	//  - manual: Désactivez la recherche de mises à jour automatique en arrière-plan. Les mises à jour sont disponibles si vous les rechercher manuellement.
	//  - start: Vérifiez les mises à jour uniquement au démarrage. Désactivez les vérifications de mises à jour d'arrière-plan automatiques.
	//  - default: Activez la recherche de mises à jour automatique pour que VS Code recherche les mises à jour automatiquement et régulièrement.
	"update.mode": "default",
	// Afficher les Notes de publication après une mise à jour. Les Notes de publication sont téléchargées depuis un service en ligne de Microsoft.
	"update.showReleaseNotes": true,
	// Ce paramètre est déprécié en faveur de 'comments.openView'.
	// Contrôle quand le panneau des composants doit s'ouvrir.
	"comments.openPanel": "openOnSessionStartWithComments",
	// Contrôle quand l’affichage des composants doit s'ouvrir.
	//  - never: L’affichage des commentaires ne sera jamais ouvert.
	//  - file: L’affichage des commentaires s’ouvre lorsqu’un fichier contenant des commentaires est actif.
	//  - firstFile: Si l’affichage des commentaires n’a pas encore été ouvert au cours de cette session, il s’ouvre la première fois pendant une session qu’un fichier contenant des commentaires est actif.
	"comments.openView": "firstFile",
	// Détermine si l’heure relative sera utilisée dans les horodatages des commentaires (par exemple, « il y a 1 jour »).
	"comments.useRelativeTime": true,
	// Permettre de définir des points d’arrêt dans n’importe quel fichier.
	"debug.allowBreakpointsEverywhere": false,
	// Afficher automatiquement les valeurs des variables qui sont résolues de manière différée par le débogueur, telles que les getters.
	"debug.autoExpandLazyVariables": false,
	// Détermine s'il est nécessaire de confirmer à la fermeture de la fenêtre s’il existe de sessions de débogage actives.
	//  - never: Ne jamais confirmer
	//  - always: Toujours confirmer l’existence des sessions de débogage.
	"debug.confirmOnExit": "never",
	// Contrôle si les suggestions doivent être acceptées lors de la saisie dans la console de débogage. La saisie est également utilisée pour évaluer tout ce qui est tapé dans la console de débogage.
	"debug.console.acceptSuggestionOnEnter": "off",
	// Contrôle s'il faut fermer automatiquement la console de débogage à la fin de la session de débogage.
	"debug.console.closeOnEnd": false,
	// Contrôle si la console de débogage doit réduire les lignes identiques et afficher un certain nombre d'occurrences avec un badge.
	"debug.console.collapseIdenticalLines": true,
	// Contrôle la famille de polices dans la console de débogage.
	"debug.console.fontFamily": "default",
	// Contrôle la taille de police en pixels dans la console de débogage.
	"debug.console.fontSize": 12,
	// Contrôle si la console de débogage doit suggérer une entrée déjà tapée.
	"debug.console.historySuggestions": true,
	// Contrôle la hauteur de ligne en pixels dans la console de débogage. Utilisez 0 pour calculer la hauteur de ligne à partir de la taille de police.
	"debug.console.lineHeight": 0,
	// Contrôle si le retour automatique à la ligne est activé dans la console de débogage.
	"debug.console.wordWrap": true,
	// Afficher le code source en mode Désassemblage
	"debug.disassemblyView.showSourceCode": true,
	// Contrôle si l’éditeur doit être ciblé lorsque le débogueur s’arrête.
	"debug.focusEditorOnBreak": true,
	// Contrôle si la fenêtre Workbench doit être ciblée lorsque le débogueur s'arrête.
	"debug.focusWindowOnBreak": true,
	// Afficher les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - on: Affiche toujours les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - off: N'affiche jamais les valeurs des variables inline dans l'éditeur pendant le débogage.
	//  - auto: Affiche les valeurs des variables inline dans l'éditeur au moment du débogage, si le langage prend en charge les emplacements de valeurs inline.
	"debug.inlineValues": "auto",
	// Contrôle le moment où la console de débogage interne doit s’ouvrir.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",
	// Contrôle ce qu'il faut faire en cas d'erreurs après l'exécution d'une tâche de prélancement.
	//  - debugAnyway: Ignorer les erreurs de tâche et démarrer le débogage.
	//  - showErrors: Afficher la vue Problèmes et ne pas démarrer le débogage.
	//  - prompt: Demandez à l'utilisateur.
	//  - abort: Annuler le débogage.
	"debug.onTaskErrors": "prompt",
	// Contrôle le moment où la vue de débogage doit s’ouvrir.
	"debug.openDebug": "openOnDebugBreak",
	// Ouvre automatiquement la vue Explorateur à la fin d'une session de débogage.
	"debug.openExplorerOnEnd": false,
	// Contrôle les éditeurs à enregistrer avant le démarrage d'une session de débogage.
	//  - allEditorsInActiveGroup: Enregistre tous les éditeurs du groupe actif avant le démarrage d'une session de débogage.
	//  - nonUntitledEditorsInActiveGroup: Enregistre tous les éditeurs du groupe actif à l'exception de ceux qui n'ont pas de titre avant le démarrage d'une session de débogage.
	//  - none: N'enregistre aucun éditeur avant le démarrage d'une session de débogage.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",
	// Contrôle si les points d'arrêt doivent être affichés dans la règle d'aperçu.
	"debug.showBreakpointsInOverviewRuler": false,
	// Contrôle si les décorations de candidat des points d'arrêt inline doivent être affichées dans l'éditeur pendant le débogage.
	"debug.showInlineBreakpointCandidates": true,
	// Contrôle le moment où la barre d’état de débogage doit être visible.
	//  - never: Ne jamais afficher debug dans la barre d'état
	//  - always: Toujours afficher debug dans la barre d’état
	//  - onFirstSessionStart: Afficher debug dans seule la barre d’état après que le débogage a été lancé pour la première fois
	"debug.showInStatusBar": "onFirstSessionStart",
	// Contrôle si les sous-sessions de débogage sont affichées dans la barre d'outils de débogage. Quand ce paramètre a la valeur false, la commande stop sur une sous-session arrête également la session parente.
	"debug.showSubSessionsInToolBar": false,
	// Avant de démarrer une nouvelle session de débogage dans un terminal intégré ou externe, effacez le terminal.
	"debug.terminal.clearBeforeReusing": false,
	// Contrôle l'emplacement de la barre d'outils de débogage. Les options sont 'floating' dans toutes les vues, 'docked' dans la vue de débogage ou 'hidden'.
	"debug.toolBarLocation": "floating",
	// Configuration de lancement du débogage global. Doit être utilisée à la place de 'launch.json' qui est partagé entre les espaces de travail.
	"launch": {
		"configurations": [],
		"compounds": []
	},
	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,
	// Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
	"html.autoCreateQuotes": true,
	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",
	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],
	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",
	// Enable/disable default HTML formatter.
	"html.format.enable": true,
	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",
	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,
	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,
	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,
	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,
	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,
	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",
	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",
	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",
	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
	"html.format.wrapAttributesIndentSize": null,
	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,
	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,
	// Show references to MDN in hover.
	"html.hover.references": true,
	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,
	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,
	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",
	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,
	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,
	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,
	// Enable/disable default JSON formatter
	"json.format.enable": true,
	// Keep all existing new lines when formatting.
	"json.format.keepLines": false,
	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,
	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,
	// Associate schemas to JSON files in the current project.
	"json.schemas": [],
	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",
	// Enable/disable JSON validation.
	"json.validate.enable": true,
	// Enable/disable dropping files into a Markdown editor by holding down shift. Requires enabling `editor.dropIntoEditor.enabled`.
	"markdown.editor.drop.enabled": true,
	// Enable/disable pasting files into a Markdown editor inserts Markdown links. Requires enabling `editor.experimental.pasteActions.enabled`.
	"markdown.experimental.editor.pasteLinks.enabled": true,
	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",
	// Enable/disable highlighting link occurrences in the current document.
	"markdown.occurrencesHighlight.enabled": false,
	// Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"markdown.preview.breaks": false,
	// Double click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,
	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,
	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,
	// Enable or disable conversion of URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,
	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,
	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",
	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,
	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,
	// Enable or disable some language-neutral replacement and quotes beautification in the Markdown preview.
	"markdown.preview.typographer": false,
	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],
	// Enable/disable path suggestions while writing links in Markdown files.
	"markdown.suggest.paths.enabled": true,
	// Enable debug logging for the Markdown extension.
	"markdown.trace.extension": "off",
	// Traces the communication between VS Code and the Markdown language server.
	"markdown.trace.server": "off",
	// Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
	//  - prompt: Prompt on each file move.
	//  - always: Always update links automatically.
	//  - never: Never try to update link and don't prompt.
	"markdown.updateLinksOnFileMove.enabled": "never",
	// Enable/disable updating links when a directory is moved or renamed in the workspace.
	"markdown.updateLinksOnFileMove.enableForDirectories": true,
	// Glob patterns that specifies which files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],
	// Validate duplicated definitions in the current file.
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",
	// Enable/disable all error reporting in Markdown files.
	"markdown.validate.enabled": false,
	// Validate links to other files in Markdown files, e.g. `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fileLinks.enabled": "warning",
	// Validate the fragment part of links to headers in other files in Markdown files, e.g. `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",
	// Validate fragment links to headers in the current Markdown file, e.g. `[link](#header)`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fragmentLinks.enabled": "warning",
	// Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
	"markdown.validate.ignoredLinks": [],
	// Validate reference links in Markdown files, e.g. `[link][ref]`.  Requires enabling `markdown.validate.enabled`.
	"markdown.validate.referenceLinks.enabled": "warning",
	// Validate link definitions that are unused in the current file.
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",
	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,
	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,
	// Points to the PHP executable.
	"php.validate.executablePath": null,
	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",
	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,
	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,
	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,
	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,
	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,
	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,
	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,
	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",
	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,
	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,
	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.enumMemberValues.enabled": false,
	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,
	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"javascript.inlayHints.parameterNames.enabled": "none",
	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.parameterTypes.enabled": false,
	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,
	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.variableTypes.enabled": false,
	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"javascript.preferences.autoImportFileExcludePatterns": [],
	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"javascript.preferences.importModuleSpecifier": "shortest",
	// Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",
	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",
	// Preferred quote style to use for quick fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"javascript.preferences.quoteStyle": "auto",
	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.renameShorthandProperties": true,
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.useAliasesForRenames": true,
	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,
	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,
	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,
	// Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
	"javascript.suggest.classMemberSnippets.enabled": true,
	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,
	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,
	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,
	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,
	// Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
	"javascript.suggest.includeCompletionsForImportStatements": true,
	// Enable/disable generating `@returns` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"javascript.suggest.jsdoc.generateReturns": true,
	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,
	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,
	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,
	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",
	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,
	// Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
	"js/ts.implicitProjectConfig.module": "ESNext",
	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,
	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": true,
	// Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
	"js/ts.implicitProjectConfig.target": "ES2020",
	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,
	// Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,
	// Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,
	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,
	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,
	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,
	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,
	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,
	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,
	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,
	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,
	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,
	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",
	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,
	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.enumMemberValues.enabled": false,
	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,
	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"typescript.inlayHints.parameterNames.enabled": "none",
	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.parameterTypes.enabled": false,
	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,
	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.variableTypes.enabled": false,
	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
	// Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
	"typescript.locale": "auto",
	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",
	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"typescript.preferences.autoImportFileExcludePatterns": [],
	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"typescript.preferences.importModuleSpecifier": "shortest",
	// Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",
	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",
	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",
	// Preferred quote style to use for quick fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"typescript.preferences.quoteStyle": "auto",
	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.renameShorthandProperties": true,
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.useAliasesForRenames": true,
	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,
	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,
	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,
	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,
	// Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
	"typescript.suggest.classMemberSnippets.enabled": true,
	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,
	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,
	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,
	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,
	// Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
	"typescript.suggest.includeCompletionsForImportStatements": true,
	// Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.
	"typescript.suggest.includeCompletionsWithSnippetText": true,
	// Enable/disable generating `@returns` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"typescript.suggest.jsdoc.generateReturns": true,
	// Enable/disable snippet completions for methods in object literals. Requires using TypeScript 4.7+ in the workspace
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,
	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,
	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,
	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,
	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",
	// Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": "",
	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,
	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,
	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",
	// The maximum amount of memory (in MB) to allocate to the TypeScript server process.
	"typescript.tsserver.maxTsServerMemory": 3072,
	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],
	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",
	// This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
	"typescript.tsserver.useSeparateSyntaxServer": true,
	// Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
	//  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
	//  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
	//  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
	"typescript.tsserver.useSyntaxServer": "auto",
	// Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
	"typescript.tsserver.watchOptions": {},
	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",
	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,
	// Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",
	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,
	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,
	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,
	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,
	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,
	// Specifies whether to enable experimental multi-select support in the views.
	// **NOTE**: Requires a restart to take effect.
	"gitlens.views.experimental.multiSelect.enabled": false,
	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",
	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",
	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",
	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",
	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${stashOnRef, }${agoOrDate}",
	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",
	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,
	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,
	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,
	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,
	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,
	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,
	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,
	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,
	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,
	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,
	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,
	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.commits.showBranchComparison": "working",
	// Affichez toujours le test exécuté lorsque '#testing.followRunningTest#' est activé. Si ce paramètre est désactivé, seuls les tests ayant échoué sont affichés.
	"testing.alwaysRevealTestOnStateChange": false,
	// Configure le déclenchement de l'ouverture automatique de la vue d'aperçu d'erreur.
	//  - failureAnywhere: L'ouverture automatique s'effectue, quel que soit l'emplacement de l'échec.
	//  - failureInVisibleDocument: L'ouverture automatique s'effectue en cas d'échec d'un test dans un document visible.
	//  - never: Ne jamais ouvrir automatiquement
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",
	// Contrôle si la vue d'aperçu doit s'ouvrir automatiquement en mode d'exécution automatique.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,
	// Délai d'attente, en millisecondes, après le marquage d'un test comme étant obsolète et le démarrage d'une nouvelle exécution.
	"testing.autoRun.delay": 1000,
	// Contrôle les tests exécutés automatiquement.
	//  - all: Exécute automatiquement tous les tests découverts quand l'exécution automatique est activée. Réexécute les tests individuels quand ils changent.
	//  - rerun: Réexécute les tests individuels quand ils changent. N'exécute pas automatiquement les tests qui n'ont pas déjà été exécutés.
	"testing.autoRun.mode": "all",
	// Contrôle l’action à prendre lorsque vous cliquez avec le bouton gauche sur une décoration de test dans la reliure.
	//  - run: Exécutez le test.
	//  - debug: Déboguer le test.
	//  - contextMenu: Ouvrez le menu contextuel pour obtenir plus d’options.
	"testing.defaultGutterClickAction": "run",
	// Contrôle si le test en cours d’exécution doit être suivi dans l’affichage de l’explorateur de tests
	"testing.followRunningTest": true,
	// Contrôle si les décorations de test sont affichées dans la marge de l’éditeur.
	"testing.gutterEnabled": true,
	// Contrôle quand la vue de test doit s’ouvrir.
	//  - neverOpen: Ne jamais ouvrir automatiquement la vue de test
	//  - openOnTestStart: Ouvrir la vue des tests au démarrage des tests
	//  - openOnTestFailure: Ouvrir la vue de test en cas d’échec de test
	"testing.openTesting": "openOnTestStart",
	// Contrôlez si vous enregistrez tous les éditeurs modifiés avant d'exécuter un test.
	"testing.saveBeforeTest": true,
	// Specifies whether to automatically link external resources in commit messages
	"gitlens.views.commitDetails.autolinks.enabled": true,
	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commitDetails.autolinks.enhanced": true,
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commit Details_ view
	"gitlens.views.commitDetails.avatars": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `tree` or `auto`
	"gitlens.views.commitDetails.files.compact": true,
	// Specifies how the _Commit Details_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commitDetails.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commitDetails.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commit Details_ view. Only applies when `gitlens.views.commitDetails.files.layout` is set to `auto`
	"gitlens.views.commitDetails.files.threshold": 5,
	// Specifies whether to query for associated pull requests. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commitDetails.pullRequests.enabled": true,
	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,
	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,
	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],
	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"css.format.braceStyle": "collapse",
	// Enable/disable default CSS formatter.
	"css.format.enable": true,
	// Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
	"css.format.maxPreserveNewLines": null,
	// Separate rulesets by a blank line.
	"css.format.newlineBetweenRules": true,
	// Separate selectors with a new line.
	"css.format.newlineBetweenSelectors": true,
	// Whether existing line breaks before elements should be preserved.
	"css.format.preserveNewLines": true,
	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"css.format.spaceAroundSelectorSeparator": false,
	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,
	// Show references to MDN in CSS hovers.
	"css.hover.references": true,
	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",
	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",
	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",
	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",
	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",
	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",
	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",
	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",
	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",
	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",
	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",
	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",
	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",
	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",
	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",
	// Unknown property.
	"css.lint.unknownProperties": "warning",
	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",
	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],
	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",
	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",
	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",
	// Enables or disables all validations.
	"css.validate": true,
	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,
	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,
	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"less.format.braceStyle": "collapse",
	// Enable/disable default LESS formatter.
	"less.format.enable": true,
	// Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
	"less.format.maxPreserveNewLines": null,
	// Separate rulesets by a blank line.
	"less.format.newlineBetweenRules": true,
	// Separate selectors with a new line.
	"less.format.newlineBetweenSelectors": true,
	// Whether existing line breaks before elements should be preserved.
	"less.format.preserveNewLines": true,
	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"less.format.spaceAroundSelectorSeparator": false,
	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,
	// Show references to MDN in LESS hovers.
	"less.hover.references": true,
	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",
	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",
	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",
	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",
	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",
	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",
	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",
	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",
	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",
	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",
	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",
	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",
	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",
	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",
	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",
	// Unknown property.
	"less.lint.unknownProperties": "warning",
	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",
	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],
	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",
	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",
	// Enables or disables all validations.
	"less.validate": true,
	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,
	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,
	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",
	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.repositories.branches.showBranchComparison": "branch",
	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,
	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,
	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,
	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,
	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,
	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.repositories.showBranchComparison": "working",
	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,
	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,
	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,
	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,
	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,
	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": true,
	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,
	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,
	// Specifies whether to show the worktrees for each repository in the _Repositories_ view
	"gitlens.views.repositories.showWorktrees": true,
	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": false,
	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,
	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,
	// Specifies how the _File History_ view will display files when showing the history of a folder
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,
	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,
	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,
	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"scss.format.braceStyle": "collapse",
	// Enable/disable default SCSS formatter.
	"scss.format.enable": true,
	// Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
	"scss.format.maxPreserveNewLines": null,
	// Separate rulesets by a blank line.
	"scss.format.newlineBetweenRules": true,
	// Separate selectors with a new line.
	"scss.format.newlineBetweenSelectors": true,
	// Whether existing line breaks before elements should be preserved.
	"scss.format.preserveNewLines": true,
	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"scss.format.spaceAroundSelectorSeparator": false,
	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,
	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,
	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",
	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",
	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",
	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",
	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",
	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",
	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",
	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",
	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",
	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",
	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",
	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",
	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",
	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",
	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",
	// Unknown property.
	"scss.lint.unknownProperties": "warning",
	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",
	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],
	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",
	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",
	// Enables or disables all validations.
	"scss.validate": true,
	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,
	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,
	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,
	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,
	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,
	// Specifies whether to query for pull requests associated with each branch and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with each branch in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,
	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,
	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.branches.showBranchComparison": "branch",
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,
	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,
	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,
	// Specifies whether to query for pull requests associated with each branch and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with each branch in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,
	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,
	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,
	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,
	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,
	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when tags names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,
	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,
	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,
	// Lorsqu’activé, vérifie automatiquement les extensions pour les mises à jour. Si une extension est une mise à jour, elle est marquée comme obsolète dans l’affichage des Extensions. Les mises à jour sont récupérées à partir d’un service en ligne de Microsoft.
	"extensions.autoCheckUpdates": true,
	// Contrôle le comportement de mise à jour automatique des extensions. Les mises à jour sont récupérées à partir d'un service en ligne Microsoft.
	//  - true: Télécharge et installe automatiquement les mises à jour pour toutes les extensions.
	//  - onlyEnabledExtensions: Télécharge et installe automatiquement les mises à jour uniquement pour les extensions activées. Les extensions désactivées ne sont pas mises à jour automatiquement.
	//  - false: Les extensions ne sont pas mises à jour automatiquement.
	"extensions.autoUpdate": true,
	// Si cette option est activée, les éditeurs avec les détails d'extension sont automatiquement fermés quand vous quittez l'affichage Extensions.
	"extensions.closeExtensionDetailsOnViewChange": false,
	// Si une extension est listée ici, aucune invite de confirmation n'est affichée quand cette extension gère un URI.
	"extensions.confirmedUriHandlerExtensionIds": [],
	// Configurez une extension à exécuter dans un autre processus hôte d’extension.
	"extensions.experimental.affinity": {},
	// Lorsque cette option est activée, l’hôte d’extension est lancé à l’aide de la nouvelle API UtilityProcess Electron.
	"extensions.experimental.useUtilityProcess": false,
	// Si cette option est activée, les notifications pour les recommandations d’extension ne sont pas affichées.
	"extensions.ignoreRecommendations": false,
	// Ce paramètre est déprécié. Utilisez le paramètre extensions.ignoreRecommendations pour contrôler les notifications de recommandation. Utilisez les actions de visibilité de la vue Extensions pour masquer la vue recommandée par défaut.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,
	// Remplacez la prise en charge d’une extension par un espace de travail non approuvé. Les extensions utilisant la valeur `true` sont toujours activées. Les extensions utilisant la valeur `limited` sont toujours activées et l’extension masquera les fonctionnalités nécessitant une approbation. Les extensions utilisant la valeur `false` ne sont activées que dans un espace de travail approuvé.
	"extensions.supportUntrustedWorkspaces": {},
	// Remplacez la prise en charge d’une extension par les espaces de travail virtuels.
	"extensions.supportVirtualWorkspaces": {},
	// Activez l'hôte d'extension Web Worker.
	//  - true: L’hôte d’extension Web Worker sera toujours lancé.
	//  - false: L’hôte d’extension Web Worker ne sera jamais lancé.
	//  - auto: L’hôte d’extension rôle de travail est lancé quand une extension Web en a besoin.
	"extensions.webWorker": "auto",
	// Activez/désactivez la possibilité du défilement intelligent dans la vue de sortie. Le défilement intelligent vous permet de verrouiller automatiquement le défilement quand vous cliquez dans la vue de sortie. Il se déverrouille quand vous cliquez sur la dernière ligne.
	"output.smartScroll.enabled": true,
	// Liste des extensions à ignorer lors de la synchronisation. L'identificateur d'une extension est toujours '${publisher}.${name}'. Par exemple : 'vscode.csharp'.
	"settingsSync.ignoredExtensions": [],
	// Configurez les paramètres à ignorer pendant la synchronisation.
	"settingsSync.ignoredSettings": [],
	// Synchronisez les combinaisons de touches pour chaque plateforme.
	"settingsSync.keybindingsPerPlatform": true,
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Worktrees_ view
	"gitlens.views.worktrees.avatars": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `tree` or `auto`
	"gitlens.views.worktrees.files.compact": true,
	// Specifies how the _Worktrees_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.worktrees.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.worktrees.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Worktrees_ view. Only applies when `gitlens.views.worktrees.files.layout` is set to `auto`
	"gitlens.views.worktrees.files.threshold": 5,
	// Specifies whether to query for pull requests associated with the worktree branch and commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with the worktree branch in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForBranches": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Worktrees_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.worktrees.pullRequests.showForCommits": true,
	// Specifies whether to reveal worktrees in the _Worktrees_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.worktrees.reveal": true,
	// Specifies whether to show a comparison of the worktree branch with a user-selected reference (branch, tag. etc) in the _Worktrees_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the worktree branch with a user-selected reference
	"gitlens.views.worktrees.showBranchComparison": "working",
	// Specifies the default path in which new worktrees will be created
	"gitlens.worktrees.defaultLocation": null,
	// Specifies whether to prompt for a path when creating new worktrees
	"gitlens.worktrees.promptForLocation": true,
	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,
	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,
	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,
	// Specifies whether to reveal contributors in the _Contributors_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.contributors.reveal": true,
	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,
	// Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
	"gitlens.views.contributors.showStatistics": false,
	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,
	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,
	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",
	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,
	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,
	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,
	// Contrôle si les cellules de code de la fenêtre interactive sont réduites par défaut.
	"interactiveWindow.collapseCellInputCode": "fromEditor",
	// Quand la fonctionnalité est activée dans le notebook, les barres de navigation contiennent des cellules de code.
	"notebook.breadcrumbs.showCodeCells": true,
	// Contrôle le rendu de l’indicateur de focus sur les bordures de cellule ou sur la reliure gauche
	"notebook.cellFocusIndicator": "gutter",
	// Indique si la barre d'outils de la cellule doit être affichée, ou si elle doit être masquée.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},
	// Indique si la barre d’outils de la cellule doit apparaître au survol de la souris ou au clic.
	"notebook.cellToolbarVisibility": "click",
	// Détermine si l’éditeur de bloc-notes doit être rendu dans un format compact. Par exemple, lorsqu’il est activé, il diminue la largeur de la marge de gauche.
	"notebook.compactView": true,
	// Contrôle si les actions de sortie doivent être rendues dans la barre d’outils de sortie.
	"notebook.consolidatedOutputButton": true,
	// Contrôle si des actions supplémentaires sont affichées dans une liste déroulante à côté du bouton Exécuter.
	"notebook.consolidatedRunButton": false,
	// Indique s'il est nécessaire d'utiliser l'éditeur de différences de texte pour le notebook.
	"notebook.diff.enablePreview": true,
	// Masquer les différences de métadonnées
	"notebook.diff.ignoreMetadata": false,
	// Masquer les différences de sorties
	"notebook.diff.ignoreOutputs": false,
	// Liste de priorités des types mime de sortie
	"notebook.displayOrder": [],
	// Détermine si l’éditeur de blocs-notes doit autoriser les cellules à déplacer des cellules par glisser-déplacer.
	"notebook.dragAndDropEnabled": true,
	// Paramètres des éditeurs de code utilisés dans les blocs-notes. Ils peuvent être utilisés pour personnaliser la plupart des paramètres editor.*.
	"notebook.editorOptionsCustomizations": {},
	// Détermine si une barre d’outils globale doit être rendue dans l’éditeur de blocs-notes.
	"notebook.globalToolbar": true,
	// Contrôle si les actions de la barre d’outils du bloc-notes doivent afficher l’étiquette ou non.
	"notebook.globalToolbarShowLabel": "always",
	// Contrôlez l’emplacement d’affichage des actions de cellule d’insertion.
	//  - betweenCells: Barre d’outils qui apparaît lors du pointage entre les cellules.
	//  - notebookToolbar: Barre d’outils en haut de l’éditeur de blocs-notes.
	//  - both: Les deux barres d’outils.
	//  - hidden: Les actions d’insertion n’apparaissent nulle part.
	"notebook.insertToolbarLocation": "both",
	// Contrôle l’affichage des numéros de ligne dans l’éditeur de cellule.
	"notebook.lineNumbers": "off",
	// Contrôle la taille de police en pixels du balisage rendu dans les notebooks. Lorsqu’il est défini sur `0`, 120 % des `editor.fontSize` sont utilisés.
	"notebook.markup.fontSize": 0,
	// Lorsque cette option est activée, le curseur peut accéder à la cellule suivante/précédente lorsque le curseur actuel de l’éditeur de cellules se trouve à la première/dernière ligne.
	"notebook.navigation.allowNavigateToSurroundingCells": true,
	// Quand la fonctionnalité de contour est activée dans le notebook, elle permet d'afficher les cellules de code.
	"notebook.outline.showCodeCells": false,
	// Contrôlez le nombre de lignes de texte qui sont rendues dans une sortie texte.
	"notebook.output.textLineLimit": 30,
	// Famille de polices pour le texte de sortie des cellules du bloc-notes. Lorsqu’il est défini sur vide, le `editor.fontFamily` est utilisé.
	"notebook.outputFontFamily": "",
	// Taille de police du texte de sortie pour les cellules du bloc-notes. Lorsqu’il est défini sur `0`, `editor.fontSize` est utilisé.
	"notebook.outputFontSize": 0,
	// Hauteur de ligne du texte de sortie pour les cellules du bloc-notes.
	//  : les valeurs comprises entre 0 et 8 sont utilisées comme multiplicateur avec la taille de police.
	//  : les valeurs supérieures ou égales à 8 seront utilisées comme valeurs effectives.
	"notebook.outputLineHeight": 22,
	// Indique si la barre d'état de la cellule doit être affichée.
	//  - hidden: La barre d’état de la cellule est toujours masquée.
	//  - visible: La barre d’état de la cellule est toujours visible.
	//  - visibleAfterExecute: La barre d’état de la cellule est masquée jusqu’à ce que la cellule soit exécutée. Ensuite, elle devient visible et affiche l’état d’exécution.
	"notebook.showCellStatusBar": "visible",
	// Contrôle l’affichage de la Flèche de pliage de l’en-tête de démarque.
	//  - always: Les contrôles de pliage sont toujours visibles.
	//  - never: N’affichez jamais les contrôles de pliage et réduisez la taille de la marge.
	//  - mouseover: Les contrôles de pliage sont visibles uniquement lors du basculement de souris.
	"notebook.showFoldingControls": "mouseover",
	// Indique si une pile d’annulation/rétablissement distincte doit exister pour chaque cellule.
	"notebook.undoRedoPerCell": true,
	// Si activé, les convertisseurs lents sont automatiquement profilés
	"application.experimental.rendererProfiling": false,
	// Faites défiler automatiquement la fenêtre interactive pour afficher la sortie de la dernière instruction exécutée. Si cette valeur est false, la fenêtre défile uniquement si la dernière cellule était déjà celle vers laquelle l’utilisateur a fait défiler.
	"interactiveWindow.alwaysScrollOnNewCell": true,
	// Contrôle si les sessions/l’historique de la fenêtre interactive doivent être restaurés entre les rechargements de fenêtre. Si l’état des contrôleurs utilisés dans Windows interactif est conservé entre les rechargements de fenêtres est contrôlé par les extensions contribuant aux contrôleurs.
	"interactiveWindow.restore": false,
	// Specifies whether to show avatar images in the file blame annotations
	"gitlens.blame.avatars": true,
	// Specifies whether to compact (deduplicate) matching adjacent file blame annotations
	"gitlens.blame.compact": true,
	// Specifies how to format absolute dates (e.g. using the `${date}` token) in file blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.blame.dateFormat": null,
	// Specifies the format of the file blame annotations. See [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",
	// Specifies whether to provide a heatmap indicator in the file blame annotations
	"gitlens.blame.heatmap.enabled": true,
	// Specifies where the heatmap indicators will be shown in the file blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the file blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the file blame annotations
	"gitlens.blame.heatmap.location": "right",
	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,
	// Specifies where the associated line highlights will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],
	// Specifies whether file blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,
	// Specifies how the file blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",
	// Activez les tâches automatiques dans le dossier. Notez que les tâches ne s’exécutent pas dans un espace de travail non approuvé.
	//  - on: Toujours
	//  - auto: Demander l’autorisation pour chaque dossier
	//  - off: Jamais
	"task.allowAutomaticTasks": "auto",
	// Contrôle l'application de 'provideTasks' pour toutes les extensions du fournisseur de tâches. Si la commande Tâches : Exécuter la tâche est lente, la désactivation de la détection automatique des fournisseurs de tâches peut être utile. Les extensions individuelles peuvent également fournir des paramètres qui désactivent la détection automatique.
	"task.autoDetect": "on",
	// Configure s'il faut afficher l'invite du détecteur de problèmes de correspondance pendant l'exécution d'une tâche. Définissez le paramètre sur 'true' pour ne jamais afficher d'invite ou utilisez un dictionnaire de types de tâche pour désactiver les invites seulement pour des types de tâches spécifiques.
	"task.problemMatchers.neverPrompt": false,
	// Détermine si le détail de la tâche doit être affiché pour les tâches qui comportent un détail dans les sélections rapides de tâches, par exemple Exécuter la tâche.
	"task.quickOpen.detail": true,
	// Contrôle le nombre d'éléments récents suivis dans la boîte de dialogue d'ouverture rapide de tâche.
	"task.quickOpen.history": 30,
	// Force la commande Tâches : exécuter la tâche à utiliser le comportement "tout afficher" (plus lent) à la place du sélecteur à deux niveaux (plus rapide), où les tâches sont regroupées par fournisseur.
	"task.quickOpen.showAll": false,
	// Contrôle si la recherche rapide de tâche est ignorée quand il n'y a qu'une seule tâche.
	"task.quickOpen.skip": false,
	// Lors du rechargement de la fenêtre, reconnectez-vous aux tâches qui présentent des détecteurs de problèmes de correspondance.
	"task.reconnection": true,
	// Enregistrez tous les éditeurs comportant des modifications avant d'exécuter une tâche.
	//  - always: Enregistre toujours tous les éditeurs avant l'exécution d'une tâche.
	//  - never: N'enregistre jamais les éditeurs avant l'exécution d'une tâche.
	//  - prompt: Invite à enregistrer le contenu des éditeurs avant l'exécution d'une tâche.
	"task.saveBeforeRun": "always",
	// Affiche les décorations aux points d’intérêt dans la mémoire tampon du terminal, comme le premier problème détecté via une tâche espion. Notez que cette opération ne prendra effet que pour les tâches futures. `terminal.integrated.shellIntegration.decorationsEnabled` aura la priorité sur ce paramètre.
	"task.showDecorations": true,
	// Configure si un avertissement est affiché quand un fournisseur est lent
	"task.slowProviderWarning": true,
	// Lors de l'ouverture d'un fichier depuis l'explorateur dans un terminal, détermine le type de terminal qui sera lancé.
	//  - integrated: Utiliser le terminal intégré de VS Code.
	//  - external: Utiliser le terminal externe configuré.
	"terminal.explorerKind": "integrated",
	// Personnalise le terminal à exécuter sur Linux.
	"terminal.external.linuxExec": "xterm",
	// Personnalise l’application de terminal à exécuter sur macOS.
	"terminal.external.osxExec": "Terminal.app",
	// Personnalise le terminal à exécuter sur Windows.
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",
	// Indique s’il faut autoriser ou non les combinaisons de touches d’une combinaison de touches dans le terminal. Notez que lorsque cela est vrai et que la frappe entraîne une pression, elle contourne `terminal.integrated.commandsToSkipShell`, la définition de la valeur false est particulièrement utile lorsque vous souhaitez que ctrl+k accède à votre interpréteur de commandes (pas VS Code).
	"terminal.integrated.allowChords": true,
	// Indique si les mnémoniques de barre de menus (par exemple alt+f) sont autorisées à déclencher l'ouverture de la barre de menus. Notez que si la valeur est true, toutes les frappes de la touche alt ignorent l'interpréteur de commandes. Cela n'a aucun effet sur macOS.
	"terminal.integrated.allowMnemonics": false,
	// Si cette option est activée, alt/option + clic repositionne le curseur d’invite sous la souris lorsque `editor.multiCursorModifier` est défini sur `'alt'` (valeur par défaut). Cela peut ne pas fonctionner de manière fiable en fonction de votre interpréteur de commandes.
	"terminal.integrated.altClickMovesCursor": true,
	// Le profil de terminal à utiliser sous Linux pour une utilisation de terminal liée à l’automatisation, comme les tâches et le débogage. Ce paramètre sera actuellement ignoré si `terminal.integrated.automationShell.linux` (maintenant déconseillé) est défini.
	"terminal.integrated.automationProfile.linux": null,
	// Le profil de terminal à utiliser sous macOS pour une utilisation de terminal liée à l’automatisation, comme les tâches et le débogage. Ce paramètre sera actuellement ignoré si `terminal.integrated.automationShell.osx` (maintenant déconseillé) est défini.
	"terminal.integrated.automationProfile.osx": null,
	// Le profil de terminal à utiliser pour une utilisation de terminal liée à l’automatisation, comme les tâches et le débogage. Ce paramètre sera actuellement ignoré si `terminal.integrated.automationShell.windows` (maintenant déconseillé) est défini.
	"terminal.integrated.automationProfile.windows": null,
	// Ceci est obsolète, la nouvelle méthode recommandée pour configurer votre shell d'automatisation consiste à créer un profil d'automatisation de terminal avec `terminal.integrated.automationProfile.linux`. Cela aura actuellement la priorité sur les nouveaux paramètres de profil d'automatisation, mais cela changera à l'avenir.
	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.linux` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.linux": null,
	// Ceci est obsolète, la nouvelle méthode recommandée pour configurer votre shell d'automatisation consiste à créer un profil d'automatisation de terminal avec `terminal.integrated.automationProfile.osx`. Cela aura actuellement la priorité sur les nouveaux paramètres de profil d'automatisation, mais cela changera à l'avenir.
	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.osx` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.osx": null,
	// Ceci est obsolète, la nouvelle méthode recommandée pour configurer votre shell d'automatisation consiste à créer un profil d'automatisation de terminal avec `terminal.integrated.automationProfile.windows`. Cela aura actuellement la priorité sur les nouveaux paramètres de profil d'automatisation, mais cela changera à l'avenir.
	// Chemin qui, une fois défini, substitue `terminal.integrated.shell.windows` et ignore les valeurs de `shellArgs` pour permettre une utilisation du terminal basée sur l'automatisation, par exemple dans le cas des tâches et du débogage.
	"terminal.integrated.automationShell.windows": null,
	// Ensemble de messages qui, lorsqu’ils sont rencontrés dans le terminal, feront l’objet d’une réponse automatique. À condition que le message soit suffisamment spécifique, cela peut aider à automatiser les réponses courantes.
	// 
	// Remarques :
	// 
	// – Utilisez `"Terminate batch job (Y/N)": "Y\r"` pour répondre automatiquement à l’invite de fin de traitement par lots sur Windows.
	// – Le message inclut des séquences d’échappement afin que la réponse ne se produise pas avec du texte de style.
	// – Chaque réponse ne peut se produire qu’une fois par seconde.
	// – Utilisez `"\r"` dans la réponse pour indiquer la clé Entrée.
	// – Pour annuler la définition d’une clé par défaut, définissez la valeur sur nul.
	// – Redémarrez VS Code si le nouveau ne s’applique pas.
	"terminal.integrated.autoReplies": {},
	// Nombre de millisecondes d’affichage la cloche d’appel dans un onglet de terminal lors de son déclenchement.
	"terminal.integrated.bellDuration": 1000,
	// Ensemble d’ID de commandes dont les combinaisons de touches ne sont pas envoyées à l’interpréteur de commandes mais sont toujours prises en charge par VS Code. Cela permet aux combinaisons de touches qui sont normalement consommées par l’interpréteur de commandes de produire le même résultat que dans une situation où le terminal n’a pas le focus, par exemple `Ctrl+P` pour lancer Quick Open.
	// 
	// 
	// 
	// De nombreuses commandes sont ignorées par défaut. Pour remplacer une valeur par défaut et passer la combinaison de touches de cette commande à l’interpréteur de commandes, ajoutez la commande précédée du caractère `-`. Par exemple, ajoutez `-workbench.action.quickOpen` pour autoriser la combinaison `Ctrl+P` à atteindre l’interpréteur de commandes.
	// 
	// 
	// 
	// La liste suivante des commandes ignorées par défaut est tronquée quand elle est affichée dans l’éditeur de paramètres. Pour voir la liste complète, [ouvrir le JSON des paramètres par défaut](command:workbench.action.openRawDefaultSettings 'Ouvrir les paramètres par défaut (JSON)') puis recherchez la première commande dans la liste ci-dessous.
	// 
	// &nbsp;
	// 
	// Commandes ignorées par défaut´:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.quickFix
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],
	// Détermine s'il est nécessaire de confirmer à la fermeture de la fenêtre s’il existe de sessions de terminal actives.
	//  - never: Ne jamais confirmer.
	//  - always: Confirmez toujours l’existence de terminaux.
	//  - hasChildProcesses: Confirmez s’il existe des terminaux qui ont des processus enfants.
	"terminal.integrated.confirmOnExit": "never",
	// Contrôle la confirmation ou non de la mise à mort des terminaux lorsqu'ils ont des processus enfants. Lorsqu'il est défini sur éditeur, les terminaux dans la zone de l'éditeur seront marqués comme modifiés lorsqu'ils ont des processus enfants. Notez que la détection des processus enfants peut ne pas fonctionner correctement pour les shells comme Git Bash qui n'exécutent pas leurs processus en tant que processus enfants du shell.
	//  - never: Ne jamais confirmer.
	//  - editor: Confirmez si le terminal se trouve dans l’éditeur.
	//  - panel: Confirmez si le terminal se trouve dans le panneau.
	//  - always: Confirmez si le terminal est se trouve dans l’éditeur ou le panneau.
	"terminal.integrated.confirmOnKill": "editor",
	// Détermine si le texte sélectionné dans le terminal doit être copié dans le Presse-papiers.
	"terminal.integrated.copyOnSelection": false,
	// Détermine si le curseur du terminal doit clignoter.
	"terminal.integrated.cursorBlinking": false,
	// Contrôle le style du curseur du terminal.
	"terminal.integrated.cursorStyle": "block",
	// Contrôle la largeur du curseur lorsque `terminal.integrated.cursorStyle` est défini sur `line`.
	"terminal.integrated.cursorWidth": 1,
	// Indique s’il faut dessiner les glyphes personnalisés pour les caractères de dessin de zone et d’élément de bloc plutôt que d’utiliser la police, ce qui améliore généralement le rendu avec des lignes continues. Notez que cela ne fonctionne pas avec le convertisseur DOM.
	"terminal.integrated.customGlyphs": true,
	// Chemin explicite de lancement du terminal. Il est utilisé en tant que répertoire de travail actif du processus d'interpréteur de commandes. Cela peut être particulièrement utile dans les paramètres d'espace de travail, si le répertoire racine n'est pas un répertoire de travail actif adéquat.
	"terminal.integrated.cwd": "",
	// Contrôle l’emplacement où s’affichent les nouveaux terminaux créés.
	//  - editor: Créer des terminaux dans l’éditeur
	//  - view: Créer des terminaux dans l’affichage terminal
	"terminal.integrated.defaultLocation": "view",
	// Profil par défaut à utiliser sur Linux. Ce paramètre est ignoré si `terminal.integrated.shell.linux` ou `terminal.integrated.shellArgs.linux` sont définis.
	"terminal.integrated.defaultProfile.linux": null,
	// Profil par défaut à utiliser sur macOS. Ce paramètre est ignoré si `terminal.integrated.shell.osx` ou `terminal.integrated.shellArgs.osx` sont définis.
	//  - null: Détecter automatiquement la valeur par défaut
	//  - bash: $(terminal-bash) bash
	// - path: /bin/bash
	// - args: ['-l']
	//  - csh: $(terminal) csh
	// - path: /bin/csh
	//  - dash: $(terminal) dash
	// - path: /bin/dash
	//  - ksh: $(terminal) ksh
	// - path: /bin/ksh
	//  - sh: $(terminal) sh
	// - path: /bin/sh
	//  - tcsh: $(terminal) tcsh
	// - path: /bin/tcsh
	//  - zsh: $(terminal) zsh
	// - path: /bin/zsh
	// - args: ['-l']
	//  - bash (migrated): $(terminal) bash (migrated)
	// - path: /bin/bash
	// - args: ['-l']
	//  - Terminal de débogage de JavaScript: $($(debug)) Terminal de débogage de JavaScript
	// - extensionIdentifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.osx": null,
	// Profil par défaut à utiliser sur Windows. Ce paramètre est ignoré si `terminal.integrated.shell.windows` ou `terminal.integrated.shellArgs.windows` sont définis.
	"terminal.integrated.defaultProfile.windows": null,
	// Détermine s'il est nécessaire de détecter la variable d'environnement '$LANG' et de lui affecter une option conforme à UTF-8 dans la mesure où le terminal de VS Code prend uniquement en charge les données encodées au format UTF-8 provenant de l'interpréteur de commandes.
	//  - auto: Définissez la variable d'environnement '$LANG' si la variable existante est manquante, ou si elle ne finit pas par '.UTF-8'.
	//  - off: Ne définissez pas la variable d'environnement '$LANG'.
	//  - on: Définissez toujours la variable d'environnement '$LANG'.
	"terminal.integrated.detectLocale": "auto",
	// Détermine si le texte en gras dans le terminal doit toujours utiliser la variante de couleur ANSI "bright".
	"terminal.integrated.drawBoldTextInBrightColors": true,
	// Contrôle si la cloche du terminal est activée. Elle s’affiche sous la forme d’une cloche près du nom du terminal.
	"terminal.integrated.enableBell": false,
	// Indique si les liens de fichiers doivent être activés dans le terminal. Les liens peuvent être lents quand vous travaillez sur un lecteur réseau, car chaque lien de fichier est vérifié par rapport au système de fichiers. Le changement de cette option ne prend effet que sur les nouveaux terminaux.
	"terminal.integrated.enableFileLinks": true,
	// Afficher une boîte de dialogue d’avertissement lors du collage de plusieurs lignes dans le terminal. La boîte de dialogue ne s’affiche pas quand :
	// 
	// - Le mode collage entre crochets est activé (l’interpréteur de commandes prend en charge le collage multiligne en mode natif)
	// - Le collage est géré par la ligne de lecture de l’interpréteur de commandes (dans le cas de pwsh)
	"terminal.integrated.enableMultiLinePasteWarning": true,
	// Permet la persistance des sessions/historiques de terminal de l'espace de travail entre les rechargements de fenêtres.
	"terminal.integrated.enablePersistentSessions": true,
	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur Linux. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.linux": {},
	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur macOS. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.osx": {},
	// Objet et variables d'environnement ajoutés au processus de VS Code pour être utilisés par le terminal sur Windows. Affectez la valeur 'null' pour supprimer la variable d'environnement.
	"terminal.integrated.env.windows": {},
	// Indique s'il est nécessaire d'afficher l'indicateur des changements apportés à un environnement sur chaque terminal. Cet indicateur précise si des extensions ont été effectuées, ou si vous souhaitez apporter des changements à l'environnement du terminal.
	//  - off: Désactivez l'indicateur.
	//  - on: Activez l'indicateur.
	//  - warnonly: Affiche uniquement l'indicateur d'avertissement qui montre que l'environnement d'un terminal est 'obsolète'. N'affiche pas l'indicateur d'information qui montre que l'environnement d'un terminal a été modifié par une extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",
	// Indique si les terminaux doivent être relancés automatiquement quand l'extension souhaite contribuer à son environnement et qu'aucune interaction n'a eu lieu jusqu'à maintenant.
	"terminal.integrated.environmentChangesRelaunch": true,
	// Multiplicateur de vitesse de défilement quand la touche Alt est enfoncée.
	"terminal.integrated.fastScrollSensitivity": 5,
	// Contrôle la famille de polices du terminal. La valeur par défaut est la valeur de `editor.fontFamily`.
	"terminal.integrated.fontFamily": "",
	// Contrôle la taille de police en pixels du terminal.
	"terminal.integrated.fontSize": 12,
	// Épaisseur de police à utiliser dans le terminal pour le texte qui n'est pas en gras. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"terminal.integrated.fontWeight": "normal",
	// Épaisseur de police à utiliser dans le terminal pour le texte qui est en gras. Accepte les mots clés "normal" et "bold", ou les nombres compris entre 1 et 1 000.
	"terminal.integrated.fontWeightBold": "bold",
	// Contrôle si le terminal utilise le GPU pour son affichage.
	//  - auto: Laisse VS Code détecter le renderer qui offre la meilleure expérience.
	//  - on: Active l'accélération GPU dans le terminal.
	//  - off: Désactivez l’accélération GPU dans le terminal. Le terminal s’affiche beaucoup plus lentement lorsque l’accélération GPU est désactivée, mais il doit fonctionner de manière fiable sur tous les systèmes.
	//  - canvas: Utilisez le générateur de rendu de toile de secours du terminal, qui utilise un contexte 2d au lieu de webgl, ce qui peut être plus performant sur certains systèmes. Notez que certaines fonctionnalités sont limitées dans le moteur de rendu de toile, comme la sélection opaque.
	"terminal.integrated.gpuAcceleration": "auto",
	// Ensemble de noms de processus à ignorer lors de l’utilisation du paramètre `terminal.integrated.confirmOnKill`.
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],
	// Indique si les nouveaux interpréteurs de commandes doivent hériter leur environnement de VS Code, qui peut sourcer un interpréteur de connexion pour garantir l’initialisation de $PATH et d’autres variables de développement. Cela n’a aucun effet sur Windows.
	"terminal.integrated.inheritEnv": true,
	// Contrôle l'espacement des lettres du terminal. Il s'agit d'une valeur entière qui représente le nombre de pixels supplémentaires à ajouter entre les caractères.
	"terminal.integrated.letterSpacing": 0,
	// Contrôle la hauteur de ligne du terminal. Ce nombre est multiplié par la taille de police du terminal pour obtenir la hauteur de ligne réelle en pixels.
	"terminal.integrated.lineHeight": 1,
	// Quand l’écho local doit être activé. Cela remplacera `terminal.integrated.localEchoLatencyThreshold`
	//  - on: Toujours activé
	//  - off: Toujours désactivé
	//  - auto: Activé uniquement pour les espaces de travail distants
	"terminal.integrated.localEchoEnabled": "auto",
	// L'écho local sera désactivé si l'un de ces noms de programmes est trouvé dans le titre du terminal.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],
	// Durée du retard réseau, en millisecondes, pendant lequel les modifications locales sont répercutées sur le terminal sans attendre la reconnaissance du serveur. Si la valeur est '0', l'écho local sera toujours activé, si la valeur est '-1', il sera désactivé.
	"terminal.integrated.localEchoLatencyThreshold": 30,
	// Style du texte répercuté localement dans le terminal : style de police ou couleur RVB.
	"terminal.integrated.localEchoStyle": "dim",
	// Détermine si la sélection doit être forcée quand Option+clic est utilisé sur macOS. Cela permet de forcer une sélection normale (ligne) et d'interdire l'utilisation du mode de sélection de colonne. Cela permet de copier et de coller à l'aide de la sélection de terminal classique, par exemple, quand le mode souris est activé dans tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,
	// Détermine s'il est nécessaire de traiter la clé d'option en tant que touche Méta dans le terminal sur macOS.
	"terminal.integrated.macOptionIsMeta": false,
	// Lorsqu'elle est définie, la couleur de premier plan de chaque cellule change pour tenter de respecter le rapport de contraste spécifié. Notez que cela ne s'appliquera pas aux caractères de type `powerline`, conformément à la règle #146406.Exemples de valeurs : 
	// 
	//  - 1 : Ne rien faire et utiliser les couleurs standard du thème. 
	// - 4.5 : [Conformité WCAG AA (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (valeur par défaut). 
	// - 7 : [Conformité WCAG AAA (améliorée)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html). 
	// - 21 : blanc sur noir ou noir sur blanc.
	"terminal.integrated.minimumContrastRatio": 4.5,
	// Multiplicateur à utiliser sur le 'deltaY' des événements de défilement de la roulette de la souris.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,
	// Lorsque le processus du terminal doit être arrêté (par exemple, à la fermeture d'une fenêtre ou d'une application), cela détermine le moment où le contenu/l’historique de la session précédente du terminal doit être restauré et les processus doivent être recréés lors de l’ouverture suivante de l'espace de travail. 
	// 
	// Avertissements :
	// 
	//  – La restauration du répertoire de travail actuel du processus dépend de sa prise en charge par le shell. 
	// – Le temps de persistance de la session pendant l'arrêt est limité, de sorte qu'elle peut être interrompue lors de l'utilisation de connexions distantes à forte latence.
	//  - onExit: Réessayez les processus après la fermeture de la dernière fenêtre sur Windows/Linux ou lorsque la commande « workbench.action.quit » est déclenchée (palette de commandes, combinaison de touches, menu).
	//  - onExitAndWindowClose: Réessayez les processus après la fermeture de la dernière fenêtre sur Windows/Linux ou lorsque la commande « workbench.action.quit » est déclenchée (palette de commandes, combinaison de touches, menu) ou lorsque la fenêtre est fermée.
	//  - never: Ne restaurez jamais les mémoires tampons du terminal ou recréez le processus.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",
	// Contrôle le nombre maximal de lignes qui seront restaurées lors de la reconnexion à une session terminale persistante. L’augmentation de cette opération permet de restaurer plus de lignes de scrollback au prix d’une mémoire supérieure et d’augmenter le temps nécessaire pour se connecter aux terminaux lors du démarrage. Ce paramètre nécessite un redémarrage pour prendre effet et doit être défini sur une valeur inférieure ou égale à' #terminal. Integrated. scrollback # '.
	"terminal.integrated.persistentSessionScrollback": 100,
	// Profils Linux à présenter lors de la création d’un terminal via la liste déroulante du terminal. Définissez manuellement la propriété `path` avec une `args` facultative.
	// 
	// Définissez un profil existant sur `null` pour masquer le profil dans la liste, par exemple : `"bash": null`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},
	// Profils macOS à présenter lors de la création d’un terminal via la liste déroulante du terminal. Définissez manuellement la propriété `path` avec une `args` facultative.
	// 
	// Définissez un profil existant sur `null` pour masquer le profil dans la liste, par exemple : `"bash": null`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},
	// Les profils Windows à présenter lors de la création d'un nouveau terminal via la liste déroulante des terminaux. Utilisez cette propriété pour détecter `source`automatiquement l'emplacement du shell. Vous pouvez également définir la `path`propriété manuellement avec un paramètre facultatif `args`. 
	// 
	// Définissez un profil existant sur `null` pour masquer le profil de la liste, par exemple : `"Ubuntu-20.04 (WSL)": null`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},
	// Contrôle la façon dont le terminal réagit au clic droit.
	//  - default: Affiche le menu contextuel.
	//  - copyPaste: Effectue une copie quand il existe une sélection, sinon effectue un collage.
	//  - paste: Effectue un collage à la suite d'un clic droit.
	//  - selectWord: Sélectionne le mot sous le curseur et affiche le menu contextuel.
	//  - nothing: Ne rien faire et transmettre l’événement au terminal.
	"terminal.integrated.rightClickBehavior": "selectWord",
	// Contrôle le nombre maximal de lignes que le terminal conserve dans sa mémoire tampon.
	"terminal.integrated.scrollback": 1000,
	// Distribue la plupart des combinaisons de touches au terminal au lieu de workbench, en remplaçant `terminal.integrated.commandsToSkipShell`, qui peut être utilisé à des fins d’optimisation.
	"terminal.integrated.sendKeybindingsToShell": false,
	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.linux#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.linux`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur Linux. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profil de terminal).
	"terminal.integrated.shell.linux": null,
	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.osx#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.osx`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur macOS. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profil de terminal).
	"terminal.integrated.shell.osx": null,
	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.windows#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.windows`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Chemin de l'interpréteur de commandes utilisé par le terminal sur Windows. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profil de terminal).
	"terminal.integrated.shell.windows": null,
	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.linux#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.linux`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal Linux. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profils de terminal).
	"terminal.integrated.shellArgs.linux": [],
	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.osx#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.osx`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal macOS. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profils de terminal).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],
	// Déprécié, la nouvelle méthode recommandée pour configurer votre interpréteur de commandes par défaut consiste à créer un profil de terminal dans `terminal.integrated.profiles.windows#` et à définir son nom de profil comme valeur par défaut dans `#terminal.integrated.defaultProfile.windows`. Cela prend la priorité sur les nouveaux paramètres de profil, mais ce comportement sera sujet à changement dans le futur.
	// Arguments de ligne de commande à utiliser sur le terminal Windows. [En savoir plus sur la configuration de l'interpréteur de commandes](https://code.visualstudio.com/docs/editor/integrated-terminal#_profils de terminal).
	"terminal.integrated.shellArgs.windows": [],
	// Lorsque l’intégration de l’interpréteur de commandes est activée, ajoute une décoration pour chaque commande.
	//  - both: Afficher les décorations dans la reliure (gauche) et la règle de vue d’ensemble (droite)
	//  - gutter: Afficher les décorations de reliure à gauche du terminal
	//  - overviewRuler: Afficher les décorations de règle de vue d’ensemble à droite du terminal
	//  - never: Ne pas afficher les décorations
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",
	// Détermine si l’intégration de l’interpréteur de commandes est injectée automatiquement pour prendre en charge des fonctionnalités telles que le suivi de commandes amélioré et la détection actuelle du répertoire de travail. 
	// 
	// 'intégration de Shell fonctionne en injectant l’interpréteur de commandes avec un script de démarrage. Le script fournit VS Code insights sur ce qui se passe dans le terminal.
	// 
	// shells pris en charge :
	// 
	// - Linux/macOS : bash, pwsh, zsh
	//  - Windows : pwsh
	// 
	// Ce paramètre s’applique uniquement lorsque des terminaux sont créés. Vous devez donc redémarrer vos terminaux pour qu’ils prennent effet.
	// 
	//  Notez que l’injection de script peut ne pas fonctionner si vous avez des arguments personnalisés définis dans le profil de terminal, un [bash complexe 'PROMPT_COMMAND'](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand) ou une autre configuration non prise en charge. Pour désactiver les décorations, consultez `terminal.integrated.shellIntegrations.decorationsEnabled`
	"terminal.integrated.shellIntegration.enabled": true,
	// Contrôle le nombre de commandes récemment utilisées à conserver dans l’historique des commandes du terminal. Réglez sur 0 pour désactiver l’historique des commandes du terminal.
	"terminal.integrated.shellIntegration.history": 100,
	// Détermine s'il est nécessaire d'afficher l'alerte "Le processus du terminal s'est achevé avec le code de sortie" quand le code de sortie est différent de zéro.
	"terminal.integrated.showExitAlert": true,
	// Indique s’il faut afficher les pointages pour les liens dans la sortie du terminal.
	"terminal.integrated.showLinkHover": true,
	// Contrôle si le terminal défile en utilisant une animation.
	"terminal.integrated.smoothScrolling": false,
	// Contrôle le répertoire de travail dans lequel un terminal divisé démarre.
	//  - workspaceRoot: Un nouveau terminal divisé utilise la racine de l'espace de travail en tant que répertoire de travail. Dans un espace de travail multiracine, vous pouvez choisir le dossier racine à utiliser.
	//  - initial: Un nouveau terminal divisé utilise le répertoire de travail dans lequel le terminal parent a démarré.
	//  - inherited: Sur macOS et Linux, un nouveau terminal divisé utilise le répertoire de travail du terminal parent. Sur Windows, le comportement est le même qu'avec le paramètre initial.
	"terminal.integrated.splitCwd": "inherited",
	// ID de couleur de thème à associer aux icônes de terminal par défaut.
	"terminal.integrated.tabs.defaultColor": null,
	// ID de codicon à associer aux icônes de terminal par défaut.
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - drop-down-button: $(drop-down-button)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle: $(circle)
	//  - circle-outline: $(circle-outline)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - compare-changes: $(compare-changes)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-closed: $(issue-closed)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - debug-alt: $(debug-alt)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-filled: $(map-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	"terminal.integrated.tabs.defaultIcon": "terminal",
	// Contrôle la description du terminal, qui apparaît à droite du titre. Les variables sont remplacées en fonction du contexte :
	// - `${cwd}`: répertoire de travail actuel du terminal
	// - `${cwdFolder}`: le répertoire de travail actuel du terminal, affiché pour les espaces de travail multi-racines ou dans un espace de travail à racine unique lorsque la valeur diffère du répertoire de travail initial. Sous Windows, ce paramètre ne s'affiche que si l'intégration du shell est activée.
	// - `${workspaceFolder}`: l’espace de travail dans lequel le terminal a été lancé.
	// - `${local}`: indique un terminal local dans un espace de travail distant
	// - `${process}`: nom du processus terminal
	// - `${separator}`: un séparateur conditionnel ("-") qui apparaît uniquement quand il est entouré de variables avec des valeurs ou du texte statique.
	// - `${sequence}`: nom fourni au terminal par le processus
	// - `${task}`: indique que ce terminal est associé à une tâche
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
	// Contrôle si les états de l’onglet terminal prennent en charge l’animation (tâches en cours d’exécution).
	"terminal.integrated.tabs.enableAnimation": true,
	// Contrôle si les onglets de terminal s’affichent en tant que liste sur le côté du terminal. Quand cette option est désactivée, une liste déroulante s’affiche à la place.
	"terminal.integrated.tabs.enabled": true,
	// Contrôle si le focus sur le terminal d’un onglet se produit par un clic ou un double-clic.
	//  - singleClick: Mettre le focus sur le terminal au clic sur l’onglet d’un terminal
	//  - doubleClick: Mettre le focus sur le terminal au double-clic sur l’onglet d’un terminal
	"terminal.integrated.tabs.focusMode": "doubleClick",
	// Contrôle si l’affichage des onglets du terminal est masqué sous certaines conditions.
	//  - never: Ne jamais masquer l’affichage des onglets du terminal
	//  - singleTerminal: Masquer l’affichage des onglets de terminaux quand un seul terminal est ouvert
	//  - singleGroup: Masquer l’affichage des onglets de terminaux quand un seul groupe de terminaux est ouvert
	"terminal.integrated.tabs.hideCondition": "singleTerminal",
	// Contrôle l’emplacement des onglets du terminal, à gauche ou à droite du ou des terminaux réels.
	//  - left: Afficher l’affichage des onglets de terminaux à gauche du terminal
	//  - right: Afficher l’affichage des onglets de terminaux à droite du terminal
	"terminal.integrated.tabs.location": "right",
	// Séparateur utilisé par `terminal.integrated.tabs.title` et `terminal.integrated.tabs.title`.
	"terminal.integrated.tabs.separator": " - ",
	// Contrôle si les boutons de fractionnement et de suppression de terminal sont affichés en regard du nouveau bouton de terminal.
	//  - always: Toujours afficher les actions
	//  - singleTerminal: Afficher les actions lorsqu’il s’agit du seul terminal ouvert
	//  - singleTerminalOrNarrow: Afficher les actions lorsqu'il s'agit du seul terminal ouvert ou lorsque l'affichage des onglets est dans son état étroit sans texte.
	//  - never: Ne jamais afficher les actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",
	// Affiche les informations sur le terminal actif dans l’affichage. Cet élément est particulièrement utile lorsque le titre n’est pas visible dans les onglets.
	//  - always: Toujours afficher le terminal actif
	//  - singleTerminal: Afficher le terminal actif quand il est le seul terminal ouvert
	//  - singleTerminalOrNarrow: Afficher le terminal actif quand il est le seul terminal ouvert ou lorsque l’affichage des onglets est dans l’état d’affichage étroit et sans texte
	//  - never: Ne jamais afficher le terminal actif
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
	// Contrôle le titre du terminal. Les variables sont remplacées en fonction du contexte :
	// - `${cwd}`: répertoire de travail actuel du terminal
	// - `${cwdFolder}`: le répertoire de travail actuel du terminal, affiché pour les espaces de travail multi-racines ou dans un espace de travail à racine unique lorsque la valeur diffère du répertoire de travail initial. Sous Windows, ce paramètre ne s'affiche que si l'intégration du shell est activée.
	// - `${workspaceFolder}`: l’espace de travail dans lequel le terminal a été lancé.
	// - `${local}`: indique un terminal local dans un espace de travail distant
	// - `${process}`: nom du processus terminal
	// - `${separator}`: un séparateur conditionnel ("-") qui apparaît uniquement quand il est entouré de variables avec des valeurs ou du texte statique.
	// - `${sequence}`: nom fourni au terminal par le processus
	// - `${task}`: indique que ce terminal est associé à une tâche
	"terminal.integrated.tabs.title": "${process}",
	// Contrôle la version d'Unicode à utiliser au moment de l'évaluation de la largeur des caractères dans le terminal. Si vous êtes confronté à des emojis ou d'autres caractères larges qui n'occupent pas la quantité appropriée (trop ou trop peu) d'espaces avant ou arrière, vous pouvez essayer d'adapter ce paramètre.
	//  - 6: Version 6 de l'Unicode. Il s'agit d'une version antérieure qui doit mieux fonctionner sur les anciens systèmes.
	//  - 11: Version 11 de l'Unicode. Cette version offre une meilleure prise en charge sur les systèmes modernes qui utilisent des versions modernes de l'Unicode.
	"terminal.integrated.unicodeVersion": "11",
	// Contrôle si les distributions WSL sont affichées ou non dans la liste déroulante de terminal
	"terminal.integrated.useWslProfiles": true,
	// Indique si ConPTY doit être utilisé pour la communication des processus du terminal Windows (nécessite Windows 10 build 18309+). Winpty est utilisé si ce paramètre a la valeur false.
	"terminal.integrated.windowsEnableConpty": true,
	// Chaîne contenant tous les caractères à considérer en tant que séparateurs de mots quand le double-clic est utilisé pour sélectionner un mot.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",
	// Contrôle si la vue Problèmes devrait afficher automatiquement les fichiers lors de leur ouverture.
	"problems.autoReveal": true,
	// Affichez les erreurs et les avertissements sur les fichiers et les dossiers.
	"problems.decorations.enabled": true,
	// Contrôle le mode d’affichage par défaut de la vue Problèmes.
	"problems.defaultViewMode": "tree",
	// Lorsqu'il est activé, le problème actuel s'affiche dans la barre d'état.
	"problems.showCurrentInStatus": false,
	// Contrôle l'ordre dans lequel les problèmes sont parcourus.
	//  - severity: Parcourir les problèmes classés par gravité
	//  - position: Naviguer dans les problèmes classés par position
	"problems.sortOrder": "severity",
	// Specifies where the indicators of the file changes annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.changes.locations": [
		"gutter",
		"line",
		"overview"
	],
	// Specifies how the file changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",
	// Activez/désactivez les barres de navigation.
	"breadcrumbs.enabled": true,
	// Contrôle si et comment les chemins de fichiers sont affichés dans la vue de fil d'ariane.
	//  - on: Afficher le chemin du fichier dans l’affichage de barres de navigation.
	//  - off: Ne pas afficher le chemin du fichier dans la vue de barres de navigation.
	//  - last: Afficher uniquement le dernier élément du chemin du fichier dans la vue de barres de navigation.
	"breadcrumbs.filePath": "on",
	// Restituer les fils d'Ariane avec des icônes.
	"breadcrumbs.icons": true,
	// Si activé, les barres de navigation montrent des symboles de type 'array'.
	"breadcrumbs.showArrays": true,
	// Si activé, les barres de navigation montrent des symboles de type 'boolean'.
	"breadcrumbs.showBooleans": true,
	// Si activé, les barres de navigation montrent des symboles de type 'class'.
	"breadcrumbs.showClasses": true,
	// Si activé, les barres de navigation montrent des symboles de type 'constant'.
	"breadcrumbs.showConstants": true,
	// Si activé, les barres de navigation montrent des symboles de type 'constructor'.
	"breadcrumbs.showConstructors": true,
	// Si activé, les barres de navigation montrent des symboles de type 'enumMember'.
	"breadcrumbs.showEnumMembers": true,
	// Si activé, les barres de navigation montrent des symboles de type 'enum'.
	"breadcrumbs.showEnums": true,
	// Si activé, les barres de navigation montrent des symboles de type 'event'.
	"breadcrumbs.showEvents": true,
	// Si activé, les barres de navigation montrent des symboles de type 'field'.
	"breadcrumbs.showFields": true,
	// Si activé, les barres de navigation montrent des symboles de type 'file'.
	"breadcrumbs.showFiles": true,
	// Si activé, les barres de navigation montrent des symboles de type 'function'.
	"breadcrumbs.showFunctions": true,
	// Si activé, les barres de navigation montrent des symboles de type 'interface'.
	"breadcrumbs.showInterfaces": true,
	// Si activé, les barres de navigation montrent des symboles de type 'key'.
	"breadcrumbs.showKeys": true,
	// Si activé, les barres de navigation montrent des symboles de type 'method'.
	"breadcrumbs.showMethods": true,
	// Si activé, les barres de navigation montrent des symboles de type 'module'.
	"breadcrumbs.showModules": true,
	// Si activé, les barres de navigation montrent des symboles de type 'namespace'.
	"breadcrumbs.showNamespaces": true,
	// Si activé, les barres de navigation montrent des symboles de type 'null'.
	"breadcrumbs.showNull": true,
	// Si activé, les barres de navigation montrent des symboles de type 'number'.
	"breadcrumbs.showNumbers": true,
	// Si activé, les barres de navigation montrent des symboles de type 'object'.
	"breadcrumbs.showObjects": true,
	// Si activé, les barres de navigation montrent des symboles de type 'operator'.
	"breadcrumbs.showOperators": true,
	// Si activé, les barres de navigation montrent des symboles de type 'package'.
	"breadcrumbs.showPackages": true,
	// Si activé, les barres de navigation montrent des symboles de type 'property'.
	"breadcrumbs.showProperties": true,
	// Si activé, les barres de navigation montrent des symboles de type 'string'.
	"breadcrumbs.showStrings": true,
	// Si activé, les barres de navigation montrent des symboles de type 'struct'.
	"breadcrumbs.showStructs": true,
	// Si activé, les barres de navigation montrent des symboles de type 'typeParameter'.
	"breadcrumbs.showTypeParameters": true,
	// Si activé, les barres de navigation montrent des symboles de type 'variable'.
	"breadcrumbs.showVariables": true,
	// Contrôle si et comment les symboles sont affichés dans la vue de fil d'ariane.
	//  - on: Afficher tous les symboles dans l’affichage de barres de navigation
	//  - off: Ne pas afficher de symboles dans la vue de barres de navigation.
	//  - last: Afficher uniquement le symbole actuel dans la vue de barres de navigation.
	"breadcrumbs.symbolPath": "on",
	// Détermine le mode de tri des symboles dans la vue des barres de navigation.
	//  - position: Affichez la structure des symboles par position de fichier.
	//  - name: Affichez la structure des symboles par ordre alphabétique.
	//  - type: Affichez la structure des symboles par type de symbole.
	"breadcrumbs.symbolSortOrder": "position",
	// Specifies the age of the most recent change (in days) after which the file heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,
	// Specifies the base color of the file heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",
	// Specifies the whether to fade out older lines
	"gitlens.heatmap.fadeLines": true,
	// Specifies the base color of the file heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",
	// Specifies where the indicators of the file heatmap annotations will be shown
	//  - gutter: Adds an indicator to the gutter
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds an indicator to the scroll bar
	"gitlens.heatmap.locations": [
		"gutter",
		"line",
		"overview"
	],
	// Specifies how the file heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",
	// Specifies whether to show avatar images instead of author initials and remote icons in the _Commit Graph_
	"gitlens.graph.avatars": true,
	// Specifies the order by which commits will be shown on the _Commit Graph_
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.graph.commitOrdering": "date",
	// Specifies how absolute dates will be formatted in the _Commit Graph_. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.graph.dateFormat": null,
	// Specifies how dates will be displayed in the _Commit Graph_
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.graph.dateStyle": "relative",
	// Specifies the default number of items to show in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.defaultItemLimit": 500,
	// Specifies whether to dim (deemphasize) merge commit rows in the _Commit Graph_
	"gitlens.graph.dimMergeCommits": false,
	// Specifies whether to highlight rows associated with the branch / tag when hovering over it in the _Commit Graph_
	"gitlens.graph.highlightRowsOnRefHover": true,
	// Specifies the number of additional items to fetch when paginating in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.pageItemLimit": 200,
	// Specifies the number of rows from the edge at which the graph will scroll when using keyboard or search to change the selected row
	"gitlens.graph.scrollRowPadding": 0,
	// Specifies the number of results to gather when searching in the _Commit Graph_. Use 0 to specify no limit
	"gitlens.graph.searchItemLimit": 100,
	// Specifies when to show the _Commit Details_ view for the selected row in the _Commit Graph_
	//  - false: Never shows the _Commit Details_ view automatically
	//  - open: Shows the _Commit Details_ view automatically only when opening the _Commit Graph_
	//  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Commit Graph_
	"gitlens.graph.showDetailsView": "selection",
	// Specifies whether to show a ghost branch / tag when hovering over or selecting a row in the _Commit Graph_
	"gitlens.graph.showGhostRefsOnRowHover": true,
	// Specifies whether to show remote names on remote branches in the _Commit Graph_
	"gitlens.graph.showRemoteNames": false,
	// Specifies whether to show the _Commit Graph_ in the status bar
	"gitlens.graph.statusBar.enabled": true,
	// Specifies the limit on the how many commits can be queried for statistics in the Visual File History, because of rate limits. Only applies to virtual workspaces.
	"gitlens.visualHistory.queryLimit": 20,
	// Specifies how Git commits are displayed in the _Interactive Rebase Editor_
	//  - asc: Shows oldest commit first
	//  - desc: Shows newest commit first
	"gitlens.rebaseEditor.ordering": "desc",
	// Specifies when to show the _Commit Details_ view for the selected row in the _Interactive Rebase Editor_
	//  - false: Never shows the _Commit Details_ view automatically
	//  - open: Shows the _Commit Details_ view automatically only when opening the _Interactive Rebase Editor_
	//  - selection: Shows the _Commit Details_ view automatically when selection changes in the _Interactive Rebase Editor_
	"gitlens.rebaseEditor.showDetailsView": "selection",
	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,
	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,
	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,
	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,
	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,
	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,
	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	//  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
	//  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
	//  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
	//  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
	//  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
	//  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
	//  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
	//  - pull:menu: Skips pull confirmations when run from the Git Command Palette
	//  - push:command: Skips push confirmations when run from a command, e.g. a view action
	//  - push:menu: Skips push confirmations when run from the Git Command Palette
	//  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
	//  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
	//  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
	//  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
	//  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
	//  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
	//  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
	//  - switch:menu: Skips switch confirmations when run from the Git Command Palette
	//  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
	//  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command"
	],
	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",
	// Si ce paramètre a la valeur false, aucune télémétrie n’est envoyée, quelle que soit la valeur du nouveau paramètre. Déprécié en raison d’une combinaison dans le paramètre `telemetry.telemetryLevel`.
	// Activez la collecte des rapports d’incident. Cela nous permet d’améliorer la stabilité. 
	// Cette option nécessite un redémarrage pour prendre effet.
	"telemetry.enableCrashReporter": true,
	// Si ce paramètre est faux, aucune télémétrie ne sera envoyée quelle que soit la valeur du nouveau paramètre. Déconseillé au profit du `telemetry.telemetryLevel` cadre.
	// Activez la collecte des données de diagnostic. Cela nous permet de mieux comprendre comment Visual Studio Code fonctionne et où des améliorations doivent être apportées. [En savoir plus] (https://go.microsoft.com/fwlink/?LinkId=786907) sur ce que nous recueillons et notre déclaration de confidentialité.
	"telemetry.enableTelemetry": true,
	// 
	// Contrôle télémétrie Visual Studio Code, la télémétrie d’extension interne et la télémétrie des extensions tierces participantes. Certaines extensions tierces peuvent ne pas respecter ce paramètre. Consultez la documentation de l’extension spécifique pour en être sûr. La télémétrie nous aide à mieux comprendre les performances de Visual Studio Code , où des améliorations doivent être apportées et comment les fonctionnalités sont utilisées. En savoir plus sur les [données que nous collectons](https://aka.ms/vscode-telemetry) et notre [déclaration de confidentialité](https://go.microsoft.com/fwlink/?LinkId=786907). Un redémarrage complet de l'application est nécessaire pour que les modifications apportées aux rapports d'incident prennent effet.
	// 
	// &nbsp;
	// 
	// Le tableau suivant présente les données envoyées avec chaque paramètre :
	// 
	// |       | Rapports d’incidents | Télémétrie d'erreur | Données d'utilisation |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****Remarque :*** Si ce paramètre est désactivé, aucune télémétrie ne sera envoyée quels que soient les autres paramètres de télémétrie. Si ce paramètre est défini sur autre chose que « off » et que la télémétrie est désactivée avec des paramètres obsolètes, aucune télémétrie ne sera envoyée.*
	// 
	//  - all: Envoie les données d'utilisation, les erreurs et les rapports d'erreur.
	//  - error: Envoie la télémétrie d'erreur générale et les rapports de plantage.
	//  - crash: Envoie des rapports de plantage au niveau du système d'exploitation.
	//  - off: Désactive toutes les données de télémétrie du produit.
	"telemetry.telemetryLevel": "all",
	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,
	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,
	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,
	// Specifies the configuration of a partner integration
	"gitlens.partners": null,
	// Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
	"gitlens.remotes": null,
	// Specifies whether to use VS Code as Git's `core.editor` for Gitlens terminal commands
	"gitlens.terminal.overrideGitEditor": true,
	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,
	// Specifies whether to show the _Commit Details_ view when clicking on a commit link in the integrated terminal
	"gitlens.terminalLinks.showDetailsView": true,
	// Contrôle si les éléments de plan sont réduits ou développés.
	//  - alwaysCollapse: Réduire tous les éléments.
	//  - alwaysExpand: Développer tous les éléments.
	"outline.collapseItems": "alwaysExpand",
	// Restituer les éléments de structure avec des icônes.
	"outline.icons": true,
	// Utiliser des badges pour les erreurs et les avertissements sur les éléments hiérarchiques.
	"outline.problems.badges": true,
	// Utiliser des couleurs pour les erreurs et les avertissements sur les éléments hiérarchiques.
	"outline.problems.colors": true,
	// Afficher les erreurs et les avertissements sur les éléments hiérarchiques.
	"outline.problems.enabled": true,
	// Si activé, le plan montre des symboles de type 'array'.
	"outline.showArrays": true,
	// Si activé, le plan montre des symboles de type 'boolean'.
	"outline.showBooleans": true,
	// Si activé, le plan montre des symboles de type 'class'.
	"outline.showClasses": true,
	// Si activé, le plan montre des symboles de type 'constant'.
	"outline.showConstants": true,
	// Si activé, le plan montre des symboles de type 'constructor'.
	"outline.showConstructors": true,
	// Si activé, le plan montre des symboles de type 'enumMember'.
	"outline.showEnumMembers": true,
	// Si activé, le plan montre des symboles de type 'enum'.
	"outline.showEnums": true,
	// Si activé, le plan montre des symboles de type 'event'.
	"outline.showEvents": true,
	// Si activé, le plan montre des symboles de type 'field'.
	"outline.showFields": true,
	// Si activé, le plan montre des symboles de type 'file'.
	"outline.showFiles": true,
	// Si activé, le plan montre des symboles de type 'function'.
	"outline.showFunctions": true,
	// Si activé, le plan montre des symboles de type 'interface'.
	"outline.showInterfaces": true,
	// Si activé, le plan montre des symboles de type 'key'.
	"outline.showKeys": true,
	// Si activé, le plan montre des symboles de type 'method'.
	"outline.showMethods": true,
	// Si activé, le plan montre des symboles de type 'module'.
	"outline.showModules": true,
	// Si activé, le plan montre des symboles de type 'namespace'.
	"outline.showNamespaces": true,
	// Si activé, le plan montre des symboles de type 'null'.
	"outline.showNull": true,
	// Si activé, le plan montre des symboles de type 'number'.
	"outline.showNumbers": true,
	// Si activé, le plan montre des symboles de type 'object'.
	"outline.showObjects": true,
	// Si activé, le plan montre des symboles de type 'operator'.
	"outline.showOperators": true,
	// Si activé, le plan montre des symboles de type 'package'.
	"outline.showPackages": true,
	// Si activé, le plan montre des symboles de type 'property'.
	"outline.showProperties": true,
	// Si activé, le plan montre des symboles de type 'string'.
	"outline.showStrings": true,
	// Si activé, le plan montre des symboles de type 'struct'.
	"outline.showStructs": true,
	// Si activé, le plan montre des symboles de type 'typeParameter'.
	"outline.showTypeParameters": true,
	// Si activé, le plan montre des symboles de type 'variable'.
	"outline.showVariables": true,
	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateFormat": null,
	// Specifies the locale, a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags), to use for date formatting, defaults to the VS Code locale. Use `system` to follow the current system locale, or choose a specific locale, e.g `en-US` — US English, `en-GB` — British English, `de-DE` — German, 'ja-JP = Japanese, etc.
	"gitlens.defaultDateLocale": null,
	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultDateShortFormat": null,
	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",
	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",
	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for supported formats
	"gitlens.defaultTimeFormat": null,
	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scm": {
			"graph": true
		},
		"scmRepositoryInline": {
			"graph": true
		},
		"scmRepository": {
			"authors": true,
			"graph": false
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true
		},
		"scmItemInline": {},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": false,
			"stash": true
		}
	},
	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",
	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",
	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",
	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,
	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},
	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,
	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,
	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,
	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,
	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,
	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,
	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,
	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,
	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,
	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,
	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,
	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false,
		"suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
		"suppressIntegrationRequestFailed500Warning": false,
		"suppressIntegrationRequestTimedOutWarning": false
	},
	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,
	// Specifies how many folders deep to search for repositories. Defaults to `git.repositoryScanMaxDepth`
	"gitlens.advanced.repositorySearchDepth": null,
	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,
	// Deprecated. This setting is no longer used
	// Deprecated. This setting is no longer used
	"gitlens.advanced.useSymmetricDifferenceNotation": null,
	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,
	// Specifies debug mode
	"gitlens.debug": false,
	// Specifies whether to attempt to detect nested repositories when opening files
	"gitlens.detectNestedRepositories": false,
	// Specifies whether to allow the collection of product usage telemetry
	"gitlens.telemetry.enabled": true,
	// Expérimental. Contrôle si la vue Chronologie doit charger la page suivante quand vous faites défiler une liste d'éléments jusqu'à la fin.
	"timeline.pageOnScroll": false,
	// Nombre d'éléments à montrer par défaut dans la vue Chronologie et durant le chargement d'autres éléments. L'affectation de la valeur 'null' (valeur par défaut) permet de choisir automatiquement une taille de page basée sur la zone visible de la vue Chronologie.
	"timeline.pageSize": null,
	// Configurez les paramètres à remplacer pour le langage ansible.
	"[ansible]": {
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage azure-pipelines.
	"[azure-pipelines]": {
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage c.
	"[c]": {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},
	// Configurez les paramètres à remplacer pour le langage cpp.
	"[cpp]": {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},
	// Configurez les paramètres à remplacer pour le langage css.
	"[css]": {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage cuda-cpp.
	"[cuda-cpp]": {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},
	// Configurez les paramètres à remplacer pour le langage dart.
	"[dart]": {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.detectIndentation": false,
		"editor.suggest.insertMode": "replace",
		"editor.defaultFormatter": "Dart-Code.dart-code",
		"editor.inlayHints.enabled": "offUnlessPressed"
	},
	// Configurez les paramètres à remplacer pour le langage dockercompose.
	"[dockercompose]": {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"editor.quickSuggestions": {
			"other": true,
			"comments": false,
			"strings": true
		}
	},
	// Configurez les paramètres à remplacer pour le langage dockerfile.
	"[dockerfile]": {
		"editor.quickSuggestions": {
			"strings": true
		}
	},
	// Configurez les paramètres à remplacer pour le langage dtd.
	"[dtd]": {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},
	// Configurez les paramètres à remplacer pour le langage git-commit.
	"[git-commit]": {
		"editor.rulers": [
			72
		],
		"workbench.editor.restoreViewState": false
	},
	// Configurez les paramètres à remplacer pour le langage git-rebase.
	"[git-rebase]": {
		"workbench.editor.restoreViewState": false
	},
	// Configurez les paramètres à remplacer pour le langage go.
	"[go]": {
		"editor.insertSpaces": false,
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
			"source.organizeImports": true
		},
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},
	// Configurez les paramètres à remplacer pour le langage handlebars.
	"[handlebars]": {
		"editor.suggest.insertMode": "replace"
	},
	// Configurez les paramètres à remplacer pour le langage html.
	"[html]": {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage java.
	"[java]": {
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},
	// Configurez les paramètres à remplacer pour le langage javascript.
	"[javascript]": {
		"editor.maxTokenizationLineLength": 2500
	},
	// Configurez les paramètres à remplacer pour le langage json.
	"[json]": {
		"editor.quickSuggestions": {
			"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage jsonc.
	"[jsonc]": {
		"editor.quickSuggestions": {
			"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage less.
	"[less]": {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage makefile.
	"[makefile]": {
		"editor.insertSpaces": false
	},
	// Configurez les paramètres à remplacer pour le langage markdown.
	"[markdown]": {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
			"comments": "off",
			"strings": "off",
			"other": "off"
		}
	},
	// Configurez les paramètres à remplacer pour le langage plaintext.
	"[plaintext]": {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},
	// Configurez les paramètres à remplacer pour le langage postcss.
	"[postcss]": {
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage python.
	"[python]": {
		"gitlens.codeLens.symbolScopes": [
			"!Module"
		],
		"editor.wordBasedSuggestions": false
	},
	// Configurez les paramètres à remplacer pour le langage scss.
	"[scss]": {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage search-result.
	"[search-result]": {
		"editor.lineNumbers": "off"
	},
	// Configurez les paramètres à remplacer pour le langage shellscript.
	"[shellscript]": {
		"files.eol": "\n"
	},
	// Configurez les paramètres à remplacer pour le langage stylus.
	"[stylus]": {
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage svg.
	"[svg]": {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},
	// Configurez les paramètres à remplacer pour le langage vue.
	"[vue]": {
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Configurez les paramètres à remplacer pour le langage xml.
	"[xml]": {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},
	// Configurez les paramètres à remplacer pour le langage xsl.
	"[xsl]": {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},
	// Configurez les paramètres à remplacer pour le langage yaml.
	"[yaml]": {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"gitlens.codeLens.scopes": [
			"document"
		]
	},
	// Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
	// 
	"audioCues.enabled": null,
	// Joue un son lorsque la ligne active a un point d'arrêt.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.lineHasBreakpoint": "auto",
	// Émet un son lorsque la ligne active comporte une erreur.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.lineHasError": "auto",
	// Joue un son lorsque la ligne active a une zone pliée qui peut être dépliée.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.lineHasFoldedArea": "auto",
	// Joue un son lorsque la ligne active a une suggestion en ligne.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.lineHasInlineSuggestion": "auto",
	// Émet un signal sonore lorsque la ligne active comporte un avertissement.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.lineHasWarning": "off",
	// Émet un son lors de la tentative de lecture d’une ligne avec des indicateurs d’inlay qui n’ont pas d’indicateurs inlay.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.noInlayHints": "auto",
	// Joue un son lorsque le débogueur s'est arrêté sur un point d'arrêt.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.onDebugBreak": "auto",
	// Émet un son lorsqu’une tâche est terminée.
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.taskCompleted": "auto",
	// Émet un son en cas d’échec d’une tâche (code de sortie différent de zéro).
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.taskFailed": "auto",
	// Émet un son quand des correctifs rapides de terminal sont disponibles
	//  - auto: Activez le signal audio lorsqu’un lecteur d’écran est attaché.
	//  - on: Désactivez les signaux audio.
	//  - off: Désactivez le signal audio.
	"audioCues.terminalQuickFix": "auto",
	// Volume des signaux audio en pourcentage (0-100).
	"audioCues.volume": 70,
	// Nom sous lequel l’accès au tunnel distant est inscrit. S’il n’est pas défini, le nom d’hôte est utilisé.
	"remote.tunnels.access.hostNameOverride": "",
	// Quand cette option est activée, les nouveaux processus qui s'exécutent sont détectés, et les ports qu'ils écoutent sont réacheminés automatiquement. La désactivation de ce paramètre n’empêchera pas le transfert de tous les ports. Même lorsqu’elles sont désactivées, les extensions peuvent toujours faire en sorte que les ports soient transférés, et l’ouverture de certaines URL entraîne toujours le transfert des ports.
	"remote.autoForwardPorts": true,
	// Définit la source à partir de laquelle les ports sont automatiquement transférés lorsque `remote.autoForwardPorts` a la valeur true. Sur les télécommandes Windows et Mac, l’option « process » n’a aucun effet et « output » est utilisé. Nécessite un rechargement pour prendre effet.
	//  - process: Les ports sont automatiquement réacheminés quand ils sont découverts par la surveillance des processus ayant démarré et incluant un port.
	//  - output: Les ports sont automatiquement réacheminés quand ils sont découverts via la lecture de la sortie du terminal et du débogage. Dans la mesure où tous les processus qui utilisent des ports ne s'affichent pas dans le terminal intégré ou la console de débogage, certains ports ne sont pas pris en compte. Le réacheminement des ports en fonction de la sortie n'est pas "annulé" tant que ces ports ne sont pas rechargés, ou qu'ils ne sont pas fermés par l'utilisateur dans la vue Ports.
	"remote.autoForwardPortsSource": "process",
	// Remplacez le type d'une extension. Les extensions 'ui' sont installées et exécutées sur la machine locale, alors que les extensions 'workspace' sont exécutées sur la machine distante. Quand vous remplacez le type par défaut d'une extension à l'aide de ce paramètre, vous spécifiez si cette extension doit être installée et activée localement ou à distance.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},
	// Spécifie le nom d’hôte local à utiliser pour le réacheminement du port.
	"remote.localPortHost": "localhost",
	// Définissez les propriétés par défaut qui sont appliquées à tous les ports qui n’obtiennent pas de propriétés à partir du paramètre `remote.portsAttributes`. Par exemple :
	// 
	// « `remote.portsAttributes` »
	// {
	//  « onAutoForward » : « ignorer »
	// }
	// « »
	"remote.otherPortsAttributes": {},
	// Définissez les propriétés appliquées en cas de réacheminement d’un numéro de port en particulier. Exemple :
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},
	// Restaure les ports que vous avez réacheminés dans un espace de travail.
	"remote.restoreForwardedPorts": true,
	// Quand les extensions activées sont téléchargées localement et installées sur la machine distante.
	"remote.downloadExtensionsLocally": false,
	// 
	//  - smart: Utilise l’algorithme de comparaison par défaut.
	//  - experimental: Utilise un algorithme de comparaison expérimental.
	"mergeEditor.diffAlgorithm": "experimental",
	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,
	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],
	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],
	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},
	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,
	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},
	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,
	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",
	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,
	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},
	// When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
	"emmet.triggerExpansionOnTab": false,
	// If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
	"emmet.useInlineCompletions": false,
	// Variables to be used in Emmet snippets.
	"emmet.variables": {},
	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,
	// Controls which protocol is used to clone a GitHub repository
	"github.gitProtocol": "https",
	// GitHub Enterprise Server URI
	"github-enterprise.uri": "",
	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",
	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",
	// Enable/Disable pasting images into markdown cells within ipynb files. Requires enabling `editor.experimental.pasteActions.enabled`.
	"ipynb.experimental.pasteImages.enabled": false,
	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",
	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,
	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,
	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,
	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,
	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",
	// Configure les processus à attacher et déboguer automatiquement quand '#debug.node.autoAttach#' est activé. Un processus Node lancé avec l'indicateur '--inspect' est toujours attaché, quel que soit ce paramètre.
	//  - always: Effectue l'attachement automatique à chaque processus Node.js lancé dans le terminal.
	//  - smart: Effectue l'attachement automatique durant l'exécution de scripts qui ne se trouvent pas dans un dossier node_modules.
	//  - onlyWithFlag: Effectue l'attachement automatique uniquement quand '--inspect' est indiqué.
	//  - disabled: L'attachement automatique est désactivé et n'est pas affiché dans la barre d’état.
	"debug.javascript.autoAttachFilter": "disabled",
	// Configure des modèles Glob qui permettent de déterminer quand effectuer l'attachement en mode '#debug.javascript.autoAttachFilter#' "intelligent". '$KNOWN_TOOLS$' est remplacé par une liste de noms d'exécuteurs de tests et de codes courants. [Pour plus d'informations, lisez la documentation de VS Code](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],
	// Quand vous déboguez une application web à distance, configure s'il faut automatiquement "tunneler" le serveur distant vers votre machine locale.
	"debug.javascript.automaticallyTunnelRemoteServer": true,
	// Indique s’il faut arrêter lorsque les points d’arrêt conditionnels génèrent une erreur.
	"debug.javascript.breakOnConditionalError": false,
	// Indique où CodeLens doit être affiché pour "Exécuter" et "Déboguer" dans vos scripts npm. Les options sont : "tous" les scripts, "en haut" de la section de script ou "jamais".
	"debug.javascript.codelens.npmScripts": "top",
	// Options utilisées pendant le débogage de liens ouverts sur lesquels l'utilisateur a cliqué à partir du terminal de débogage. Peut être défini sur "false" pour désactiver ce comportement.
	"debug.javascript.debugByLinkOptions": "on",
	// Il s'agit du 'runtimeExecutable' par défaut utilisé pour les configurations de lancement, en l'absence d'indications. Vous pouvez l'utiliser pour configurer des chemins personnalisés vers Node.js ou des installations de navigateur.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},
	// Options par défaut utilisées pour le débogage d'un processus via la commande Déboguer : attacher au processus Node.js
	"debug.javascript.pickAndAttachOptions": {},
	// Options de requête à utiliser durant le chargement des ressources, telles que les mappages de sources, dans le débogueur. Vous devrez peut-être configurer ce paramètre si vos mappages de sources nécessitent une authentification ou s’ils utilisent un certificat autosigné. Les options sont utilisées pour créer une requête à l’aide de la bibliothèque [`got`](https://github.com/sindresorhus/got).
	// 
	// Un moyen courant de désactiver la vérification de certificat est de passer `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},
	// Options de lancement par défaut pour le terminal de débogage JavaScript et les scripts npm.
	"debug.javascript.terminalOptions": {},
	// Configure le démappage automatique ou non du fichier faisant l'objet d'un mappage de source quand le fichier d'origine ne peut pas être lu. Si la valeur est false (par défaut), une invite s'affiche.
	"debug.javascript.unmapMissingSources": false,
	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",
	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,
	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,
	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",
	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,
	// The package manager used to run scripts.
	//  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
	//  - npm: Use npm as the package manager for running scripts.
	//  - yarn: Use yarn as the package manager for running scripts.
	//  - pnpm: Use pnpm as the package manager for running scripts.
	"npm.packageManager": "auto",
	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,
	// The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",
	// An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
	"npm.scriptExplorerExclude": [],
	// Display hover with 'Run' and 'Debug' commands for scripts.
	"npm.scriptHover": true,
	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",
	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,
	// Current accent color selected
	"materialTheme.accent": "Blue",
	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",
	// If true, puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.bracketSameLine": false,
	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,
	// Path to the prettier configuration file
	"prettier.configPath": "",
	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],
	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],
	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",
	// Controls whether prettier is enabled or not.
	"prettier.enable": true,
	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,
	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",
	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",
	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",
	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,
	// This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.jsxBracketSameLine": false,
	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,
	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",
	// Path to the prettier module
	"prettier.prettierPath": "",
	// Fit code within this line limit
	"prettier.printWidth": 80,
	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",
	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",
	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,
	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,
	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,
	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,
	// If true, enforces single attribute per line in HTML, Vue and JSX.
	"prettier.singleAttributePerLine": false,
	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,
	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,
	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",
	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,
	// Indent lines with tabs
	"prettier.useTabs": false,
	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files.
	"prettier.vueIndentScriptAndStyle": false,
	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,
	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
	"auto-close-tag.activationOnLanguage": [
		"xml",
		"php",
		"blade",
		"ejs",
		"jinja",
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"plaintext",
		"markdown",
		"vue",
		"liquid",
		"erb",
		"lang-cfml",
		"cfml",
		"HTML (EEx)",
		"HTML (Eex)",
		"plist"
	],
	// Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
	"auto-close-tag.disableOnLanguage": [],
	// Whether to close self-closing tag automatically
	"auto-close-tag.enableAutoCloseSelfClosingTag": true,
	// Whether to insert close tag automatically
	"auto-close-tag.enableAutoCloseTag": true,
	// Set the tag list that would not be auto closed.
	"auto-close-tag.excludedTags": [
		"area",
		"base",
		"br",
		"col",
		"command",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	],
	// Enable both Visual Studio and Sublime Text mode
	"auto-close-tag.fullMode": false,
	// Insert a space before the forward slash in a self-closing tag.
	"auto-close-tag.insertSpaceBeforeSelfClosingTag": false,
	// Auto close tag when </ is typed, same as Sublime Text 3
	"auto-close-tag.SublimeText3Mode": false,
	// Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
	"go.addTags": {
		"tags": "json",
		"options": "json=omitempty",
		"promptForTags": false,
		"transform": "snakecase",
		"template": ""
	},
	// Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools.
	"go.alternateTools": {},
	// Include unimported packages in auto-complete suggestions. Not applicable when using the language server.
	"go.autocompleteUnimportedPackages": false,
	// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildFlags": [],
	// Compiles code on file save using 'go build' or 'go test -c'. Options are 'workspace', 'package', or 'off'.  Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.buildOnSave": "package",
	// The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildTags": "",
	// This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
	"go.coverageDecorator": {
		"type": "highlight",
		"coveredHighlightColor": "rgba(64,128,128,0.5)",
		"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
		"coveredBorderColor": "rgba(64,128,128,0.5)",
		"uncoveredBorderColor": "rgba(128,64,64,0.25)",
		"coveredGutterStyle": "blockblue",
		"uncoveredGutterStyle": "slashyellow"
	},
	// Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
	"go.coverageOptions": "showBothCoveredAndUncoveredCode",
	// When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
	"go.coverMode": "default",
	// If true, runs 'go test -coverprofile' on save and shows test coverage.
	"go.coverOnSave": false,
	// If true, shows test coverage when Go: Test Function at cursor command is run.
	"go.coverOnSingleTest": false,
	// If true, shows test coverage when Go: Test Single File command is run.
	"go.coverOnSingleTestFile": false,
	// If true, shows test coverage when Go: Test Package command is run.
	"go.coverOnTestPackage": true,
	// When generating code coverage, should counts be shown as --374--
	"go.coverShowCounts": false,
	// Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
	"go.delveConfig": {},
	// (Experimental) vulncheck enables vulnerability scanning.
	// 
	//  - Imports: `"Imports"`: In Imports mode, `gopls` will report vulnerabilities that affect packages
	// directly and indirectly used by the analyzed main module.
	// 
	//  - Off: `"Off"`: Disable vulnerability analysis.
	// 
	"go.diagnostic.vulncheck": "Off",
	// If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
	"go.disableConcurrentTests": false,
	// Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.
	"go.docsTool": "godoc",
	// Experimental Feature: Enable/Disable entries from the context menu in the editor.
	"go.editorContextMenuCommands": {
		"toggleTestFile": true,
		"addTags": true,
		"removeTags": false,
		"fillStruct": false,
		"testAtCursor": true,
		"testFile": false,
		"testPackage": false,
		"generateTestForFunction": true,
		"generateTestForFile": false,
		"generateTestForPackage": false,
		"addImport": true,
		"testCoverage": true,
		"playground": true,
		"debugTestAtCursor": true,
		"benchmarkAtCursor": false
	},
	// Feature level setting to enable/disable code lens for references and run/debug tests
	"go.enableCodeLens": {
		"runtest": true
	},
	// Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
	"go.formatFlags": [],
	// When the language server is enabled and one of `default`/`gofmt`/`goimports`/`gofumpt` is chosen, the language server will handle formatting. If `custom` tool is selected, the extension will use the `customFormatter` tool in the `go.alternateTools` section.
	//  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
	//  - gofmt: Formats the file according to the standard Go style. (not applicable when the language server is enabled)
	//  - goimports: Organizes imports and formats the file with gofmt. (not applicable when the language server is enabled)
	//  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
	//  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt. . Use `gopls.format.gofumpt` instead)
	//  - custom: Formats using the custom tool specified as `customFormatter` in the `go.alternateTools` setting. The tool should take the input as STDIN and output the formatted code as STDOUT.
	"go.formatTool": "default",
	// Additional command line flags to pass to `gotests` for generating tests.
	"go.generateTestsFlags": [],
	// Enable gocode's autobuild feature. Not applicable when using the language server.
	"go.gocodeAutoBuild": false,
	// Additional flags to pass to gocode. Not applicable when using the language server.
	"go.gocodeFlags": [
		"-builtin",
		"-ignore-case",
		"-unimported-packages"
	],
	// Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.
	"go.gocodePackageLookupMode": "go",
	// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.
	"go.gopath": null,
	// Specifies the GOROOT to use when no environment variable is set.
	"go.goroot": null,
	// Folder names (not paths) to ignore while using Go to Symbol in Workspace feature. Not applicable when using the language server.
	"go.gotoSymbol.ignoreFolders": [],
	// If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeGoroot": false,
	// If false, the import statements will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeImports": false,
	// Infer GOPATH from the workspace root. This is ignored when using Go Modules.
	"go.inferGopath": false,
	// Enable/disable inlay hints for variable types in assign statements:
	// ```go
	// 	i/* int*/, j/* int*/ := 0, len(r)-1
	// ```
	"go.inlayHints.assignVariableTypes": false,
	// Enable/disable inlay hints for composite literal field names:
	// ```go
	// 	{/*in: */"Hello, world", /*want: */"dlrow ,olleH"}
	// ```
	"go.inlayHints.compositeLiteralFields": false,
	// Enable/disable inlay hints for composite literal types:
	// ```go
	// 	for _, c := range []struct {
	// 		in, want string
	// 	}{
	// 		/*struct{ in string; want string }*/{"Hello, world", "dlrow ,olleH"},
	// 	}
	// ```
	"go.inlayHints.compositeLiteralTypes": false,
	// Enable/disable inlay hints for constant values:
	// ```go
	// 	const (
	// 		KindNone   Kind = iota/* = 0*/
	// 		KindPrint/*  = 1*/
	// 		KindPrintf/* = 2*/
	// 		KindErrorf/* = 3*/
	// 	)
	// ```
	"go.inlayHints.constantValues": false,
	// Enable/disable inlay hints for implicit type parameters on generic functions:
	// ```go
	// 	myFoo/*[int, string]*/(1, "hello")
	// ```
	"go.inlayHints.functionTypeParameters": false,
	// Enable/disable inlay hints for parameter names:
	// ```go
	// 	parseInt(/* str: */ "123", /* radix: */ 8)
	// ```
	"go.inlayHints.parameterNames": false,
	// Enable/disable inlay hints for variable types in range statements:
	// ```go
	// 	for k/* int*/, v/* string*/ := range []string{} {
	// 		fmt.Println(k, v)
	// 	}
	// ```
	"go.inlayHints.rangeVariableTypes": false,
	// If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
	"go.installDependenciesWhenBuilding": false,
	// Temporary flag to enable/disable diagnostics from the language server. This setting will be deprecated soon. Please see and response to [Issue 50](https://github.com/golang/vscode-go/issues/50).
	"go.languageServerExperimentalFeatures": {
		"diagnostics": true
	},
	// Flags like -rpc.trace and -logfile to be used while running the language server.
	"go.languageServerFlags": [],
	// Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
	"go.lintFlags": [],
	// Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
	//  - file: lint the current file on file saving
	//  - package: lint the current package on file saving
	//  - workspace: lint all the packages in the current workspace root folder on file saving
	//  - off: do not run lint automatically
	"go.lintOnSave": "package",
	// Specifies Lint tool name.
	"go.lintTool": "staticcheck",
	// Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay. Not applicable when using the language server.
	"go.liveErrors": {
		"enabled": false,
		"delay": 500
	},
	// The logging level the extension logs at, defaults to 'error'
	"go.logging.level": "error",
	// The flags configured here will be passed through to command `goplay`
	"go.playground": {
		"openbrowser": true,
		"share": true,
		"run": true
	},
	// Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
	"go.removeTags": {
		"tags": "",
		"options": "",
		"promptForTags": false
	},
	// Prompt for surveys, including the gopls survey and the Go developer survey.
	"go.survey.prompt": true,
	// Apply the Go & PATH environment variables used by the extension to all integrated terminals.
	"go.terminal.activateEnvironment": true,
	// Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
	"go.testEnvFile": null,
	// Environment variables that will be passed to the process that runs the Go tests
	"go.testEnvVars": {},
	// Run benchmarks when running all tests in a file or folder.
	"go.testExplorer.alwaysRunBenchmarks": false,
	// Concatenate all test log messages for a given location into a single message.
	"go.testExplorer.concatenateMessages": true,
	// Enable the Go test explorer
	"go.testExplorer.enable": true,
	// Present packages in the test explorer flat or nested.
	"go.testExplorer.packageDisplayMode": "flat",
	// Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.
	"go.testExplorer.showDynamicSubtestsInEditor": false,
	// Open the test output terminal when a test run is started.
	"go.testExplorer.showOutput": true,
	// Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
	"go.testFlags": null,
	// Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
	"go.testOnSave": false,
	// The Go build tags to use for when running tests. If null, then buildTags will be used.
	"go.testTags": null,
	// Specifies the timeout for go test in ParseDuration format.
	"go.testTimeout": "30s",
	// Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS) and debuggee process launched by Delve. Format as string key:value pairs. When debugging, merged with `envFile` and `env` values with precedence `env` > `envFile` > `go.toolsEnvVars`.
	"go.toolsEnvVars": {},
	// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.
	"go.toolsGopath": null,
	// Automatically update the tools used by the extension, without prompting the user.
	"go.toolsManagement.autoUpdate": false,
	// Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
	//  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
	//  - local: checks only the minimum tools versions required by the extension
	//  - off: completely disables version check (not recommended)
	"go.toolsManagement.checkForUpdates": "proxy",
	// The path to the `go` binary used to install the Go tools. If it's empty, the same `go` binary chosen for the project will be used for tool installation.
	"go.toolsManagement.go": "",
	// Trace the communication between VS Code and the Go language server.
	"go.trace.server": "off",
	// Complete functions with their parameter signature, including the variable type. Not propagated to the language server.
	"go.useCodeSnippetsOnFunctionSuggest": false,
	// Complete functions with their parameter signature, excluding the variable types. Use `gopls.usePlaceholders` when using the language server.
	"go.useCodeSnippetsOnFunctionSuggestWithoutType": false,
	// Use `go.toolsManagement.checkForUpdates` instead.
	// When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly
	"go.useGoProxyToCheckForToolUpdates": true,
	// Use the Go language server "gopls" from Google for powering language features like code navigation, completion, refactoring, formatting & diagnostics.
	"go.useLanguageServer": true,
	// Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"])
	"go.vetFlags": [],
	// Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	//  - package: vet the current package on file saving
	//  - workspace: vet all the packages in the current workspace root folder on file saving
	//  - off: do not run vet automatically
	"go.vetOnSave": "package",
	// Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
	"gopls": {},
	// Command templates for `docker attach` / `docker exec -it` commands.
	"docker.commands.attach": "${containerCommand} exec -it ${containerId} ${shellCommand}",
	// Command template(s) for `docker build` commands.
	"docker.commands.build": "${containerCommand} build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",
	// Command templates for `docker-compose down` commands.
	"docker.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "${composeCommand} ${configurationFile} down"
		}
	],
	// Command templates for `docker-compose up` commands.
	"docker.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "${composeCommand} ${configurationFile} up ${detached} ${build}"
		}
	],
	// Command templates for `docker-compose up <subset>` commands.
	"docker.commands.composeUpSubset": [
		{
			"label": "Compose Up",
			"template": "${composeCommand} ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}"
		}
	],
	// Command templates for `docker logs` commands.
	"docker.commands.logs": "${containerCommand} logs --tail 1000 -f ${containerId}",
	// Command templates for `docker run` commands.
	"docker.commands.run": "${containerCommand} run --rm -d ${exposedPorts} ${tag}",
	// Command templates for `docker run -it` (interactive) commands.
	"docker.commands.runInteractive": "${containerCommand} run --rm -it ${exposedPorts} ${tag}",
	// Command to use for Docker Compose actions (e.g. `docker-compose`, `docker compose`, etc.). If the executable path contains whitespace, it needs to be quoted appropriately. If unset, the extension will attempt to auto-detect the command to use.
	"docker.composeCommand": "",
	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
	"docker.containers.description": [
		"ContainerName",
		"Status"
	],
	// The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
	"docker.containers.groupBy": "Compose Project Name",
	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
	"docker.containers.label": "FullTag",
	// The property to use to sort containers in Docker view: CreatedTime or Label
	"docker.containers.sortBy": "CreatedTime",
	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"docker.contexts.description": [
		"Description"
	],
	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"docker.contexts.label": "Name",
	// Set to true to include --build option when docker-compose command is invoked
	"docker.dockerComposeBuild": true,
	// Set to true to include --d (detached) option when docker-compose command is invoked
	"docker.dockerComposeDetached": true,
	// Absolute path to Docker client executable (`docker` command). If the path contains whitespace, it needs to be quoted appropriately.
	"docker.dockerPath": "",
	// Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
	"docker.enableDockerComposeLanguageService": true,
	// Environment variables that will be applied to all VS Code terminals and to all background processes started by the Docker extension. Use for variables like `DOCKER_HOST`, etc.
	"docker.environment": {},
	// Build context PATH to pass to Docker build command.
	"docker.imageBuildContextPath": "",
	// Check for outdated base images once per Visual Studio Code session
	"docker.images.checkForOutdatedImages": true,
	// Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
	"docker.images.description": [
		"CreatedTime"
	],
	// The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
	"docker.images.groupBy": "Repository",
	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
	"docker.images.label": "Tag",
	// The property to use to sort images in Docker view: CreatedTime, Label, or Size
	"docker.images.sortBy": "CreatedTime",
	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",
	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",
	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",
	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",
	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",
	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",
	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",
	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",
	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",
	// Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
	"docker.languageserver.formatter.ignoreMultilineInstructions": false,
	// Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"docker.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],
	// The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"docker.networks.groupBy": "None",
	// The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"docker.networks.label": "NetworkName",
	// Show the built-in networks in the explorer.
	"docker.networks.showBuiltInNetworks": true,
	// The property to use to sort networks in Docker view: CreatedTime or Label
	"docker.networks.sortBy": "CreatedTime",
	// Prompt for registry selection if the image is not explicitly tagged.
	"docker.promptForRegistryWhenPushingImages": true,
	// The path to use for scaffolding templates.
	"docker.scaffolding.templatePath": "",
	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"docker.showRemoteWorkspaceWarning": true,
	// Set to true to truncate long image and container registry paths in Docker view
	"docker.truncateLongRegistryPaths": false,
	// Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"docker.truncateMaxLength": 10,
	// Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
	"docker.volumes.description": [
		"CreatedTime"
	],
	// The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
	"docker.volumes.groupBy": "None",
	// The primary property to display for a Docker volume: CreatedTime or VolumeName
	"docker.volumes.label": "VolumeName",
	// The property to use to sort volumes in Docker view: CreatedTime or Label
	"docker.volumes.sortBy": "CreatedTime",
	// Liste des chemins d'accès aux bibliothèques et autres qui doivent être importés par le moteur auto complete. Par exemple, lorsque vous utilisez Google App SDK, les chemins ne sont pas dans le chemin du système, et doivent donc être ajoutés à cette liste.
	"python.autoComplete.extraPaths": [],
	// Chemin de l’exécutable conda à utiliser pour l’activation (version 4.4+)
	"python.condaPath": "",
	// Chemin vers le Python par défaut à utiliser lorsque l'extension se charge pour la première fois, il n'est plus utilisé une fois qu'un interpréteur est sélectionné pour l'espace de travail. Voir https://aka.ms/AAfekmf pour comprendre quand ceci est utilisé
	"python.defaultInterpreterPath": "python",
	// Activez la prise en charge du mappage de source pour les traces de pile significatives dans les journaux d’erreurs.
	"python.diagnostics.sourceMapsEnabled": false,
	// Chemin absolu d'un fichier contenant des définitions de variables d'environnement.
	"python.envFile": "${workspaceFolder}/.env",
	// Active les essais de tests A/B dans l’extension Python. Si cette option est activée, vous pouvez être inclus dans les améliorations et/ou fonctionnalités proposées.
	"python.experiments.enabled": true,
	// Liste des expériences à refuser. Si elle est vide, l'utilisateur se voit attribuer les groupes d'expériences par défaut. Voir https://github.com/microsoft/vscode-python/wiki/Experiments pour plus de détails.
	"python.experiments.optInto": [],
	// Liste des expériences à refuser. Si elle est vide, l'utilisateur se voit attribuer les groupes d'expériences par défaut. Voir https://github.com/microsoft/vscode-python/wiki/Experiments pour plus de détails.
	"python.experiments.optOutFrom": [],
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.formatting.autopep8Args": [],
	// Chemin d'accès à autopep8, vous pouvez utiliser une version personnalisée d'autopep8 en modifiant ce paramètre pour inclure le chemin complet.
	"python.formatting.autopep8Path": "autopep8",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.formatting.blackArgs": [],
	// Chemin à Black, vous pouvez utiliser une version personnalisée de Black en modifiant ce paramètre pour inclure le chemin d'accès complet.
	"python.formatting.blackPath": "black",
	// Fournisseur de mise en forme. Les options possibles sont 'autopep8', 'black' et 'yapf'.
	"python.formatting.provider": "autopep8",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.formatting.yapfArgs": [],
	// Chemin vers yapf, vous pouvez utiliser une version personnalisée de yapf en modifiant ce paramètre pour inclure le chemin complet.
	"python.formatting.yapfPath": "yapf",
	// Indique si les modules Python doivent être installés globalement en l’absence d’un environnement.
	"python.globalModuleInstallation": false,
	// Contrôle quand afficher les informations de l’interpréteur sélectionné dans la barre d’état.
	//  - never: Ne jamais afficher des informations
	//  - onPythonRelated: Affichez les informations uniquement si des fichiers liés à Python sont ouverts.
	//  - always: Toujours afficher des informations
	"python.interpreter.infoVisibility": "onPythonRelated",
	// Définit le type du serveur de langage.
	//  - Default: Sélectionnez automatiquement un serveur de langue : Pylance si installé et disponible, sinon basculez vers Jedi.
	//  - Jedi: Utilisez le Jedi derrière le protocole LSP (Language Server Protocol) comme serveur de langage.
	//  - Pylance: Utilisez Pylance comme serveur de langage.
	//  - None: Désactivez les fonctionnalités du serveur de langage.
	"python.languageServer": "Default",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.banditArgs": [],
	// Indique s’il faut linter les fichiers Python à l’aide de bandit.
	"python.linting.banditEnabled": false,
	// Chemin d’accès au constructeur, vous pouvez utiliser une version personnalisée du constructeur en modifiant ce paramètre pour inclure le chemin d’accès complet.
	"python.linting.banditPath": "bandit",
	// Répertoire de travail facultatif pour les linters
	"python.linting.cwd": null,
	// Indique s’il faut linter les fichiers Python.
	"python.linting.enabled": true,
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.flake8Args": [],
	// Gravité du message Flake8 de type « E »
	"python.linting.flake8CategorySeverity.E": "Error",
	// Gravité du message Flake8 de type « F »
	"python.linting.flake8CategorySeverity.F": "Error",
	// Gravité du message Flake8 de type « W »
	"python.linting.flake8CategorySeverity.W": "Warning",
	// Indique s’il faut linter les fichiers Python à l’aide de flake8.
	"python.linting.flake8Enabled": false,
	// Chemin vers flake8, vous pouvez utiliser une version personnalisée de flake8 en modifiant ce paramètre pour inclure le chemin complet.
	"python.linting.flake8Path": "flake8",
	// Modèles utilisés pour exclure les fichiers ou les dossiers du mode lié
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],
	// Indique s’il faut linter les fichiers Python quand ils sont enregistrés.
	"python.linting.lintOnSave": true,
	// Contrôle le nombre maximal de problèmes produits par le serveur
	"python.linting.maxNumberOfProblems": 100,
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],
	// Gravité du type de message Mypy « Erreur ».
	"python.linting.mypyCategorySeverity.error": "Error",
	// %python.linting.mypyCategorySeverity.note.description%.
	"python.linting.mypyCategorySeverity.note": "Information",
	// Indique s’il faut linter les fichiers Python à l’aide de mypy.
	"python.linting.mypyEnabled": false,
	// Chemin vers mypy, vous pouvez utiliser une version personnalisée de mypy en modifiant ce paramètre pour inclure le chemin complet.
	"python.linting.mypyPath": "mypy",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.prospectorArgs": [],
	// Si l'on veut lier les fichiers Python en utilisant prospecteur.
	"python.linting.prospectorEnabled": false,
	// Chemin d'accès à Prospector, vous pouvez utiliser une version personnalisée de Prospector en modifiant ce paramètre pour inclure le chemin d'accès complet.
	"python.linting.prospectorPath": "prospector",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.pycodestyleArgs": [],
	// Gravité du type de message pycodestyle « E »
	"python.linting.pycodestyleCategorySeverity.E": "Error",
	// Gravité du type de message pycodestyle « W »
	"python.linting.pycodestyleCategorySeverity.W": "Warning",
	// Indique s’il faut linter les fichiers Python à l’aide de pycodestyle.
	"python.linting.pycodestyleEnabled": false,
	// Chemin d'accès à pycodestyle. Vous pouvez utiliser une version personnalisée de pycodestyle en modifiant ce paramètre pour inclure le chemin d'accès complet.
	"python.linting.pycodestylePath": "pycodestyle",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.pydocstyleArgs": [],
	// Indique s’il faut linter les fichiers Python à l’aide de pydocstyle.
	"python.linting.pydocstyleEnabled": false,
	// Chemin vers pydocstyle, vous pouvez utiliser une version personnalisée de pydocstyle en modifiant ce paramètre pour inclure le chemin complet.
	"python.linting.pydocstylePath": "pydocstyle",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.pylamaArgs": [],
	// Indique s’il faut linter les fichiers Python à l’aide de pylama.
	"python.linting.pylamaEnabled": false,
	// Chemin vers pylama, vous pouvez utiliser une version personnalisée de pylama en modifiant ce paramètre pour inclure le chemin complet.
	"python.linting.pylamaPath": "pylama",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.linting.pylintArgs": [],
	// Gravité du message Pylint de type « Convention/C »
	"python.linting.pylintCategorySeverity.convention": "Information",
	// Gravité du message Pylint de type « Error/E »
	"python.linting.pylintCategorySeverity.error": "Error",
	// Gravité du message Pylint de type « Error/F »
	"python.linting.pylintCategorySeverity.fatal": "Error",
	// Gravité du type de message Pylint « Refactoriser/R »
	"python.linting.pylintCategorySeverity.refactor": "Hint",
	// Gravité du message Pylint de type « Warning/W »
	"python.linting.pylintCategorySeverity.warning": "Warning",
	// Indique s’il faut linter les fichiers Python à l’aide de pylint.
	"python.linting.pylintEnabled": false,
	// Chemin d'accès à Pylint, vous pouvez utiliser une version personnalisée de pylint en modifiant ce paramètre pour inclure le chemin complet.
	"python.linting.pylintPath": "pylint",
	// Niveau de journalisation auquel les journaux d’extension sont situés. La valeur par défaut est « error »
	"python.logging.level": "error",
	// Chemin de l’exécutable pipenv à utiliser pour l’activation
	"python.pipenvPath": "pipenv",
	// Chemin de l’exécutable de l’exécutable de l’exécutable
	"python.poetryPath": "poetry",
	// Ce paramètre sera bientôt supprimé. Utilisez 'isort.args' à la place.
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.sortImports.args": [],
	// Ce paramètre sera bientôt supprimé. Utilisez 'isort.path' à la place.
	// Chemin du script isort, valeur par défaut utilisant la version interne
	"python.sortImports.path": "",
	// Définissez ce paramètre sur votre répertoire de journal TensorBoard préféré pour ignorer l’invite de répertoire de journal lors du démarrage de TensorBoard.
	"python.tensorBoard.logDirectory": "",
	// Activez l’environnement Python dans le terminal actuel lors du chargement de l’extension.
	"python.terminal.activateEnvInCurrentTerminal": false,
	// Activez l’environnement Python dans le terminal créé à l’aide de l’extension.
	"python.terminal.activateEnvironment": true,
	// Lors de l’exécution d’un fichier dans le terminal, indique s’il faut l’utiliser dans le répertoire du fichier, au lieu du dossier actuellement ouvert.
	"python.terminal.executeInFileDir": false,
	// Lors du lancement d’un processus Python, indique s’il faut se concentrer sur le terminal.
	"python.terminal.focusAfterLaunch": false,
	// Arguments de lancement Python à utiliser lors de l’exécution d’un fichier dans le terminal
	"python.terminal.launchArgs": [],
	// Activez la découverte de test d’exécution automatique lors de l’enregistrement d’un fichier de test.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,
	// Répertoire de travail facultatif pour les tests
	"python.testing.cwd": null,
	// Numéro de port utilisé pour le débogage des tests
	"python.testing.debugPort": 3000,
	// Invitez à configurer une infrastructure de tests si des répertoires de tests potentiels sont découverts.
	"python.testing.promptToConfigure": true,
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.testing.pytestArgs": [],
	// Activez les tests à l’aide de pytest.
	"python.testing.pytestEnabled": false,
	// Chemin vers pytest (pytest), vous pouvez utiliser une version personnalisée de pytest en modifiant ce paramètre pour inclure le chemin complet.
	"python.testing.pytestPath": "pytest",
	// Arguments passés. Chaque argument est un élément distinct dans le tableau.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],
	// Activez les tests à l’aide d’unittest.
	"python.testing.unittestEnabled": false,
	// Dossiers de votre répertoire de base dans lesquels rechercher des environnements virtuels (prend en charge pyenv, direnv et virtualenvwrapper par défaut).
	"python.venvFolders": [],
	// Chemin du dossier avec une liste d’environnements virtuels (par exemple ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",
	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": false,
	// Offer user symbols in auto-import completions.
	"python.analysis.autoImportUserSymbols": false,
	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,
	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,
	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",
	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},
	// Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
	"python.analysis.exclude": [],
	// Allow using '.', '(' as commit characters when applicable.
	"python.analysis.extraCommitChars": true,
	// Additional import search resolution paths
	"python.analysis.extraPaths": [],
	// source fixes to run in fix all.
	"python.analysis.fixAll": [],
	// Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
	"python.analysis.ignore": [],
	// Defines the default format for import module.
	//  - absolute: Use absolute import format when creating new import statement.
	//  - relative: Use relative import format when creating new import statement.
	"python.analysis.importFormat": "absolute",
	// Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
	"python.analysis.include": [],
	// Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
	"python.analysis.indexing": true,
	// Enable/disable inlay hints for function return types:
	// ```python
	// def foo(x:int) ' -> int ':
	// 	return x
	// ```
	// 
	"python.analysis.inlayHints.functionReturnTypes": false,
	// Enable/disable inlay hints for variable types:
	// ```python
	// foo ' :list[str] ' = ["a"]
	//  
	// ```
	// 
	"python.analysis.inlayHints.variableTypes": false,
	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",
	// Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:
	// ```JSON
	// {"name": "package name (str)",
	//  "depth": "depth to scan (int)",
	//  "includeAllSymbols": "whether to include all symbols (bool)"}
	// 
	// ```
	// If `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.  
	//   
	// Usage example: 
	// ```JSON
	// [
	// 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
	// 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
	// ]
	// 
	// ```
	// 
	"python.analysis.packageIndexDepths": [
		{
			"name": "sklearn",
			"depth": 2
		},
		{
			"name": "matplotlib",
			"depth": 2
		},
		{
			"name": "scipy",
			"depth": 2
		},
		{
			"name": "django",
			"depth": 2
		}
	],
	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",
	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",
	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],
	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,
	// Après avoir exécuté une cellule, ajoutez une lentille de code 'Goto' sur la cellule. Notez que la désactivation de toutes les lentilles de code désactive également cette lentille de code.
	"jupyter.addGotoCodeLenses": true,
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Permet à un utilisateur d'importer un bloc-notes jupyter dans un fichier python à chaque fois qu'il est ouvert.
	"jupyter.allowImportFromNotebook": true,
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Autoriser la saisie de code python directement dans la Fenêtre interactive
	"jupyter.allowInput": true,
	// Ce paramètre est obsolète car la prise en charge de Live Share pour la fenêtre interactive n'existe plus dans l'extension Jupyter.
	// Autoriser le partage de la Fenêtre interactive lors d'une session Live Share
	"jupyter.allowLiveShare": true,
	// Autoriser la connexion de la Fenêtre interactive à un serveur https Jupyter qui n'a pas de certificats valides. Cela peut constituer un risque pour la sécurité, donc utilisez-le uniquement pour des serveurs connus et de confiance.
	"jupyter.allowUnauthorizedRemoteConnection": false,
	// Ce paramètre est obsolète. Utilisez plutôt le paramètre 'interactiveWindow.alwaysScrollOnNewCell'.
	// Faites défiler automatiquement la fenêtre interactive pour afficher la sortie de la dernière instruction exécutée. Si false, la fenêtre interactive ne défilera automatiquement que si le bas de la cellule précédente est visible.
	"jupyter.alwaysScrollOnNewCell": false,
	// Avertir l'utilisateur avant de redémarrer un noyau.
	"jupyter.askForKernelRestart": true,
	// Avertissez l'utilisateur avant d'essayer d'ouvrir des blocs de données très volumineux.
	"jupyter.askForLargeDataFrames": true,
	// Ensemble de commandes à placer comme lentille de code au-dessus d'une cellule.
	"jupyter.codeLenses": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",
	// Expression régulière utilisée pour identifier les cellules de code. Tout le code jusqu'à la prochaine correspondance est considéré comme faisant partie de cette cellule.
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
	// Ce paramètre est obsolète, veuillez utiliser `interactiveWindow.collapseCellInputCode` à la place.
	// Réduire le code d'entrée de la cellule par défaut.
	"jupyter.collapseCellInputCodeByDefault": true,
	// Ce paramètre est obsolète et sera supprimé dans une prochaine version.
	// S'il faut ou non utiliser la couleur d'aperçu du thème comme arrière-plan pour la zone de saisie.
	"jupyter.colorizeInputBox": true,
	// Ensemble de commandes de débogage à placer comme objectif de code au-dessus d'une cellule lors du débogage.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",
	// Lors du débogage, exécutez pas à pas uniquement via le code écrit par l’utilisateur. Désactivez cette option pour autoriser le pas à pas dans le code de bibliothèque.
	"jupyter.debugJustMyCode": true,
	// Chemin vers les bits de débogage pour le débogage des cellules.
	"jupyter.debugpyDistPath": "",
	// Dessinez une surbrillance derrière la cellule actuellement active.
	"jupyter.decorateCells": true,
	// Marqueur de cellule utilisé pour délimiter une cellule dans un fichier python.
	"jupyter.defaultCellMarker": "# %%",
	// Lorsqu'il est vrai, empêche Jupyter d'être démarré automatiquement pour vous. Vous devez à la place exécuter une cellule pour démarrer Jupyter.
	"jupyter.disableJupyterAutoStart": false,
	// Permet de passer à la cellule suivante en cliquant sur une lentille de code 'Run Cell'.
	"jupyter.enableAutoMoveToNextCell": true,
	// Active l'objectif de code pour les 'cellules' dans un fichier python.
	"jupyter.enableCellCodeLens": true,
	// Active la prise en charge de Jedi pour les complétions IntelliSense étendues dans les noyaux Jupyter en cours d'exécution (voir ce [paramètre](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi) ). Cela peut avoir un impact considérable sur les performances d'exécution des cellules de bloc-notes. Utiliser avec précaution.
	"jupyter.enableExtendedKernelCompletions": false,
	// Ce paramètre est devenu obsolète car les raccourcis clavier Jupyter ont été déplacés dans l'extension ms-toolsai.jupyter-keymap. Si vous souhaitez désactiver les raccourcis clavier Jupyter, veuillez plutôt désinstaller ou désactiver cette extension.
	// Active les raccourcis clavier de style Jupyter pour les ordinateurs portables.
	"jupyter.enableKeyboardShortcuts": true,
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Active le défilement pour les sorties de grandes cellules dans l'éditeur Notebook. Ce paramètre ne s'applique pas à la Fenêtre interactive.
	"jupyter.enableScrollingForCellOutputs": true,
	// Ajoutez PYTHONNOUSERSITE aux noyaux avant de commencer. Cela empêche l'utilisation des packages de site global/utilisateur dans le PYTHONPATH du noyau.
	"jupyter.excludeUserSitePackages": false,
	// Choisissez le type de sélecteur de noyau à utiliser.
	//  - Stable: Le sélecteur de noyau stable actuel
	//  - OnlyOneTypeOfKernel: Makes it so the picker will only show remote or local kernels, not both. And provides options to switch between local and remote kernels in the picker.
	//  - Insiders: Insiders est la nouvelle version expérimentale en développement.
	"jupyter.experimental.kernelPickerType": "Stable",
	// Active/désactive les tests A/B.
	"jupyter.experiments.enabled": true,
	// Liste des tests auxquels participer. Si vide, l'utilisateur se voit attribuer les groupes de tests par défaut. [En savoir plus](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],
	// Liste des expériences à désactiver. Si vide, l'utilisateur se voit attribuer les groupes de tests par défaut. [En savoir plus](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],
	// Activez l'exportation d'un fichier python dans un cahier jupyter et exécutez toutes les cellules lors de cette opération.
	"jupyter.exportWithOutputEnabled": false,
	// Générez une sortie SVG pour les tracés de notebook. Cela permet un meilleur affichage dans la visionneuse de tracé au détriment de la vitesse de génération et de la taille du fichier.
	"jupyter.generateSVGPlots": false,
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// N'utilisez pas le thème VS Code dans la Fenêtre interactive (nécessite le rechargement de VS Code). Cela force la Fenêtre interactive à utiliser 'Light + (default light)' et désactive les valeurs par défaut de matplotlib.
	"jupyter.ignoreVscodeTheme": false,
	// Comportement de la fenêtre interactive. 'perFile' créera une nouvelle fenêtre interactive pour chaque fichier qui exécute une cellule. 'single' autorise une seule fenêtre. 'multiple' permet la création de multiples.
	"jupyter.interactiveWindowMode": "multiple",
	// Emplacement d’ouverture d’une fenêtre interactive qui n’est pas associée à un fichier Python. « beside » ouvre la fenêtre interactive à droite de l’éditeur actif. « 'active' » ouvre la fenêtre interactive à la place de l’éditeur actif. « 'secondGroup' » ouvrira la fenêtre interactive dans le deuxième groupe d’éditeurs.
	"jupyter.interactiveWindowViewColumn": "secondGroup",
	// Lorsqu'un serveur Notebook Editor ou Interactive Window Jupyter est démarré, ces arguments lui sont transmis. Par défaut, cette liste est générée par l'extension Jupyter.
	"jupyter.jupyterCommandLineArguments": [],
	// Durée (en ms) d'attente d'une interruption avant de demander de redémarrer le noyau Jupyter.
	"jupyter.jupyterInterruptTimeout": 10000,
	// Nombre de tentatives de connexion au Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,
	// Durée (en ms) d'attente pour le démarrage du serveur Jupyter Notebook.
	"jupyter.jupyterLaunchTimeout": 60000,
	// Liste des noyaux Jupyter et/ou des environnements Python qui doivent être exclus du sélecteur de noyau.
	"jupyter.kernels.filter": [],
	// Entrez les chemins qualifiés complets des fichiers de spécification du noyau qui doivent être approuvés. Par exemple, « C:\Program Data\Jupyter\kernels\python3\kernel.json ».  
	// **Remarque** : les noyaux peuvent exécuter du code avec des privilèges utilisateur. Cliquez [ici](https://aka.ms/JupyterTrustedKernelPaths) pour plus d’informations.
	"jupyter.kernels.trusted": [],
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Temps d'attente des connexions invitées pour vérifier que l'extension Python est installée.
	"jupyter.liveShareConnectionTimeout": 1000,
	// Le niveau de journalisation auquel l'extension se connecte.
	"jupyter.logging.level": "debug",
	// Crée des panneaux de sortie séparés pour la sortie de la console du serveur kernels/jupyter
	"jupyter.logKernelOutputSeparately": false,
	// Décommentez les affectations de shell (#!), la magie de ligne (#!%) et la magie de cellule (#!%%) lors de l'analyse des cellules de code.
	"jupyter.magicCommandsAsComments": false,
	// Expression régulière utilisée pour identifier les cellules de démarquage. Tous les commentaires après cette expression sont considérés comme faisant partie de la démarque.
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Taille maximale (en pixels) de la sortie de texte dans l'éditeur Notebook avant l'apparition d'une barre de défilement. Activez d'abord le défilement des sorties de cellule dans les paramètres.
	"jupyter.maxOutputSize": 400,
	// Ajouter une nouvelle cellule vide à un fichier de fenêtre interactive lors de l'exécution de la dernière cellule actuelle.
	"jupyter.newCellOnRunLast": true,
	// Définissez le répertoire racine pour exécuter les blocs-notes et la Fenêtre interactive.
	"jupyter.notebookFileRoot": "${fileDirname}",
	// Determines if Pylance manages notebook concat doc creation.
	"jupyter.pylanceHandlesNotebooks": true,
	// Caractères qui déclenchent l'auto-complétion sur un noyau python jupyter.
	"jupyter.pythonCompletionTriggerCharacters": ".%'\"",
	// La méthode à utiliser lors de l'exportation d'un bloc-notes vers un fichier Python. 'direct' copiera directement le code tel quel. 'commentMagics' commentera les lignes commençant par les magies de ligne (%), les magies de cellule (%%) et les commandes shell (!). 'nbconvert' installera nbconvert et l'utilisera pour la conversion qui peut traduire la syntaxe iPython en syntaxe Python.
	"jupyter.pythonExportMethod": "direct",
	// Lors du débogage d'une cellule, ouvrez ce port sur le boîtier distant. Si -1 est spécifié, un port aléatoire entre 8889 et 9000 sera tenté.
	"jupyter.remoteDebuggerPort": -1,
	// Une série d'instructions Python ou de commandes magiques iPython. Il peut s'agir d'un tableau de chaînes ou d'une seule chaîne avec des commandes séparées par '\n'. Les commandes seront exécutées silencieusement à chaque chargement de la fenêtre interactive. Par exemple, définissez-le sur '%load_ext autoreload\n%autoreload 2' pour recharger automatiquement les modifications apportées aux fichiers importés sans avoir à redémarrer la session interactive.
	"jupyter.runStartupCommands": "",
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Rechercher tous les interpréteurs Python installés pour une installation Jupyter lors du démarrage de la Fenêtre interactive
	"jupyter.searchForJupyter": true,
	// Lorsque vous appuyez sur Maj + Entrée, envoyez le code sélectionné dans un fichier Python à la fenêtre interactive Jupyter, par opposition au terminal Python.
	"jupyter.sendSelectionToInteractiveWindow": false,
	// Ce paramètre est obsolète et sera supprimé dans la prochaine version.
	// Afficher le code d'entrée de la cellule.
	"jupyter.showCellInputCode": true,
	// Afficher un seul type de noyau dans le sélecteur de noyau. Cela empêche l’affichage simultané des noyaux locaux et des noyaux distants dans le sélecteur de noyau. Est prioritaire sur kernelPickerType si spécifié.
	"jupyter.showOnlyOneTypeOfKernel": "true",
	// Affichez le bouton Plan dans la barre d'outils du bloc-notes Jupyter.
	"jupyter.showOutlineButtonInNotebookToolbar": true,
	// Affichez la vue Variable lors du démarrage d'une session Exécuter par ligne.
	"jupyter.showVariableViewWhenDebugging": true,
	// Arrêter l'exécution des cellules si une cellule lève une exception.
	"jupyter.stopOnError": true,
	// Lors du débogage d'une cellule, arrêtez-vous sur la première ligne.
	"jupyter.stopOnFirstLineWhileDebugging": true,
	// Ce paramètre est obsolète au profit de `notebook.output.textLineLimit`. Ce paramètre sera supprimé dans une prochaine version.
	// Limitez la quantité de texte dans la sortie de texte de cellule interactive à cette valeur. 0 pour autoriser n'importe quel nombre de caractères.
	"jupyter.textOutputLimit": 20000,
	// Dans la Fenêtre interactive et le thème de l'éditeur Notebook, les sorties matplotlib correspondent au thème de l'éditeur de code VS.
	"jupyter.themeMatplotlibPlots": false,
	// Lorsque vous exécutez Jupyter localement, créez une configuration Jupyter vide par défaut pour la Fenêtre interactive
	"jupyter.useDefaultConfigForJupyter": true,
	// Types à exclure de l'affichage dans l'explorateur de variables interactif
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",
	// Langage de mappage de requête pour renvoyer la liste des variables actives dans un noyau Jupyter. Utilisé par l'explorateur de variables dans la fenêtre interactive et les blocs-notes. Exemple : 
	// ```
	// [
	//   {
	//     "language": "python",
	//     "query": "%who_ls",
	//     "parseExpr": "'(\\w+)'"
	//   }
	// ]
	// ```
	"jupyter.variableQueries": [],
	// Définit l'emplacement et l'ordre des sources à partir desquelles les fichiers de scripts pour les widgets sont téléchargés (par exemple, ipywidgest, bqplot, beakerx, ipyleaflet, etc.). Si vous ne sélectionnez aucun de ces éléments, les widgets ne s'afficheront pas ou ne fonctionneront pas correctement. Voir [ici](https://aka.ms/PVSCIPyWidgets) pour plus d'informations. Une fois mis à jour, vous devrez redémarrer le noyau.
	//  - jsdelivr.com: Charge les scripts de widget (javascript) à partir de https://www.jsdelivr.com/
	//  - unpkg.com: Charge les scripts de widget (javascript) à partir de https://unpkg.com/
	"jupyter.widgetScriptSources": [],
	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"dev.containers.cacheVolume": true,
	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"dev.containers.copyGitConfig": true,
	// Configures the list of extensions to always install while creating a container.
	"dev.containers.defaultExtensions": [],
	// Configures the list of features to always install while creating a container.
	"dev.containers.defaultFeatures": {},
	// Docker Compose executable name or path.
	"dev.containers.dockerComposePath": "docker-compose",
	// Docker (or Podman) executable name or path.
	"dev.containers.dockerPath": "docker",
	// Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
	"dev.containers.executeInWSL": false,
	// WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `dev.containers.executeInWSL` is not enabled or on other platforms than Windows.
	"dev.containers.executeInWSLDistro": "",
	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"dev.containers.gitCredentialHelperConfigLocation": "global",
	// The log level for the extension.
	"dev.containers.logLevel": "debug",
	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
	"dev.containers.repositoryConfigurationPaths": [],
	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"dev.containers.workspaceMountConsistency": "cached",
	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",
	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",
	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",
	// Use `dev.containers.cacheVolume` instead.
	// 
	"remote.containers.cacheVolume": null,
	// Use `dev.containers.copyGitConfig` instead.
	// 
	"remote.containers.copyGitConfig": null,
	// Use `dev.containers.defaultExtensions` instead.
	// 
	"remote.containers.defaultExtensions": null,
	// Use `dev.containers.dockerComposePath` instead.
	// 
	"remote.containers.dockerComposePath": null,
	// Use `dev.containers.dockerPath` instead.
	// 
	"remote.containers.dockerPath": null,
	// Use `dotfiles.installCommand` instead.
	// 
	"remote.containers.dotfiles.installCommand": null,
	// Use `dotfiles.repository` instead.
	// 
	"remote.containers.dotfiles.repository": null,
	// Use `dotfiles.targetPath` instead.
	// Deprecated setting. Use 'dotfiles.targetPath' instead.
	"remote.containers.dotfiles.targetPath": null,
	// Use `dev.containers.executeInWSL` instead.
	// 
	"remote.containers.executeInWSL": null,
	// Use `dev.containers.executeInWSLDistro` instead.
	// 
	"remote.containers.executeInWSLDistro": null,
	// Use `dev.containers.gitCredentialHelperConfigLocation` instead.
	// 
	"remote.containers.gitCredentialHelperConfigLocation": null,
	// Use `dev.containers.logLevel` instead.
	// 
	"remote.containers.logLevel": null,
	// Use `dev.containers.repositoryConfigurationPaths` instead.
	// Deprecated setting. Use 'dev.containers.repositoryConfigurationPaths' instead.
	"remote.containers.repositoryConfigurationPaths": null,
	// Use `dev.containers.workspaceMountConsistency` instead.
	// 
	"remote.containers.workspaceMountConsistency": null,
	// Enables various accessibility features, such as audio cues about what is happening in the session.
	"liveshare.accessibility.accessibilityFeaturesEnabled": "auto",
	// Output device to play audio in accessibility mode.
	"liveshare.accessibility.outputDevice": "Default",
	// Enables sound effects about activity.
	"liveshare.accessibility.soundsEnabled": true,
	// Controls the volume of sound audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.soundVolume": 100,
	// Controls the rate of speech in accessibility mode.
	"liveshare.accessibility.speechRate": 2,
	// The voice used for speech in accessibility mode.
	"liveshare.accessibility.voice": "en-US-Jenny",
	// Enables spoken announcements about activity.
	"liveshare.accessibility.voiceEnabled": true,
	// Controls the volume of voice audio in accessibility mode (between 0 and 100).
	"liveshare.accessibility.voiceVolume": 100,
	// Allow guests to start and stop debugging sessions.
	"liveshare.allowGuestDebugControl": false,
	// Allow guests to run and terminate workspace tasks.
	"liveshare.allowGuestTaskControl": false,
	// Specifies who to allow session invitations from.
	"liveshare.allowInvites": "contacts",
	// Ensures that the session's host is always followed.
	"liveshare.alwaysFollowHost": false,
	// Controls how to handle join requests from anonymous guests.
	"liveshare.anonymousGuestApproval": "prompt",
	// Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
	"liveshare.autoShareServers": true,
	// Controls whether terminals are automatically shared with guests (read-only).
	"liveshare.autoShareTerminals": true,
	// Controls whether to show the CodeLens for starting a collaboration session.
	"liveshare.codeLens": true,
	// Controls whether to allow comments in collaboration sessions
	"liveshare.comments": true,
	// Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
	"liveshare.connectionMode": "auto",
	// Enables the Visual Studio Live Share output channel.
	"liveshare.diagnosticLogging": false,
	// Specifies the level of logging output from Visual Studio Live Share Extension
	"liveshare.diagnosticLoggingLevel": "Warning",
	// Enables diagnostic notifications and logs.
	"liveshare.diagnosticMode": false,
	// Controls set of active features. By selecting `insiders`, you agree to the [Pre-Release Software License Terms](https://aka.ms/vsls-license-preview) and [Privacy Statement](https://aka.ms/vsls-privacy).
	"liveshare.featureSet": "stable",
	// Specifies how to respond to focus requests from other participants.
	"liveshare.focusBehavior": "accept",
	// Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
	"liveshare.guestApprovalRequired": false,
	// Increases the guest limit from 5 to 30.
	"liveshare.increasedGuestLimit": true,
	// Controls how the participant will join incoming shared debug sessions.
	"liveshare.joinDebugSessionOption": "Automatic",
	// Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
	"liveshare.keepAliveInterval": 20,
	// Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
	"liveshare.languages.allowGuestCommandControl": false,
	// Specifies the client to launch when clicking on a Live Share URL.
	"liveshare.launcherClient": "web",
	// Controls when to display a participant's name tag instead of just their cursor.
	"liveshare.nameTagVisibility": "Activity",
	// Allow guests to run notebook cells
	"liveshare.notebooks.allowGuestExecuteCells": false,
	// Controls whether to automatically open shared servers in your default browser.
	"liveshare.openSharedServers": true,
	// Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
	"liveshare.populateGitCoAuthors": "always",
	// Controls whether to publish your presence to other users, and allow in-tool invites for collaboration sessions
	"liveshare.presence": false,
	// Controls whether to publish your current workspace folder to other users
	"liveshare.publishWorkspaceInfo": false,
	// Height of shared terminal window, characters.
	"liveshare.sharedTerminalHeight": 50,
	// Width of shared terminal window, characters.
	"liveshare.sharedTerminalWidth": 120,
	// Automatically share external files opened by the host during a collaboration session.
	"liveshare.shareExternalFiles": true,
	// Show or hide the Live Share status bar items.
	"liveshare.showInStatusBar": "always",
	// Controls visibility of the cursor and highlights for read-only users.
	"liveshare.showReadOnlyUsersInEditor": "whileFollowing",
	// Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
	"liveshare.showVerboseNotifications": true,
	// Controls if plugin is enabled
	"color-highlight.enable": true,
	// An array of language ids which should be highlighted by Color Highlight. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.languages": [
		"*"
	],
	// Style of the highlight. Can be 'dot-before', 'dot-after', 'foreground', 'background', 'outline', 'underline'
	"color-highlight.markerType": "background",
	// Highlight colors on the ruler (scroll bar), true/false
	"color-highlight.markRuler": true,
	// Highlight rgb without functions like rgb() ('255, 255, 255', [255, 255, 255], '255 255 255', etc.)
	"color-highlight.matchRgbWithNoFunction": false,
	// Highlight color words in all files (grey, green, etc.)
	"color-highlight.matchWords": false,
	// An array of language ids which should be highlighted by Color Highlight with the rgbWithNoFunction pattern. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.rgbWithNoFunctionLanguages": [
		"*"
	],
	// Array of absolute paths to search while perform file lookups.
	"color-highlight.sass.includePaths": [],
	// Sélectionner un pack d'icônes qui active des icônes spécifiques.
	//  - angular: Icônes pour Angular.
	//  - angular_ngrx: Icônes pour Angular et ngrx.
	//  - react: Icônes pour React.
	//  - react_redux: Icônes pour React et Redux.
	//  - vue: Icônes pour Vue.
	//  - vue_vuex: Icônes pour Vue et Vuex.
	//  - nest: Icônes pour NestJS.
	//  - none: Aucun pack d'icônes n'est actif.
	"material-icon-theme.activeIconPack": "angular",
	// Configurer des associations d'icônes de fichiers personnalisés.
	"material-icon-theme.files.associations": {},
	// Configurer des associations d'icônes de dossier personnalisées.
	"material-icon-theme.folders.associations": {},
	// Changer la couleur des icônes du dossier.
	"material-icon-theme.folders.color": "#90a4ae",
	// Sélectionner le type d'icônes de dossier.
	//  - specific: Sélectionner des icônes de dossiers spécifiques.
	//  - classic: Sélectionner les icônes des dossiers classiques.
	//  - none: Pas d'icônes de dossier.
	"material-icon-theme.folders.theme": "specific",
	// Désactiver les flèches devant les dossiers.
	"material-icon-theme.hidesExplorerArrows": false,
	// Configurer des associations d'icônes de langue personnalisées.
	"material-icon-theme.languages.associations": {},
	// Ajuster l'opacité des icônes.
	"material-icon-theme.opacity": 1,
	// Change the saturation of the icons.
	"material-icon-theme.saturation": 1,
	// Enable/disable the 'auto build'
	"java.autobuild.enabled": true,
	// The list of clean ups to be run on the current document when it's saved. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.
	"java.cleanup.actionsOnSave": [],
	// Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
	"java.codeAction.sortMembers.avoidVolatileChanges": true,
	// Generate method comments when generating the methods.
	"java.codeGeneration.generateComments": false,
	// Use 'instanceof' to compare types when generating the hashCode and equals methods.
	"java.codeGeneration.hashCodeEquals.useInstanceof": false,
	// Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
	"java.codeGeneration.hashCodeEquals.useJava7Objects": false,
	// Specifies the insertion location of the code generated by source actions.
	//  - afterCursor: Insert the generated code after the member where the cursor is located.
	//  - beforeCursor: Insert the generated code before the member where the cursor is located.
	//  - lastMember: Insert the generated code as the last member of the target type.
	"java.codeGeneration.insertionLocation": "afterCursor",
	// The code style for generating the toString method.
	//  - STRING_CONCATENATION: String concatenation
	//  - STRING_BUILDER: StringBuilder/StringBuffer
	//  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
	//  - STRING_FORMAT: String.format/MessageFormat
	"java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",
	// Limit number of items in arrays/collections/maps to list, if 0 then list all.
	"java.codeGeneration.toString.limitElements": 0,
	// List contents of arrays instead of using native toString().
	"java.codeGeneration.toString.listArrayContents": true,
	// Skip null values when generating the toString method.
	"java.codeGeneration.toString.skipNullValues": false,
	// The template for generating the toString method.
	"java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",
	// Use blocks in 'if' statements when generating the methods.
	"java.codeGeneration.useBlocks": false,
	// Specify how to enable the annotation-based null analysis.
	"java.compile.nullAnalysis.mode": "interactive",
	// Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nonnull": [
		"javax.annotation.Nonnull",
		"org.eclipse.jdt.annotation.NonNull",
		"org.springframework.lang.NonNull"
	],
	// Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
	"java.compile.nullAnalysis.nullable": [
		"javax.annotation.Nullable",
		"org.eclipse.jdt.annotation.Nullable",
		"org.springframework.lang.Nullable"
	],
	// Enable/disable code completion support
	"java.completion.enabled": true,
	// Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
	"java.completion.favoriteStaticMembers": [
		"org.junit.Assert.*",
		"org.junit.Assume.*",
		"org.junit.jupiter.api.Assertions.*",
		"org.junit.jupiter.api.Assumptions.*",
		"org.junit.jupiter.api.DynamicContainer.*",
		"org.junit.jupiter.api.DynamicTest.*",
		"org.mockito.Mockito.*",
		"org.mockito.ArgumentMatchers.*",
		"org.mockito.Answers.*"
	],
	// Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
	"java.completion.filteredTypes": [
		"java.awt.*",
		"com.sun.*",
		"sun.*",
		"jdk.*",
		"org.graalvm.*",
		"io.micrometer.shaded.*"
	],
	// When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
	"java.completion.guessMethodArguments": true,
	// Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
	"java.completion.importOrder": [
		"#",
		"java",
		"javax",
		"org",
		"com",
		""
	],
	// Specify whether to match case for code completion.
	//  - auto: Only match case for the first letter when using Visual Studio Code - Insiders.
	//  - firstLetter: Match case for the first letter when doing completion.
	//  - off: Do not match case when doing completion.
	"java.completion.matchCase": "auto",
	// Maximum number of completion results (not including snippets).
	// `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
	"java.completion.maxResults": 0,
	// Enable/disable postfix completion support. `editor.snippetSuggestions` can be used to customize how postfix snippets are sorted.
	"java.completion.postfix.enabled": true,
	// Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
	// Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
	"java.configuration.checkProjectSettingsExclusions": false,
	// Path to Maven's global settings.xml
	"java.configuration.maven.globalSettings": null,
	// Specifies severity if the plugin execution is not covered by Maven build lifecycle.
	"java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",
	// Path to Maven's user settings.xml
	"java.configuration.maven.userSettings": null,
	// Map Java Execution Environments to local JDKs.
	"java.configuration.runtimes": [],
	// Specifies how modifications on build files update the Java classpath/configuration
	"java.configuration.updateBuildConfiguration": "interactive",
	// The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
	"java.configuration.workspaceCacheLimit": 90,
	// Preferred content provider (a 3rd party decompiler id, usually)
	"java.contentProvider.preferred": null,
	// Enable/disable download of Maven source artifacts for Eclipse projects.
	"java.eclipse.downloadSources": false,
	// Specifies the severity of the message when the classpath is incomplete for a Java file
	"java.errors.incompleteClasspath.severity": "warning",
	// Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
	"java.foldingRange.enabled": true,
	// Includes the comments during code formatting.
	"java.format.comments.enabled": true,
	// Enable/disable default Java formatter
	"java.format.enabled": true,
	// Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
	"java.format.onType.enabled": true,
	// Optional formatter profile name from the Eclipse formatter settings.
	"java.format.settings.profile": null,
	// Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
	"java.format.settings.url": null,
	// This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
	// Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server.
	// On Windows, backslashes must be escaped, i.e.
	// "java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
	"java.home": null,
	// Enable/disable the implementations code lens.
	"java.implementationsCodeLens.enabled": false,
	// Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
	"java.import.exclusions": [
		"**/node_modules/**",
		"**/.metadata/**",
		"**/archetype-resources/**",
		"**/META-INF/maven/**"
	],
	// Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
	"java.import.generatesMetadataFilesAtProjectRoot": false,
	// Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher.
	"java.import.gradle.annotationProcessing.enabled": true,
	// Arguments to pass to Gradle.
	"java.import.gradle.arguments": null,
	// Enable/disable the Gradle importer.
	"java.import.gradle.enabled": true,
	// Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
	"java.import.gradle.home": null,
	// The location to the JVM used to run the Gradle daemon.
	"java.import.gradle.java.home": null,
	// JVM arguments to pass to Gradle.
	"java.import.gradle.jvmArguments": null,
	// Enable/disable the Gradle offline mode.
	"java.import.gradle.offline.enabled": false,
	// Setting for GRADLE_USER_HOME.
	"java.import.gradle.user.home": null,
	// Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
	"java.import.gradle.version": null,
	// Use Gradle from the 'gradle-wrapper.properties' file.
	"java.import.gradle.wrapper.enabled": true,
	// Enable/disable the Maven importer.
	"java.import.maven.enabled": true,
	// Enable/disable the Maven offline mode.
	"java.import.maven.offline.enabled": false,
	// Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
	"java.imports.gradle.wrapper.checksums": [],
	// Enable/disable inlay hints for parameter names:
	// ```java
	// 
	// Integer.valueOf(/* s: */ '123', /* radix: */ 10)
	//  
	// ```
	//  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
	//  - none: Disable parameter name hints
	//  - literals: Enable parameter name hints only for literal arguments
	//  - all: Enable parameter name hints for literal and non-literal arguments
	"java.inlayHints.parameterNames.enabled": "literals",
	// The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
	//  - `java.lang.Math.*` - All the methods from java.lang.Math.
	//  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
	//  - `*.println(*)` - Methods named as 'println'.
	//  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
	//  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
	"java.inlayHints.parameterNames.exclusions": [],
	// [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
	// 
	// **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
	"java.jdt.ls.androidSupport.enabled": "auto",
	// Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server. 
	// 
	// On Windows, backslashes must be escaped, i.e.
	// "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
	"java.jdt.ls.java.home": null,
	// Whether to load lombok processors from project classpath
	"java.jdt.ls.lombokSupport.enabled": true,
	// Specify whether to automatically add Protobuf output source directories to the classpath.
	// 
	// **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
	"java.jdt.ls.protobufSupport.enabled": true,
	// Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable",
	// Enable/disable download of Maven source artifacts as part of importing Maven projects.
	"java.maven.downloadSources": false,
	// Force update of Snapshots/Releases.
	"java.maven.updateSnapshots": false,
	// Max simultaneous project builds
	"java.maxConcurrentBuilds": 1,
	// [Experimental] Enable/disable progress reports from background processes on the server.
	"java.progressReports.enabled": true,
	// Project encoding settings
	//  - ignore: Ignore project encoding settings
	//  - warning: Show warning if a project has no explicit encoding set
	//  - setDefault: Set the default workspace encoding settings
	"java.project.encoding": "ignore",
	// Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
	"java.project.importHint": true,
	// Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
	"java.project.importOnFirstTimeStartup": "automatic",
	// A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.outputPath": "",
	// Configure glob patterns for referencing local libraries to a Java project.
	"java.project.referencedLibraries": [
		"lib/**/*.jar"
	],
	// Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named 'node_modules' or '.git'. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
	"java.project.resourceFilters": [
		"node_modules",
		"\\.git"
	],
	// Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
	"java.project.sourcePaths": [],
	// Show quickfixes at the problem or line level.
	"java.quickfix.showAt": "line",
	// Show the recommended Dependency Analytics extension.
	"java.recommendations.dependency.analytics.show": true,
	// Include getter, setter and builder/constructor when finding references.
	"java.references.includeAccessors": true,
	// Include the decompiled sources when finding references.
	"java.references.includeDecompiledSources": true,
	// Enable/disable the references code lens.
	"java.referencesCodeLens.enabled": false,
	// Enable/disable auto organize imports on save action
	"java.saveActions.organizeImports": false,
	// Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
	"java.selectionRange.enabled": true,
	// The launch mode for the Java extension
	//  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
	//  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
	//  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
	"java.server.launchMode": "Hybrid",
	// Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
	"java.settings.url": null,
	// [Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.
	"java.sharedIndexes.enabled": "auto",
	// Specifies a common index location for all workspaces. See default values as follows:
	//  
	// Windows: First use `"$APPDATA\\.jdt\\index"`, or `"~\\.jdt\\index"` if it does not exist
	//  
	// macOS: `"~/Library/Caches/.jdt/index"`
	//  
	// Linux: First use `"$XDG_CACHE_HOME/.jdt/index"`, or `"~/.cache/.jdt/index"` if it does not exist
	"java.sharedIndexes.location": "",
	// Automatically show build status on startup.
	"java.showBuildStatusOnStart.enabled": "notification",
	// Enable/disable to show the description in signature help.
	"java.signatureHelp.description.enabled": false,
	// Enable/disable the signature help.
	"java.signatureHelp.enabled": true,
	// Specifies the number of imports added before a star-import declaration is used.
	"java.sources.organizeImports.starThreshold": 99,
	// Specifies the number of static imports added before a star-import declaration is used.
	"java.sources.organizeImports.staticStarThreshold": 99,
	// Include method declarations from source files in symbol search.
	"java.symbols.includeSourceMethodDeclarations": false,
	// Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.fileHeader": [],
	// Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
	"java.templates.typeComment": [],
	// Traces the communication between VS Code and the Java language server.
	"java.trace.server": "off",
	// Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
	"java.typeHierarchy.lazyLoad": false,
	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": null,
	// Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information.
	"xml.catalogs": [],
	// Enable/disable XML CodeLens. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22CodeLens%22%2C%22section%22%3A%22Code%20Lens%22%7D%5D) for information about CodeLens features
	"xml.codeLens.enabled": false,
	// Allows colors for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLColorsFeatures%22%2C%22section%22%3A%22xmlcolorsfeatures%22%7D%5D) for more information.
	"xml.colors": [],
	// Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22auto-close-removes-content%22%7D%5D) for more information.
	"xml.completion.autoCloseRemovesContent": true,
	// Enable/disable autoclosing of XML tags. Default is `true`. 
	// 
	// IMPORTANT: Turn off `editor.autoClosingTags` for this to work.
	"xml.completion.autoCloseTags": true,
	// Download external resources like referenced DTD, XSD. Default is `true`.
	"xml.downloadExternalResources.enabled": true,
	// An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22extension-jars%22%7D%5D) for more information
	"xml.extension.jars": [],
	// Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information. 
	// 
	// Example:
	// ```json
	// [{
	//   "pattern": "file1.xml",
	//   "systemId": "path/to/file.xsd"
	// },
	// {
	//   "pattern": "**/*.xsd",
	//   "systemId": "http://www.w3.org/2001/XMLSchema.xsd"
	// }]
	// ```
	"xml.fileAssociations": [],
	// Minimize the closing tag after folding. Default is `false`.
	"xml.foldings.includeClosingTagInFold": false,
	// The option to put a closing bracket on a newline when `xml.format.splitAttributes` is `true`. Default value is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatclosingbracketnewline%22%7D%5D) for more information.
	"xml.format.closingBracketNewLine": false,
	// Expand/collapse empty elements. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatemptyelements%22%7D%5D) for more information.
	"xml.format.emptyElements": "ignore",
	// Enable/disable ability to format document. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenabled%22%7D%5D) for more information.
	"xml.format.enabled": true,
	// Enforce `preferred` quote style (set by `xml.preferences.quoteStyle`) or `ignore` quote style when formatting. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenforcequotestyle%22%7D%5D) for more information.
	//  - preferred: Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.
	//  - ignore: Ignore quote style formatting.
	"xml.format.enforceQuoteStyle": "ignore",
	// Use Schema/DTD grammar information while formatting. Default is `true`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatgrammarawareformatting%22%7D%5D) for more information.
	"xml.format.grammarAwareFormatting": true,
	// Set to `true` to join lines in CDATA content during formatting. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincdatalines%22%7D%5D) for more information.
	"xml.format.joinCDATALines": false,
	// Join comment content on format. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincommentlines%22%7D%5D) for more information.
	"xml.format.joinCommentLines": false,
	// Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincontentlines%22%7D%5D) for more information.
	"xml.format.joinContentLines": false,
	// Enable/disable legacy formatter. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatlegacy%22%7D%5D) for more information.
	"xml.format.legacy": false,
	// Max line width. Set to `0` to disable this setting. Default is `100`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatmaxlinewidth%22%7D%5D) for more information.
	"xml.format.maxLineWidth": 100,
	// Preserve line breaks that appear before and after attributes. This setting is overridden if `xml.format.splitAttributes` is set to `true`. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveattributelinebreaks%22%7D%5D) for more information.
	"xml.format.preserveAttributeLineBreaks": true,
	// Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservednewlines%22%7D%5D) for more information.
	"xml.format.preservedNewlines": 2,
	// Preserve empty content/whitespace in a tag. Default is `false`. Supported only with legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveemptycontent%22%7D%5D) for more information.
	"xml.format.preserveEmptyContent": false,
	// Element names for which spaces will be preserved. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservespace%22%7D%5D) for more information.
	"xml.format.preserveSpace": [
		"xsl:text",
		"xsl:comment",
		"xsl:processing-instruction",
		"literallayout",
		"programlisting",
		"screen",
		"synopsis",
		"pre",
		"xd:pre"
	],
	// Insert space before end of self closing tag. 
	// Example:
	//   ```<tag/> -> <tag />```. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatspacebeforeemptyclosetag%22%7D%5D) for more information.
	"xml.format.spaceBeforeEmptyCloseTag": true,
	// Split multiple attributes each onto a new line. Default is `false`. Indicate level of indentation with `xml.format.splitAttributesIndentSize`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributes%22%7D%5D) for more information.
	"xml.format.splitAttributes": false,
	// How many levels to indent the attributes by when `xml.format.splitAttributes` is `true`. Default value is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributesindentsize%22%7D%5D) for more information
	"xml.format.splitAttributesIndentSize": 2,
	// Split `xsi:schemaLocation` content. Default is `onPair`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatxsischemalocationsplit%22%7D%5D) for more information
	//  - onElement: Put a new line after each namespace and URI, arranging them into one column.
	//  - onPair: Put a new line after each URI, arranging the content into pairs of namespace and URI.
	//  - none: Ignore `xsi:schemaLocation` content formatting.
	"xml.format.xsiSchemaLocationSplit": "onPair",
	// Specifies the folder path to the JDK (8 or more recent) used to launch the XML Language Server if the Java server is being run.
	// On Windows, backslashes must be escaped, i.e.
	// `"xml.java.home": "C:\\Program Files\\Java\\jdk1.8.0_161"`. For more information, please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22java-home%22%7D%5D).
	"xml.java.home": null,
	// Enable/disable logging to the Output view. Default is `true`.
	"xml.logs.client": true,
	// Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`.
	"xml.preferences.quoteStyle": "double",
	// Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22documentation-type%22%7D%5D) for more information.
	//  - documentation: Documentation comes from the `xs:documentation` element.
	//  - appinfo: Documentation comes from the `xs:appinfo` element.
	//  - all: Documentation comes from the `xs:documentation` and `xs:appinfo` elements.
	//  - none: Displays no documentation.
	"xml.preferences.showSchemaDocumentationType": "all",
	// Allows references for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLReferencesFeatures%22%2C%22section%22%3A%22xmlreferencesfeatures%22%7D%5D) for more information.
	"xml.references": [],
	// Command line arguments to supply to the binary server when the binary server is being used. Takes into effect after relaunching VSCode. Please refer to [this website for the available options](https://www.graalvm.org/reference-manual/native-image/HostedvsRuntimeOptions/). For example, you can increase the maximum memory that the server can use to 1 GB by adding `-Xmx1g`
	"xml.server.binary.args": "",
	// Specify the path of a custom binary version of the XML server to use. A binary will be downloaded if this is not set.
	"xml.server.binary.path": "",
	// List of the SHA256 hashes of trusted copies of the lemminx (XML language server) binary. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22trusted-binary-hashes%22%7D%5D) for more information
	"xml.server.binary.trustedHashes": [],
	// By default, vscode-xml tries to run the Java version of the XML Language Server. If no Java is detected, vscode-xml runs the binary XML language server. When this setting is enabled, the binary will also be used even if Java is installed. If there are additions to the XML Language Server provided by other extensions, Java will be used (if available) even if this setting is enabled.
	"xml.server.preferBinary": false,
	// The XML Language server allows other VSCode extensions to extend its functionality. It requires Java-specific features in order to do this. If extensions to the XML language server are detected, but a binary XML language server is run, a warning will appear. This setting can be used to disable this warning.
	"xml.server.silenceExtensionWarning": false,
	// Specifies extra VM arguments used to launch the XML Language Server. Eg. use `-Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector. Please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-vm-arguments%22%7D%5D) for more information on the Java server arguments.
	"xml.server.vmargs": "-Xmx64M",
	// Set a custom folder path for cached XML Schemas. An absolute path is expected, although the `~` prefix (for the user home directory) is supported. Default is `~/.lemminx`. Please refer to the [cache documentation](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-cache-path%22%7D%5D) for more information.
	"xml.server.workDir": "~/.lemminx",
	// Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `"xml.symbols.enabled": false`.
	"xml.symbols.enabled": true,
	// Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.
	// 
	// Example:
	// ```
	// [
	//  "**/*LargeFile.xml"
	// ]```.
	"xml.symbols.excluded": [],
	// Allows XML symbols filter to be associated to file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsfilters%22%7D%5D) for more information.. 
	// 
	// Example:
	// ```json
	// [
	//   {
	//     "pattern": "pom.xml",
	//     "expressions": [
	//       {
	//         "xpath": "//text()"
	//       }
	//     ]
	//   }
	// ]
	// ```
	"xml.symbols.filters": [],
	// The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsmaxitemscomputed%22%7D%5D) for more information.
	"xml.symbols.maxItemsComputed": 5000,
	// Show referenced grammars in the Outline. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsshowreferencedgrammars%22%7D%5D) for more information.
	"xml.symbols.showReferencedGrammars": true,
	// Traces the communication between VS Code and the XML language server in the Output view. Default is `off`.
	"xml.trace.server": "off",
	// Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22disallow-doc-type-declarations%22%7D%5D) for more information
	"xml.validation.disallowDocTypeDecl": false,
	// Enable/disable all validation. Default is `true`.
	"xml.validation.enabled": true,
	// 
	"xml.validation.filters": [
		{
			"pattern": "**.exsd",
			"noGrammar": "ignore",
			"schema": {
				"enabled": "never"
			}
		},
		{
			"pattern": "**{.project,.classpath,plugin.xml,feature.xml,category.xml,.target,.product}",
			"noGrammar": "ignore"
		}
	],
	// Enable/disable namespaces validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlnamespaceschemaenabled%22%7D%5D) for more information.
	//  - always: Enable namespaces validation.
	//  - never: Disable namespaces validation.
	//  - onNamespaceEncountered: Enable namespaces validation only when the root element declares an xmlns namespace.
	"xml.validation.namespaces.enabled": "always",
	// The message severity when a document has no associated grammar. Default is `hint`.
	"xml.validation.noGrammar": "hint",
	// Enable/disable resolve of external entities. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22resolve-external-entities%22%7D%5D) for more information. Disabled for untrusted workspaces
	"xml.validation.resolveExternalEntities": false,
	// Enable/disable schema based validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationschemaenabled%22%7D%5D) for more information.
	//  - always: Enable schema based validation.
	//  - never: Disable schema based validation.
	//  - onValidSchema: Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element.
	"xml.validation.schema.enabled": "always",
	// Enable/disable validation for `xi:include`. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationxincludeenabled%22%7D%5D) for more information.
	"xml.validation.xInclude.enabled": false,
	// Specify whether to show diagnostics for conflict dependencies.
	"maven.dependency.enableConflictDiagnostics": "true",
	// Specifies file path pattern of folders to exclude while searching for Maven projects.
	"maven.excludedFolders": [
		"**/.*",
		"**/node_modules",
		"**/target",
		"**/bin",
		"**/archetype-resources"
	],
	// Specifies default options for all mvn commands.
	"maven.executable.options": "",
	// Specifies absolute path of your 'mvn' executable. When this value is empty, it tries using 'mvn' or 'mvnw' according to the value of 'maven.executable.preferMavenWrapper'.
	"maven.executable.path": "",
	// Specifies whether you prefer to use Maven wrapper. If true, it tries using 'mvnw' by walking up the parent folders. If false, or 'mvnw' is not found, it tries 'mvn' in PATH instead.
	"maven.executable.preferMavenWrapper": "true",
	// Format of project node name shown in Maven explorer.
	"maven.explorer.projectName": "${project.name}",
	// Specifies whether to update effective-pom automatically whenever changes detected.
	"maven.pomfile.autoUpdateEffectivePOM": false,
	// Specifies the glob pattern used to look for pom.xml files.
	"maven.pomfile.globPattern": "**/pom.xml",
	// Specifies whether to prefetch effective pom on startup.
	"maven.pomfile.prefetchEffectivePom": false,
	// Default method of opening newly created project.
	"maven.projectOpenBehavior": "Interactive",
	// Specifies the absolute path of your maven configuration file, the default value is ~/.m2/settings.xml
	"maven.settingsFile": null,
	// If this value is true, add a command to create Maven Projects in the Explorer context menu for folders.
	"maven.showInExplorerContextMenu": "true",
	// Specifies an array of environment variable names and values. These environment variable values will be added to the terminal session before Maven is first executed.
	"maven.terminal.customEnv": [],
	// Specify pre-defined favorite commands to execute.
	"maven.terminal.favorites": [],
	// If this value is true, and if the setting java.home has a value, then the environment variable JAVA_HOME will be set to the value of java.home when a new terminal window is created.
	"maven.terminal.useJavaHome": false,
	// Specifies the way of viewing Maven projects.
	"maven.view": "flat",
	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,
	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,
	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,
	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,
	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,
	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,
	// Whether auto refreshing is enabled.
	"git.autorefresh": true,
	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,
	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,
	// Prefix used when creating a new branch.
	"git.branchPrefix": "",
	// List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
	"git.branchProtection": [],
	// Controls whether a prompt is being shown before changes are committed to a protected branch.
	//  - alwaysCommit: Always commit changes to the protected branch.
	//  - alwaysCommitToNewBranch: Always commit changes to a new branch.
	//  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
	"git.branchProtectionPrompt": "alwaysPrompt",
	// List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
	//  - adjectives: A random adjective
	//  - animals: A random animal name
	//  - colors: A random color name
	//  - numbers: A random number between 100 and 999
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],
	// Controls whether a random name is generated when creating a new branch.
	"git.branchRandomName.enable": false,
	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",
	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",
	// The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
	"git.branchWhitespaceChar": "-",
	// Controls what type of git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],
	// Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
	"git.closeDiffOnOperation": false,
	// List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
	"git.commandsToLog": [],
	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,
	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,
	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,
	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,
	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",
	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,
	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,
	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,
	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,
	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,
	// Whether git is enabled.
	"git.enabled": true,
	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,
	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,
	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,
	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,
	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,
	// List of git repositories to ignore.
	"git.ignoredRepositories": [],
	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,
	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,
	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,
	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,
	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,
	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,
	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",
	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,
	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,
	// Open the merge editor for files that are currently under conflict.
	"git.mergeEditor": false,
	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",
	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,
	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,
	// Run a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'git push' after a successful commit.
	//  - sync: Run 'git pull' and 'git push' after a successful commit.
	"git.postCommitCommand": "none",
	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",
	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",
	// Prune when fetching.
	"git.pruneOnFetch": false,
	// Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
	"git.pullBeforeCheckout": false,
	// Fetch all tags when pulling.
	"git.pullTags": true,
	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,
	// Remember the last git command that ran after a commit.
	"git.rememberPostCommitCommand": false,
	// List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],
	// Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
	"git.repositoryScanMaxDepth": 1,
	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,
	// List of paths to search for git repositories in.
	"git.scanRepositories": [],
	// Controls whether an action button is shown in the Source Control view.
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},
	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,
	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,
	// Controls whether git actions should show progress.
	"git.showProgress": true,
	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,
	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",
	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,
	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,
	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,
	// Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,
	// Controls whether to enable VS Code to be git editor for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
	"git.terminalGitEditor": false,
	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",
	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,
	// Controls whether to show uncommitted changes in the Timeline view.
	"git.timeline.showUncommitted": false,
	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",
	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,
	// Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
	"git.useEditorAsCommitInput": true,
	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,
	// Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
	"git.useIntegratedAskPass": true,
	// Enable verbose output when `git.useEditorAsCommitInput` is enabled.
	"git.verboseCommit": false,
	// Show File Explorer rotating triangles (twisties)
	"chaliceIcons.showArrows": false,
	// Custom CSS/JS files, as an array of URLs, not file paths
	"vscode_custom_css.imports": [],
	// Directory used for storing staged CSS/JS files. Must be inside VSCode's extension directory, otherwise VSCode will refuse to load the your custom CSS/JS.
	"vscode_custom_css.staging_dir": "",
	// Enable Status Indicator
	"vscode_custom_css.statusbar": true,
	// The HTML attributes for which to provide class completions, hover previews, linting etc.
	"tailwindCSS.classAttributes": [
		"class",
		"className",
		"ngClass"
	],
	// Enable code actions.
	"tailwindCSS.codeActions": true,
	// Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
	"tailwindCSS.colorDecorators": true,
	// Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
	"tailwindCSS.emmetCompletions": false,
	// 
	"tailwindCSS.experimental.classRegex": [],
	// Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.
	"tailwindCSS.experimental.configFile": null,
	// Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `files.exclude` setting.
	"tailwindCSS.files.exclude": [
		"**/.git/**",
		"**/node_modules/**",
		"**/.hg/**",
		"**/.svn/**"
	],
	// Enable hovers.
	"tailwindCSS.hovers": true,
	// Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
	//  E.g.: `{"plaintext": "html"}`
	"tailwindCSS.includeLanguages": {},
	// Enable the Node.js inspector agent for the language server and listen on the specified port.
	"tailwindCSS.inspectPort": null,
	// Class names on the same HTML element which apply the same CSS property or properties
	"tailwindCSS.lint.cssConflict": "warning",
	// Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
	"tailwindCSS.lint.invalidApply": "error",
	// Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
	"tailwindCSS.lint.invalidConfigPath": "error",
	// Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
	"tailwindCSS.lint.invalidScreen": "error",
	// Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
	"tailwindCSS.lint.invalidTailwindDirective": "error",
	// Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
	"tailwindCSS.lint.invalidVariant": "error",
	// Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
	"tailwindCSS.lint.recommendedVariantOrder": "warning",
	// Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
	"tailwindCSS.rootFontSize": 16,
	// Show `px` equivalents for `rem` CSS values.
	"tailwindCSS.showPixelEquivalents": true,
	// Enable autocomplete suggestions.
	"tailwindCSS.suggestions": true,
	// Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
	"tailwindCSS.validate": true,
	// Whether to add or not a semicolon in the end of the log message.
	"turboConsoleLog.addSemicolonInTheEnd": false,
	// The delimiter that will separate the different log message elements (file name, line number, class, function and variable)
	"turboConsoleLog.delimiterInsideMessage": "~",
	// Whether to include the file name and the line number of the log message.
	"turboConsoleLog.includeFileNameAndLineNum": true,
	// Whether to insert an empty line after the log message or not.
	"turboConsoleLog.insertEmptyLineAfterLogMessage": false,
	// Whether to insert an empty line before the log message or not.
	"turboConsoleLog.insertEmptyLineBeforeLogMessage": false,
	// Whether to insert or not the enclosing class of the selected variable in the log message.
	"turboConsoleLog.insertEnclosingClass": true,
	// Whether to insert or not the enclosing function of the selected variable in the log message.
	"turboConsoleLog.insertEnclosingFunction": true,
	// Specify a log function (when specified logType will be ignored)
	"turboConsoleLog.logFunction": "log",
	// The prefix of the log message.
	"turboConsoleLog.logMessagePrefix": "🚀",
	// Select the log type
	"turboConsoleLog.logType": "log",
	// Double quotes, single quotes or backtick
	"turboConsoleLog.quote": "\"",
	// Determine if the log message should be wrapped or not.
	"turboConsoleLog.wrapLogMessage": false,
	// Customize update string. %s will be replaced by version, so 'Update: %s' will result in 'Update: 1.0.1'.
	"package-json-upgrade.decorationString": "\t\tUpdate available: %s",
	// A list of regex pattern of packages to not show decoration string for. To ignore all material-ui packages the JSON should be ["^(?=@material-ui).+$"]
	"package-json-upgrade.ignorePatterns": [],
	// Semver ranges of versions to ignore for specific packages. If you  want to ignore all @types/node versions 12 or greater the JSON should be {"@types/node": ">=12"}. If you want to add several ignored semver ranges you can do {"@types/node": ["=12.0.0", "=12.0.1"]}.
	"package-json-upgrade.ignoreVersions": {},
	// Specify a color (like #FF0000) to override the color of major upgrades. Leave empty for default color.
	"package-json-upgrade.majorUpgradeColorOverwrite": "",
	// Specify a color (like #FFFF00) to override the color of minor upgrades. Leave empty for default color.
	"package-json-upgrade.minorUpgradeColorOverwrite": "",
	// Specify a color (like #00FF00) to override the color of patch upgrades. Leave empty for default color.
	"package-json-upgrade.patchUpgradeColorOverwrite": "",
	// Specify a color (like #00FF00) to override the color of prerelease upgrades. Leave empty for default color.
	"package-json-upgrade.prereleaseUpgradeColorOverwrite": "",
	// Available updates will be shown directly when a package.json is opened. Otherwise, this must be toggled with a command.
	"package-json-upgrade.showUpdatesAtStart": true,
	// Skip reading your npm configuration. Check this to skip using configuration such as proxies and caching that might be defined in your npm configuration. Try this out if the extension appears to not be working.
	"package-json-upgrade.skipNpmConfig": false,
	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,
	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine",
		"commentStyle": "line"
	},
	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},
	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Fixes only reported problems that have non-overlapping textual edits. This option runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",
	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,
	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,
	// Controls whether eslint is enabled or not.
	"eslint.enable": true,
	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.execArgv": null,
	// Enables support of experimental Flat Config (aka eslint.config.js, supported by ESLint version 8.21 or later).
	"eslint.experimental.useFlatConfig": false,
	// Enables ESLint as a formatter.
	"eslint.format.enable": false,
	// If true, untitled files won't be validated by ESLint.
	"eslint.ignoreUntitled": false,
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,
	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",
	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",
	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,
	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,
	// A special rules customization section for text cells in notebook documents.
	"eslint.notebooks.rules.customizations": [],
	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",
	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},
	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",
	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],
	// Shortens the text spans of underlined problems to their first related line.
	"eslint.problems.shortenToSingleLine": false,
	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,
	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,
	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],
	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",
	// The location of the node binary to run ESLint under.
	"eslint.runtime": null,
	// The time budget in milliseconds to spend on computing fixes before showing a warning or error.
	"eslint.timeBudget.onFixes": {
		"warn": 3000,
		"error": 6000
	},
	// The time budget in milliseconds to spend on validation before showing a warning or error.
	"eslint.timeBudget.onValidation": {
		"warn": 4000,
		"error": 8000
	},
	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",
	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,
	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],
	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],
	// Specifies whether Peacock should affect the activity bar.
	"peacock.affectActivityBar": true,
	// Specifies whether Peacock should affect the status bar while debugging.
	"peacock.affectDebuggingStatusBar": false,
	// Specifies whether Peacock should affect the editorGroup border.
	"peacock.affectEditorGroupBorder": false,
	// Specifies whether Peacock should affect the panel border.
	"peacock.affectPanelBorder": false,
	// Specifies whether Peacock should affect the sash border.
	"peacock.affectSashHover": true,
	// Specifies whether Peacock should affect the sideBar border.
	"peacock.affectSideBarBorder": false,
	// Specifies whether Peacock should affect the status or title borders.
	"peacock.affectStatusAndTitleBorders": false,
	// Specifies whether Peacock should affect the status bar.
	"peacock.affectStatusBar": true,
	// Specifies whether Peacock should affect the active tab's border.
	"peacock.affectTabActiveBorder": false,
	// Specifies whether Peacock should affect the title bar.
	"peacock.affectTitleBar": true,
	// The Peacock color that will be applied to workspaces. This should only be set at the workspace level.
	"peacock.color": "",
	// Specifies the amount to darken or lighten the color, in percentage
	"peacock.darkenLightenPercentage": 5,
	// Specifies the override value for the dark foreground color
	"peacock.darkForegroundColor": "#15202b",
	// Adjusts the colorization of affected elements to provide visual contrast
	"peacock.elementAdjustments": {
		"activityBar": "lighten",
		"statusBar": "none",
		"titleBar": "none"
	},
	// Your favorite colors
	"peacock.favoriteColors": [
		{
			"name": "Angular Red",
			"value": "#dd0531"
		},
		{
			"name": "Azure Blue",
			"value": "#007fff"
		},
		{
			"name": "JavaScript Yellow",
			"value": "#f9e64f"
		},
		{
			"name": "Mandalorian Blue",
			"value": "#1857a4"
		},
		{
			"name": "Node Green",
			"value": "#215732"
		},
		{
			"name": "React Blue",
			"value": "#61dafb"
		},
		{
			"name": "Something Different",
			"value": "#832561"
		},
		{
			"name": "Svelte Orange",
			"value": "#ff3d00"
		},
		{
			"name": "Vue Green",
			"value": "#42b883"
		}
	],
	// Recommended to remain false. However, when set to true Peacock will not colorize badges in any of the affected elements in response to background alterations
	"peacock.keepBadgeColor": false,
	// Recommended to remain false. However, when set to true Peacock will not colorize the foreground of any of the affected elements and will only alter the background
	"peacock.keepForegroundColor": false,
	// Specifies the override value for the light foreground color
	"peacock.lightForegroundColor": "#e7e7e7",
	// The Peacock color that will be applied to remote workspaces.
	"peacock.remoteColor": "",
	// Show the Peacock color in the status bar
	"peacock.showColorInStatusBar": true,
	// Easter egg! Specifies whether Peacock should hide all red error, warning and info underlines from the editor by making their color the same as the background.
	"peacock.squigglyBeGone": false,
	// Specifies whether Peacock should choose a random color from the favorites list or a purely random color.
	"peacock.surpriseMeFromFavoritesOnly": false,
	// Specifies that Peacock should surprise you at the start of every editing session, only when a color isn't already set. 
	"peacock.surpriseMeOnStartup": false,
	// Peacock color for Live Share Color when acting as a Guest 
	"peacock.vslsJoinColor": "",
	// Peacock color for Live Share Color when acting as a Host 
	"peacock.vslsShareColor": "",
	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,
	// Display inline parameter name hints
	"csharp.inlayHints.parameters.enabled": false,
	// Show hints for indexers
	"csharp.inlayHints.parameters.forIndexerParameters": false,
	// Show hints for literals
	"csharp.inlayHints.parameters.forLiteralParameters": false,
	// Show hints for 'new' expressions
	"csharp.inlayHints.parameters.forObjectCreationParameters": false,
	// Show hints for everything else
	"csharp.inlayHints.parameters.forOtherParameters": false,
	// Suppress hints when parameter names differ only by suffix
	"csharp.inlayHints.parameters.suppressForParametersThatDifferOnlyBySuffix": false,
	// Suppress hints when argument matches parameter name
	"csharp.inlayHints.parameters.suppressForParametersThatMatchArgumentName": false,
	// Suppress hints when parameter name matches the method's intent
	"csharp.inlayHints.parameters.suppressForParametersThatMatchMethodIntent": false,
	// Display inline type hints
	"csharp.inlayHints.types.enabled": false,
	// Show hints for implicit object creation
	"csharp.inlayHints.types.forImplicitObjectCreation": false,
	// Show hints for variables with inferred types
	"csharp.inlayHints.types.forImplicitVariableTypes": false,
	// Show hints for lambda parameter types
	"csharp.inlayHints.types.forLambdaParameterTypes": false,
	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,
	// Specifies whether the references CodeLens should be shown.
	"csharp.referencesCodeLens.enabled": true,
	// Array of custom symbol names for which CodeLens should be disabled.
	"csharp.referencesCodeLens.filteredSymbols": [],
	// Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.
	"csharp.semanticHighlighting.enabled": true,
	// Shows the OmniSharp log in the Output pane when OmniSharp reports an error.
	"csharp.showOmnisharpLogOnError": true,
	// Suppress the notification window to add missing assets to build or debug the application.
	"csharp.suppressBuildAssetsNotification": false,
	// Suppress the warning that the .NET Core SDK is not on the path.
	"csharp.suppressDotnetInstallWarning": false,
	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,
	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,
	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,
	// Specifies whether the run and debug test CodeLens should be shown.
	"csharp.testsCodeLens.enabled": true,
	// Options to use with the debugger when launching for unit test debugging.
	"csharp.unitTestDebuggingOptions": {},
	// Only run analyzers against open files when 'enableRoslynAnalyzers' is true
	"omnisharp.analyzeOpenDocumentsOnly": false,
	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,
	// The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
	"omnisharp.defaultLaunchSolution": "",
	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,
	// Paths to a local download of the .NET CLI to use for running any user code.
	"omnisharp.dotNetCliPaths": [],
	// Specified the path to a dotnet installation to use when "useModernNet" is set to true, instead of the default system one. This only influences the dotnet installation to use for hosting Omnisharp itself. Example: "/home/username/mycustomdotnetdirectory".
	"omnisharp.dotnetPath": "",
	// (EXPERIMENTAL) Enables support for resolving completion edits asynchronously. This can speed up time to show the completion list, particularly override and partial method completion lists, at the cost of slight delays after inserting a completion item. Most completion items will have no noticeable impact with this feature, but typing immediately after inserting an override or partial method completion, before the insert is completed, can have unpredictable results.
	"omnisharp.enableAsyncCompletion": false,
	// Enables support for decompiling external references instead of viewing metadata.
	"omnisharp.enableDecompilationSupport": false,
	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": true,
	// Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution.
	"omnisharp.enableImportCompletion": false,
	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,
	// Enables support for roslyn analyzers, code fixes and rulesets.
	"omnisharp.enableRoslynAnalyzers": false,
	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",
	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,
	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,
	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,
	// Specifies the path to a mono installation to use when "useModernNet" is set to false, instead of the default system one. Example: "/Library/Frameworks/Mono.framework/Versions/Current"
	"omnisharp.monoPath": "",
	// Specifies whether 'using' directives should be grouped and sorted during document formatting.
	"omnisharp.organizeImportsOnFormat": false,
	// Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting "latest" is an opt-in into latest beta releases of OmniSharp.
	"omnisharp.path": "",
	// The exclude pattern used by OmniSharp to find all project files.
	"omnisharp.projectFilesExcludePattern": "**/node_modules/**,**/.git/**,**/bower_components/**",
	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,
	// Specifies whether to include preview versions of the .NET SDK when determining which version to use for project loading. Applies when "useModernNet" is set to true.
	"omnisharp.sdkIncludePrereleases": true,
	// Specifies the path to a .NET SDK installation to use for project loading instead of the highest version installed. Applies when "useModernNet" is set to true. Example: /home/username/dotnet/sdks/6.0.300.
	"omnisharp.sdkPath": "",
	// Specifies the version of the .NET SDK to use for project loading instead of the highest version installed. Applies when "useModernNet" is set to true. Example: 6.0.300.
	"omnisharp.sdkVersion": "",
	// Path to the .runsettings file which should be used when running unit tests.
	"omnisharp.testRunSettings": "",
	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,
	// Use OmniSharp build for .NET 6. This version _does not_ support non-SDK-style .NET Framework projects, including Unity. SDK-style Framework, .NET Core, and .NET 5+ projects should see significant performance improvements.
	"omnisharp.useModernNet": true,
	// Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
	"omnisharp.waitForDebugger": false,
	// Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
	"razor.devmode": false,
	// Specifies whether to disable Razor language features.
	"razor.disabled": false,
	// Enable/disable default Razor formatter.
	"razor.format.enable": true,
	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,
	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": "",
	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": "",
	// Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
	//  - Off: Does not log messages from the Razor extension
	//  - Messages: Logs only some messages from the Razor extension
	//  - Verbose: Logs all messages from the Razor extension
	"razor.trace": "Off",
	// Contrôle le fournisseur de la saisie semi-automatique. Si la valeur est `disabled` et que vous voulez utiliser la saisie semi-automatique, vous devez également définir `"[cpp]": {"editor.wordBasedSuggestions": true}` (et de la même manière pour les langages `c` et `cuda-cpp`).
	//  - default: Utilise le moteur IntelliSense actif.
	//  - disabled: Utilise la saisie semi-automatique basée sur le mot fournie par Visual Studio Code.
	"C_Cpp.autocomplete": "default",
	// Si la valeur est `true`, l'autocomplétion ajoute automatiquement `(` après les appels de fonction. Dans ce cas `)` peut également être ajouté, en fonction de la valeur du paramètre `editor.autoClosingBrackets`.
	"C_Cpp.autocompleteAddParentheses": false,
	// Si cette fonctionnalité est activée, les plages de pliage de code sont fournies par le serveur de langage.
	"C_Cpp.codeFolding": "enabled",
	// Détermine si des notifications de fenêtre contextuelle s'affichent quand une extension de fournisseur de configuration ne peut pas fournir la configuration d'un fichier source.
	"C_Cpp.configurationWarnings": "enabled",
	// La valeur à utiliser dans une configuration si `browse.databaseFilename` n'est pas spécifié ou défini à `${default}`.
	"C_Cpp.default.browse.databaseFilename": "",
	// Valeur à utiliser dans une configuration si `browse.limitSymbolsToIncludedHeaders` n'est pas spécifié ou a la valeur `${default}`.
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,
	// Valeur à utiliser dans une configuration si `browse.path` n’est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans browse.path.
	"C_Cpp.default.browse.path": null,
	// Valeur à utiliser dans une configuration si `compileCommands` n’est pas spécifié ou défini sur `${default}`.
	"C_Cpp.default.compileCommands": "",
	// Valeur à utiliser dans la configuration si `compilerArgs` n’est pas spécifié ou défini sur `${default}`.
	"C_Cpp.default.compilerArgs": [],
	// Valeur à utiliser dans une configuration si `compilerPath` n'est pas spécifié ou est défini sur `${default}`.
	"C_Cpp.default.compilerPath": null,
	// Valeur à utiliser dans une configuration si `configurationProvider` n'est pas spécifié ou est défini sur `${default}`.
	"C_Cpp.default.configurationProvider": "",
	// La valeur à utiliser dans une configuration si `cppStandard` n'est pas spécifié ou défini à `${default}`.
	"C_Cpp.default.cppStandard": "",
	// Valeur à utiliser dans une configuration si `cStandard` n'est pas spécifié ou est défini sur `${default}`.
	"C_Cpp.default.cStandard": "",
	// Valeur à utiliser dans une configuration si `customConfigurationVariables` n'est pas défini, ou valeurs à insérer si `${default}` est présent dans `customConfigurationVariables`.
	"C_Cpp.default.customConfigurationVariables": null,
	// La valeur à utiliser dans une configuration si `defines` n'est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans `defines`.
	"C_Cpp.default.defines": [],
	// La valeur à utiliser dans une configuration si `dotConfig` n'est pas spécifié, ou la valeur à insérer si `${default}` est présent dans `dotConfig`.
	"C_Cpp.default.dotConfig": null,
	// Contrôle si l'extension signale les erreurs détectées dans `c_cpp_properties.json`.
	"C_Cpp.default.enableConfigurationSquiggles": true,
	// La valeur à utiliser dans une configuration si `forcedInclude` n'est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans `forcedInclude`.
	"C_Cpp.default.forcedInclude": [],
	// Valeur à utiliser dans une configuration si `includePath` n’est pas spécifié dans `c_cpp_properties.json`. Si `includePath` est spécifié, ajoutez `${default}` au tableau pour insérer les valeurs de ce paramètre. En règle générale, cela ne doit pas inclure les éléments système ; à la place, définissez `C_Cpp.default.compilerPath`.
	"C_Cpp.default.includePath": [],
	// Valeur à utiliser dans une configuration si `intelliSenseMode` n’est pas spécifié ou défini sur `${default}`.
	"C_Cpp.default.intelliSenseMode": "",
	// Valeur à utiliser dans une configuration si `macFrameworkPath` n’est pas spécifié, ou les valeurs à insérer si `${default}` est présent dans `macFrameworkPath`.
	"C_Cpp.default.macFrameworkPath": [],
	// Affectez la valeur `true` pour fusionner les chemins d’accès, les définitions et les éléments obligatoires avec ceux d’un fournisseur de configuration.
	"C_Cpp.default.mergeConfigurations": false,
	// Valeur à utiliser pour le chemin d'inclusion système. Si cette option est définie, elle remplace le chemin d'inclusion système obtenu via les paramètres `compilerPath` et `compileCommands`.
	"C_Cpp.default.systemIncludePath": [],
	// Version du chemin d'inclusion du SDK Windows à utiliser sur Windows, par ex., `10.0.17134.0`.
	"C_Cpp.default.windowsSdkVersion": "",
	// Contrôle si les blocs de préprocesseur inactifs ont une couleur différente de celle du code actif. Ce paramètre n'a pas d'effet si IntelliSense est désactivé ou utilise le thème Contraste élevé par défaut.
	"C_Cpp.dimInactiveRegions": true,
	// Si cette option est activée, le code est colorisé en fonction d'IntelliSense. Ce paramètre s'applique uniquement si `C_Cpp.intelliSenseEngine` est défini sur `Default`.
	"C_Cpp.enhancedColorization": "enabled",
	// Contrôle si les erreurs de compilation suspectes détectées par le moteur IntelliSense seront rapportées à l'éditeur. Il contrôle également si les avertissements d'analyse de code sont signalés si les includes ne peuvent pas être trouvés. Ce paramètre est ignoré par le moteur Tag Parser.
	"C_Cpp.errorSquiggles": "enabledIfIncludesResolve",
	// Indique à l’extension quand utiliser le paramètre `files.exclude#` (et `#C_Cpp.files.exclude#`) lors de la détermination des fichiers qui doivent être ajoutés à la base de données de navigation du code tout en parcourant les chemins d’accès dans le tableau `browse.path`. Si votre paramètre `#files.exclude` contient uniquement des dossiers, `checkFolders` est le meilleur choix et augmente la vitesse à laquelle l’extension peut initialiser la base de données de navigation du code.
	//  - checkFolders: Les filtres d’exclusion ne seront évalués qu’une seule fois par dossier (les fichiers individuels ne sont pas vérifiés).
	//  - checkFilesAndFolders: Les filtres d'exclusion seront évalués pour chaque fichier et dossier rencontré.
	"C_Cpp.exclusionPolicy": "checkFolders",
	// Configurer les modèles globaux pour exclure les dossiers (et les fichiers si `C_Cpp.exclusionPolicy#` est modifié). Ils sont spécifiques à l'extension C/C++ et s'ajoutent à `#files.exclude#`, mais contrairement à `#files.exclude`, ils s'appliquent également aux chemins en dehors du dossier de l'espace de travail actuel et ne sont pas supprimés de la vue de l'explorateur. Pour en savoir plus sur les modèles globaux, cliquez ici (https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true,
		"**/.vs": true
	},
	// If disabled, hover details are no longer provided by the language server.
	"C_Cpp.hover": "default",
	// Contrôle la coloration d'arrière-plan des blocs de préprocesseur inactifs. L'entrée se présente sous la forme d'un code de couleur hexadécimal ou d'une couleur de thème valide. Si ce paramètre n'est pas défini, la valeur par défaut est Transparent. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.
	"C_Cpp.inactiveRegionBackgroundColor": "",
	// Contrôle la coloration de la police des blocs de préprocesseur inactifs. L'entrée se présente sous la forme d'un code de couleur hexadécimal ou d'une couleur de thème valide. Si ce paramètre n'est pas défini, la valeur par défaut est le schéma de coloration de syntaxe de l'éditeur. Ce paramètre s'applique uniquement quand l'estompage des régions inactives est activé.
	"C_Cpp.inactiveRegionForegroundColor": "",
	// Contrôle l'opacité des blocs inactifs du préprocesseur. L'échelle est comprise entre `0.1` et `1.0`. Ce paramètre ne s'applique que lorsque la gradation des régions inactives est activée.
	"C_Cpp.inactiveRegionOpacity": 0.55,
	// Afficher les indicateurs d’inlay pour le type déduit quand `auto` est utilisé dans une déclaration :
	// ```cpp 
	// 
	//  auto index /* : int */ = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.enabled": false,
	// Afficher les indicateurs d’inlay pour le type déduit quand `auto` est utilisé dans une déclaration à gauche de l’identificateur :
	// ```cpp 
	// 
	//  auto /* int */ index = 0;
	// ```
	"C_Cpp.inlayHints.autoDeclarationTypes.showOnLeft": false,
	// Afficher des indicateurs d’inlay pour les noms de paramètres :
	// ```cpp 
	// 
	//  int a = getArea(/* width: */ x, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.enabled": false,
	// Masquez `_` principal dans les indicateurs de nom de paramètre.
	"C_Cpp.inlayHints.parameterNames.hideLeadingUnderscores": true,
	// Supprimez les indicateurs de nom de paramètre lorsque le texte de l’argument ou le commentaire inline contient le nom du paramètre :
	// ```cpp 
	// 
	//  int a = getArea(width, /* height: */ y);
	// ```
	"C_Cpp.inlayHints.parameterNames.suppressWhenArgumentContainsName": true,
	// Afficher l’opérateur de référence d’indicateur d’inlay `&` pour les paramètres passés par une référence non const :
	// ```cpp 
	// 
	//  swap(/* &first: */ str1, /* &last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.enabled": false,
	// Contrôle si un espace est affiché après `&` pour les paramètres passés par référence non-const.
	// ```cpp 
	// 
	//  swap(/* & first: */ str1, /* & last: */ str2);
	// ```
	"C_Cpp.inlayHints.referenceOperator.showSpace": false,
	// Contrôle le fournisseur IntelliSense.
	//  - default: Fournit des résultats contextuels via un processus IntelliSense distinct.
	//  - Tag Parser: Fournit des résultats « flous » qui ne sont pas compatibles avec le contexte.
	//  - disabled: Désactive les fonctionnalités du service de langage C/C++.
	"C_Cpp.intelliSenseEngine": "default",
	// Contrôle si le moteur IntelliSense bascule automatiquement vers l'analyseur de balises pour les unités de traduction qui contiennent des erreurs `#include`.
	"C_Cpp.intelliSenseEngineFallback": "disabled",
	// Contrôle le délai en millisecondes avant que la mise à jour d'IntelliSense ne commence après une modification.
	"C_Cpp.intelliSenseUpdateDelay": 2000,
	// Activez le comportement antérieur à v1.10.0 pour gérer l’échappement de l’interpréteur de commandes dans les paramètres d’argument du compilateur. L’échappement de l’interpréteur de commandes n’est plus attendu ou pris en charge par défaut dans les tableaux d’arguments commençant dans v1.10.0.
	"C_Cpp.legacyCompilerArgsBehavior": false,
	// Si `true`, 'Renommer le symbole' exigera un identifiant C/C++ valide.
	"C_Cpp.renameRequiresIdentifier": true,
	// Si la valeur est `true`, les extraits de code sont fournis par le serveur de langage.
	"C_Cpp.suggestSnippets": true,
	// Contrôle si l'analyse des fichiers de l'espace de travail non actif utilise des dormants pour éviter d'utiliser 100% du CPU. Les valeurs `highest`/`high`/`medium`/`low` correspondent à environ 100/75/50/25% d'utilisation du CPU.
	"C_Cpp.workspaceParsingPriority": "highest",
	// Symboles à inclure dans les résultats de la requête quand 'Atteindre le symbole dans l'espace de travail' est appelé.
	"C_Cpp.workspaceSymbols": "Just My Code",
	// Nom du style prédéfini utilisé comme secours dans le cas où `clang-format` est appelé avec le style `file`, mais le fichier `.clang-format` est introuvable. Les valeurs possibles sont `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none` ou utilisez `{clé : valeur, ...}` pour définir des paramètres spécifiques. Par exemple, le style `Visual Studio` est similaire à : `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",
	// Le chemin complet de l'exécutable `clang-format`. S'il n'est pas spécifié, et que `clang-format` est disponible dans le chemin de l'environnement, il est utilisé. S'il n'est pas trouvé dans le chemin de l'environnement, le `clang-format` fourni avec l'extension sera utilisé.
	"C_Cpp.clang_format_path": "",
	// S’il est défini, remplace le comportement de tri Include déterminé par le paramètre `SortIncludes`.
	"C_Cpp.clang_format_sortIncludes": null,
	// Le style de codage prend actuellement en charge : `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Utilisez `file` pour charger le style à partir d’un fichier `.clang-format` dans le répertoire actuel ou parent, ou utilisez `file:<path>/.clang-format`pour référencer un chemin d'accès spécifique. Utiliser `{clé : valeur, ...}` pour définir des paramètres spécifiques. Par exemple, le style `Visual Studio` est similaire à : `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_style": "file",
	// Configure le moteur de mise en forme.
	//  - clangFormat: `clang-format` sera utilisé pour mettre en forme le code.
	//  - vcFormat: Le moteur de mise en forme de Visual C++ est utilisé pour la mise en forme du code.
	//  - default: Par défaut, `clang-format` sera utilisé pour formater le code. Cependant, le moteur de formatage Visual C++ sera utilisé si un fichier `.editorconfig` avec des paramètres pertinents est trouvé près du code à formater et que `C_Cpp.clang_format_style` est la valeur par défaut : `file`.
	//  - disabled: La mise en forme du code va être désactivée.
	"C_Cpp.formatting": "default",
	// Les spécificateurs d'accès sont indentés par rapport aux définitions de classes ou de structures de la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,
	// Les accolades sont indentées de la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.braces": false,
	// Le code à l’intérieur d’un bloc `case` est mis en retrait par rapport à son étiquette en fonction de la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.caseContents": true,
	// Mettez en retrait les accolades qui suivent une instruction case en fonction de la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,
	// Les étiquettes sont indentées par rapport aux instructions de commutation de la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.caseLabels": false,
	// Position des étiquettes goto.
	//  - oneLeft: Positionne les étiquettes goto à gauche de l'indentation actuelle du code, de la quantité spécifiée dans le paramètre `editor.tabSize`.
	//  - leftmostColumn: Placez les étiquettes goto sur le bord le plus à gauche du code.
	//  - none: Les étiquettes goto ne sont pas mises en forme.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",
	// Mettre en retrait les accolades des expressions lambda utilisées comme paramètres de fonction par rapport au début de l’instruction par la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,
	// Détermine par rapport à quoi la nouvelle ligne est mise en retrait.
	//  - outermostParenthesis: Mettez en retrait une nouvelle ligne par rapport à la parenthèse ouvrante la plus extérieure.
	//  - innermostParenthesis: Mettez en retrait une nouvelle ligne par rapport à la parenthèse ouvrante la plus intérieure.
	//  - statementBegin: Mettez en retrait une nouvelle ligne par rapport au début de l'instruction actuelle.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",
	// Le code est mis en retrait par rapport à son espace de noms englobant par la quantité spécifiée dans le paramètre `editor.tabSize`.
	"C_Cpp.vcFormat.indent.namespaceContents": true,
	// Position des directives de préprocesseur.
	//  - oneLeft: Les directives de préprocesseur sont positionnées à gauche de la mise en retrait du code actuel, selon la quantité spécifiée dans le paramètre `editor.tabSize`.
	//  - leftmostColumn: Les directives de préprocesseur sont placées sur le bord le plus à gauche du code.
	//  - none: Les directives de préprocesseur ne sont pas mises en forme.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",
	// La mise en retrait des commentaires ne change pas pendant les opérations de mise en forme.
	"C_Cpp.vcFormat.indent.preserveComments": false,
	// Dans le code existant, conservez l'alignement existant de la mise en retrait des nouvelles lignes entre parenthèses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,
	// Lorsqu'une nouvelle ligne est tapée, elle est alignée sous la parenthèse ouvrante ou en fonction de `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	//  - alignToParenthesis: La nouvelle ligne est alignée sous la parenthèse ouvrante.
	//  - indent: La nouvelle ligne est indentée en fonction de `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",
	// Placez `catch` et les mots clés similaires sur une nouvelle ligne.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,
	// Placez `else` sur une nouvelle ligne.
	"C_Cpp.vcFormat.newLine.beforeElse": true,
	// Position des accolades ouvrantes pour les blocs de contrôle.
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",
	// Position des accolades ouvrantes pour les fonctions.
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",
	// Position des accolades ouvrantes pour les fonctions lambda.
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",
	// Position des accolades ouvrantes pour les espaces de noms.
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",
	// Position des accolades ouvrantes pour les définitions de type.
	//  - newLine: Les accolades ouvrantes sont déplacées vers une nouvelle ligne.
	//  - sameLine: Les accolades ouvrantes sont conservées sur la même ligne et un espace est ajouté avant chacune d'elles.
	//  - ignore: Les accolades ouvrantes ne sont pas mises en forme.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",
	// Placez `while` dans une boucle `do`-`while` sur une nouvelle ligne.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,
	// Pour les corps de fonction vides, déplacez les accolades fermantes sur la même ligne que les accolades ouvrantes.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,
	// Pour les types vides, déplacez les accolades fermantes sur la même ligne que les accolades ouvrantes.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,
	// Placez les accolades ouvrantes et fermantes pour les étendues sur des lignes distinctes.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,
	// Un espace est ajouté après la parenthèse fermante d'un cast de style C.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,
	// Un espace est ajouté après chaque virgule.
	"C_Cpp.vcFormat.space.afterComma": true,
	// Un espace est ajouté entre le mot clé et la parenthèse ouvrante dans les instructions de flux de contrôle.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,
	// Espaces autour des opérateurs d’affectation.
	//  - insert: Un espace est ajouté avant et après l'opérateur.
	//  - remove: Les espaces avant et après l'opérateur sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",
	// Espaces autour des opérateurs binaires.
	//  - insert: Un espace est ajouté avant et après l'opérateur.
	//  - remove: Les espaces avant et après l'opérateur sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",
	// Espaces autour des opérateurs conditionnels.
	//  - insert: Un espace est ajouté avant et après l'opérateur.
	//  - remove: Les espaces avant et après l'opérateur sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",
	// Un espace est ajouté avant les accolades ouvrantes des blocs d'étendue.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,
	// Un espace est ajouté avant chaque virgule.
	"C_Cpp.vcFormat.space.beforeComma": false,
	// Un espace est ajouté avant le signe deux points dans les définitions de constructeur.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,
	// Lorsque les crochets sont vides, un espace est ajouté avant le crochet ouvrant.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,
	// Espacement entre les noms de fonction et les parenthèses ouvrantes des listes d'arguments.
	//  - insert: Ajoutez un espace avant la parenthèse ouvrante d'une fonction.
	//  - remove: Les espaces avant les parenthèses ouvrantes d'une fonction sont supprimés.
	//  - ignore: Les espaces sont laissés tels qu'ils ont été entrés.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",
	// Un espace est ajouté avant le signe deux points pour les types hérités dans les définitions de classe.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,
	// Un espace est ajouté avant l'accolade ouvrante de l'initialisation uniforme et des listes d'initialiseurs.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,
	// Un espace est ajouté avant la parenthèse ouvrante des listes d'arguments d'expressions lambda.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,
	// Un espace est ajouté avant les crochets ouvrants.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,
	// Quand les accolades sont vides et situées sur la même ligne, un espace est inséré entre elles.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,
	// Lorsque les crochets sont vides, un espace est inséré entre eux.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,
	// Quand une liste de paramètres de fonction est vide, un espace est inséré entre ses parenthèses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,
	// Lorsque les crochets sont vides, un espace est inséré entre eux.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,
	// Pour les tableaux multidimensionnels, tout espace entre les crochets est supprimé. Les autres paramètres qui contrôlent l'espace sont remplacés.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,
	// Un espace est inséré après chaque point-virgule.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,
	// Espace autour des opérateurs de pointeur et de référence.
	//  - left: Les opérateurs de pointeur et de référence sont alignés à gauche.
	//  - center: Ls opérateurs de pointeur et de référence sont centrés.
	//  - right: Les opérateurs de pointeur et de référence sont alignés à droite.
	//  - ignore: Les opérateurs de pointeur et de référence ne sont pas mis en forme.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",
	// Les espaces autour des virgules sont conservés dans l'initialisation uniforme et les listes d'initialiseurs.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,
	// Les espaces autour des opérateurs d'accès aux membres, des opérateurs de pointeur vers membre et des opérateurs de résolution d'étendue sont supprimés.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,
	// Les espaces entre les opérateurs unaires et les opérandes sont supprimés.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,
	// Les espaces sont supprimés avant tous les points-virgules.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,
	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante d'un cast de style C.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,
	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante dans les instructions de flux de contrôle.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,
	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante d'une expression entre parenthèses.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,
	// Un espace est ajouté après l'accolade ouvrante et avant l'accolade fermante de l'initialisation uniforme et des listes d'initialiseurs.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,
	// Un espace est ajouté après le crochet ouvrant et avant le crochet fermant.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,
	// Un espace est ajouté après la parenthèse ouvrante et avant la parenthèse fermante dans les listes de paramètres de fonction.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,
	// Un espace est ajouté après le crochet ouvrant et avant le crochet fermant.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,
	// Options d’habillage pour les blocs.
	//  - oneLiners: Un bloc de code complet qui est entré sur une ligne est maintenu sur une ligne, quelles que soient les valeurs des paramètres `C_Cpp.vcFormat.newLine.*`.
	//  - allOneLineScopes: Tout code où les accolades ouvrantes et fermantes sont saisies sur une ligne est maintenu sur une ligne, quelles que soient les valeurs des paramètres `C_Cpp.vcFormat.newLine.*`.
	//  - never: Les blocs de code sont toujours mis en forme en fonction des valeurs des paramètres `C_Cpp.vcFormat.newLine.*`.
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",
	// Définit le comportement de l'éditeur quand vous appuyez sur la touche Entrée dans un bloc de commentaires multiligne ou monoligne.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],
	// Chaîne de caractères utilisée comme ligne de départ du commentaire Doxygen.
	"C_Cpp.doxygen.generatedStyle": "///",
	// Contrôle s’il faut insérer automatiquement le commentaire Doxygen après avoir tapé le style de commentaire choisi.
	"C_Cpp.doxygen.generateOnType": true,
	// Sélectionnez les balises de section Doxygen que vous souhaitez afficher sur le pointage dans la zone d’info-bulle lorsque le paramètre « Simplifier les commentaires structurés » est activé. 
	"C_Cpp.doxygen.sectionTags": [
		"attention",
		"tparam",
		"param",
		"result",
		"returns",
		"retval",
		"exception",
		"deprecated",
		"warning",
		"note"
	],
	// Si la valeur est `true`, les info-bulles de pointage et d'autocomplétion affichent uniquement certaines étiquettes de commentaires structurés. Sinon, tous les commentaires sont affichés.
	"C_Cpp.simplifyStructuredComments": true,
	// Arguments de ligne de commande supplémentaires à passer à `clang-tidy`. Ces paramètres sont prioritaires sur les paramètres équivalents `C_Cpp.codeAnalysis.clangTidy.*`.
	"C_Cpp.codeAnalysis.clangTidy.args": [],
	// Liste des vérifications `clang-tidy` désactivées. Les valeurs sont ajoutées aux `Checks` dans un fichier `.clang-tidy` ou `C_Cpp.codeAnalysis.clangTidy.config`, le cas échéant.
	"C_Cpp.codeAnalysis.clangTidy.checks.disabled": [],
	// Liste des vérifications `clang-tidy` activées. Les valeurs sont ajoutées aux `Checks` dans un fichier `.clang-tidy` ou `C_Cpp.codeAnalysis.clangTidy.config`, le cas échéant. La vérification par défaut `clang-analyzer-*` est toujours utilisée, sauf si elle est explicitement désactivée.
	"C_Cpp.codeAnalysis.clangTidy.checks.enabled": [],
	// Si la valeur est `true`, la mise en forme est exécutée sur les lignes modifiées par les actions de code 'Corriger'.
	"C_Cpp.codeAnalysis.clangTidy.codeAction.formatFixes": true,
	// Contrôle les options d’action de code de problème d’analyse du code « Effacer » disponibles. La modification du paramètre pour afficher plus d’options peut nécessiter une nouvelle exécution de l’analyse du code.
	//  - None: N’afficher aucune action de code « Effacer ».
	//  - AllOnly: Affichez uniquement l’action de code « Effacer tout » (ou « Effacer tous les <type> » s’il n’y a qu’un seul type ou « Effacer ceci » s’il n’y a qu’un seul problème).
	//  - AllAndAllType: Afficher l’action de code « Effacer tout » (s’il existe plusieurs types de problèmes) et l’action de code « Effacer tous les <type> » (ou « Effacer ceci » s’il n’y a qu’un seul problème pour le <type>)
	//  - AllAndAllTypeAndThis: Afficher l’option « Effacer tout » (s’il existe plusieurs types de problèmes), « Effacer tous les <type> » (s’il existe plusieurs problèmes pour le <type>) et les actions de code « Effacer ceci »
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showClear": "AllAndAllTypeAndThis",
	// Si la valeur est `true`, l’action de code « Désactiver » s’affiche lorsqu’elle est disponible (lors de la prochaine exécution de l’analyse du code). Lorsque l’action de code « Désactiver » est utilisée, elle ajoute le code d’avertissement au paramètre `C_Cpp.codeAnalysis.clangTidy.checks.disabled`.
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDisable": true,
	// Si la valeur est `true`, l’action de code « Afficher la documentation pour » s’affiche lorsqu’elle est disponible (lors de la prochaine exécution de l’analyse du code).
	"C_Cpp.codeAnalysis.clangTidy.codeAction.showDocumentation": true,
	// Spécifie une configuration `clang-tidy` au format YAML/JSON : `{Checks: '-*,clang-analyzer-*', CheckOptions: [{clé : x, valeur : y}]}`. Quand la valeur est vide, `clang-tidy` tente de trouver un fichier nommé `.clang-tidy` pour chaque fichier source dans ses répertoires parents.
	"C_Cpp.codeAnalysis.clangTidy.config": "",
	// Si la valeur est `true`, l’analyse du code à l’aide de `clang-tidy` est activée et s’exécute automatiquement si `C_Cpp.codeAnalysis.runAutomatically` a la valeur `true` (valeur par défaut).
	"C_Cpp.codeAnalysis.clangTidy.enabled": false,
	// Spécifie une configuration `clang-tidy` au format YAML/JSON à utiliser comme secours quand `C_Cpp.codeAnalysis.clangTidy.config` n’est pas défini et qu’aucun fichier `.clang-tidy` n’est trouvé : `{Checks: '-*,clang-analyzer-*', CheckOptions: [{clé : x, valeur : y}]}`.
	"C_Cpp.codeAnalysis.clangTidy.fallbackConfig": "",
	// Expression régulière étendue POSIX (ERE) correspondant aux noms des en-têtes à partir des diagnostics de sortie. Les diagnostics du fichier principal de chaque unité de traduction sont toujours affichés. La variable `${workspaceFolder}` est prise en charge (et est utilisée comme valeur de secours par défaut si aucun fichier `.clang-tidy` n’existe). Si cette option n’est pas `null` (vide), elle remplace l’option `HeaderFilterRegex` dans un fichier `.clang-tidy`, le cas échéant.
	"C_Cpp.codeAnalysis.clangTidy.headerFilter": null,
	// Le chemin complet de l'exécutable `clang-tidy`. S'il n'est pas spécifié, et que `clang-tidy` est disponible dans le chemin de l'environnement, il sera utilisé. S'il n'est pas trouvé dans le chemin de l'environnement, le `clang-tidy` fourni avec l'extension sera utilisé.
	"C_Cpp.codeAnalysis.clangTidy.path": "",
	// Si `true` et `compileCommands` sont définis, l’argument `-p=<build-path>` est passé à `clang-tidy` au lieu de passer les arguments de build après `--`. Cela peut ne pas fonctionner si les variables d’environnement ne sont pas définies de façon à trouver les fichiers Include du système.
	"C_Cpp.codeAnalysis.clangTidy.useBuildPath": false,
	// Configurez des modèles Glob pour exclure des dossiers et des fichiers pour l’analyse du code. Les fichiers qui ne se trouvent pas dans le dossier de l’espace de travail sont toujours exclus. Hérite des valeurs de `files.exclude#` et `#C_Cpp.files.exclude`. En savoir plus sur les modèles Glob [ici](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.codeAnalysis.exclude": {},
	// Le nombre maximum de threads simultanés à utiliser pour l'analyse de code. La valeur par défaut de `null` (vide) utilise la moitié de la valeur héritée de `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.codeAnalysis.maxConcurrentThreads": null,
	// Moins de processus d’analyse du code s’exécuteront simultanément après le dépassement de cette utilisation de la mémoire (en Mo). La valeur par défaut de `null` (vide) utilise la valeur héritée de `C_Cpp.maxMemory`.
	"C_Cpp.codeAnalysis.maxMemory": null,
	// Si la valeur est `true`, l’analyse du code s’exécute automatiquement sur un fichier une fois qu’il est ouvert ou enregistré.
	"C_Cpp.codeAnalysis.runAutomatically": true,
	// Contrôle le délai en millisecondes avant le début du traitement de l’analyse du code après le déclenchement d’un enregistrement à partir d’une modification quand `files.autoSave#` a la valeur `afterDelay` et `#C_Cpp.codeAnalysis.runAutomatically` a la valeur `true`.
	"C_Cpp.codeAnalysis.updateDelay": 2000,
	// Si la valeur est `true`, le remplacement de la commande d'interpréteur de commandes du débogueur utilise un accent grave ``(`)`` obsolète.
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,
	// Afficher le bouton de lecture « Exécuter et déboguer » et l’engrenage « Ajouter une configuration de débogage » dans la barre de titre de l’éditeur pour les fichiers C++.
	"C_Cpp.debugShortcut": true,
	// Contrôle si la vue des cibles SSH est visible. Par défaut, activez la vue quand une commande SSH est appelée.
	"C_Cpp.sshTargetsView": "default",
	// Nombre maximal de processus IntelliSense pour continuer à s’exécuter. La valeur par défaut de `null` (vide) utilise la valeur héritée de `C_Cpp.maxCachedProcesses`.
	"C_Cpp.intelliSense.maxCachedProcesses": null,
	// Les anciens processus IntelliSense s’arrêteront avant la création de nouveaux processus après le dépassement de cette utilisation de mémoire (en Mo). La valeur par défaut de `null` (vide) utilise la valeur héritée de `C_Cpp.maxMemory`.
	"C_Cpp.intelliSense.maxMemory": null,
	// Définit le chemin du dossier pour les en-têtes précompilés mis en cache et utilisés par IntelliSense. Le chemin par défaut du cache est `%LocalAppData%/Microsoft/vscode-cpptools` sous Windows, `$XDG_CACHE_HOME/vscode-cpptools/` sous Linux (ou `$HOME/.cache/vscode-cpptools/` si `XDG_CACHE_HOME` n'est pas défini), et `$HOME/Library/Caches/vscode-cpptools/` sous macOS. Le chemin par défaut sera utilisé si aucun chemin n'est spécifié ou si un chemin spécifié est invalide.
	"C_Cpp.intelliSenseCachePath": "",
	// Taille maximale de l'espace disque dur par espace de travail en mégaoctets (Mo) pour les en-têtes précompilés mis en cache ; l'utilisation réelle peut fluctuer autour de cette valeur. La taille par défaut est de `5120` Mo. La mise en cache des en-têtes précompilés est désactivée lorsque la taille est de `0`.
	"C_Cpp.intelliSenseCacheSize": 5120,
	// Limite d’utilisation de la mémoire en mégaoctets (Mo) d’un processus IntelliSense. La valeur par défaut est `4096` et la valeur maximale est `16384`. L’extension arrête et redémarre un processus IntelliSense lorsqu’elle dépasse la limite.
	"C_Cpp.intelliSenseMemoryLimit": 4096,
	// Nombre maximal de processus mis en cache à utiliser pour le traitement du service de langage. La valeur par défaut de `null` (vide) utilise deux fois plus de processeurs logiques disponibles.
	"C_Cpp.maxCachedProcesses": null,
	// Nombre maximal de threads simultanés à utiliser pour le traitement du service de langage. La valeur est un indicateur et ne peut pas toujours être utilisée. La valeur par défaut de `null` (vide) utilise le nombre de processeurs logiques disponibles.
	"C_Cpp.maxConcurrentThreads": null,
	// Mémoire maximale (en Mo) disponible pour le traitement du service de langage. Moins de processus seront mis en cache et exécutés simultanément après le dépassement de cette utilisation de la mémoire. La valeur par défaut de `null` (vide) utilise la mémoire libre du système.
	"C_Cpp.maxMemory": null,
	// Nombre maximal de processus à conserver en mémoire pour « Rechercher toutes les références » et « Renommer ». La valeur par défaut de `0` désactive cette fonctionnalité. La valeur de `null` (vide) utilise la valeur héritée de `C_Cpp.maxCachedProcesses`.
	"C_Cpp.references.maxCachedProcesses": 0,
	// Nombre maximal de threads simultanés à utiliser pour 'Rechercher toutes les références' et 'Renommer'. La valeur par défaut de `null` (vide) utilise la valeur héritée de `C_Cpp.maxConcurrentThreads`.
	"C_Cpp.references.maxConcurrentThreads": null,
	// Moins de processus "Rechercher toutes les références" et "Renommer" seront mis en cache et exécutés simultanément après que cette utilisation de la mémoire (en Mo) soit dépassée. La valeur par défaut de `null` (vide) utilise la valeur héritée de `C_Cpp.maxMemory`.
	"C_Cpp.references.maxMemory": null,
	// Ajouter les chemins d'inclusion de `nan` et `node-addon-api` quand ils sont des dépendances.
	"C_Cpp.addNodeAddonIncludePaths": false,
	// Contrôle si les fichiers sont automatiquement ajoutés à `files.associations` lorsqu'ils sont la cible d'une opération de navigation depuis un fichier C/C++.
	"C_Cpp.autoAddFileAssociations": true,
	// Si la valeur est définie sur `default`, le système de fichiers de l’espace de travail est supposé ne pas respecter la casse sur Windows et respecter la casse sur macOS ou Linux. Si la valeur est `enabled`, le système de fichiers de l’espace de travail est supposé respecter la casse sur Windows.
	"C_Cpp.caseSensitiveFileSupport": "default",
	// Contrôle si les fonctionnalités "expérimentales" sont utilisables.
	"C_Cpp.experimentalFeatures": "disabled",
	// La verbosité de la journalisation dans le panneau de sortie. L'ordre des niveaux du moins verbeux au plus verbeux est : `None` < `Error` < `Warning` < `Information` < `Debug`.
	"C_Cpp.loggingLevel": "Error",
	// Caractère utilisé comme séparateur de chemin dans les résultats d'autocomplétion de `#include`.
	"C_Cpp.preferredPathSeparator": "Forward Slash",
	// Ce paramètre est déconseillé. Les extensions en version préliminaire sont désormais disponibles via marketplace.
	// Définissez la valeur `Insiders` pour télécharger et installer automatiquement les dernières builds Insider de l’extension, qui incluent les fonctionnalités à venir et les correctifs de bogues.
	"C_Cpp.updateChannel": "Default",
	// Activez les services d'intégration pour le [gestionnaire de dépendances vcpkg](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,
	// Include completion for module export and auto import them
	"vetur.completion.autoImport": true,
	// Where Vetur source Scaffold Snippets from and how to indicate them. Set a source to "" to disable it.
	// 
	// - workspace: `<WORKSPACE>/.vscode/vetur/snippets`.
	// - user: `<USER-DATA-DIR>/User/snippets/vetur`.
	// - vetur: Bundled in Vetur.
	// 
	// The default is:
	// ```
	// "vetur.completion.scaffoldSnippetSources": {
	//   "workspace": "💼",
	//   "user": "🗒️",
	//   "vetur": "✌"
	// }
	// ```
	// 
	// Alternatively, you can do:
	// 
	// ```
	// "vetur.completion.scaffoldSnippetSources": {
	//   "workspace": "(W)",
	//   "user": "(U)",
	//   "vetur": "(V)"
	// }
	// ```
	// 
	// Read more: https://vuejs.github.io/vetur/snippet.html.
	"vetur.completion.scaffoldSnippetSources": {
		"workspace": "💼",
		"user": "🗒️",
		"vetur": "✌"
	},
	// Casing conversion for tag completion
	//  - initial: use the key in `components: {...}` as is for tag completion and do not force any casing
	//  - kebab: kebab-case completion for <my-tag>
	"vetur.completion.tagCasing": "kebab",
	// Log level for VLS
	//  - INFO: Only log info messages. This is the default.
	//  - DEBUG: Log info and debug messages.
	"vetur.dev.logLevel": "INFO",
	// Path to vls for Vetur developers. There are two ways of using it. 
	// 
	// 1. Clone vuejs/vetur from GitHub, build it and point it to the ABSOLUTE path of `/server`.
	// 2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules/vls)
	"vetur.dev.vlsPath": "",
	// The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.
	"vetur.dev.vlsPort": -1,
	// Enable template interpolation service that offers hover / definition / references in Vue interpolations.
	"vetur.experimental.templateInterpolationService": false,
	// Default formatter for <style> region
	//  - none: disable formatting
	//  - prettier: css formatter using css parser from prettier
	"vetur.format.defaultFormatter.css": "prettier",
	// Default formatter for <template> region
	//  - none: disable formatting
	//  - prettyhtml: 🚧 [DEPRECATED] prettyhtml
	//  - js-beautify-html: html formatter of js-beautify
	//  - prettier: prettier
	"vetur.format.defaultFormatter.html": "prettier",
	// Default formatter for <script> region
	//  - none: disable formatting
	//  - prettier: js formatter from prettier
	//  - prettier-eslint: prettier-eslint
	//  - vscode-typescript: js formatter from TypeScript
	"vetur.format.defaultFormatter.js": "prettier",
	// Default formatter for <style lang='less'> region
	//  - none: disable formatting
	//  - prettier: less formatter using postcss parser from prettier
	"vetur.format.defaultFormatter.less": "prettier",
	// Default formatter for <style lang='postcss'> region
	//  - none: disable formatting
	//  - prettier: postcss formatter using css parser from prettier
	"vetur.format.defaultFormatter.postcss": "prettier",
	// Default formatter for <template lang='pug'> region
	//  - none: disable formatting
	//  - prettier: prettier
	"vetur.format.defaultFormatter.pug": "prettier",
	// Default formatter for <style lang='sass'> region
	//  - none: disable formatting
	//  - sass-formatter: sass formatter
	"vetur.format.defaultFormatter.sass": "sass-formatter",
	// Default formatter for <style lang='scss'> region
	//  - none: disable formatting
	//  - prettier: scss formatter using scss parser from prettier
	"vetur.format.defaultFormatter.scss": "prettier",
	// Default formatter for <style lang='stylus'> region
	//  - none: disable formatting
	//  - stylus-supremacy: stylus formatter from stylus-supremacy
	"vetur.format.defaultFormatter.stylus": "stylus-supremacy",
	// Default formatter for <script> region
	//  - none: disable formatting
	//  - prettier: ts formatter using typescript parser from prettier
	//  - prettier-tslint: ts formatter from TypeScript
	"vetur.format.defaultFormatter.ts": "prettier",
	// Options for all default formatters
	"vetur.format.defaultFormatterOptions": {
		"js-beautify-html": {
			"wrap_attributes": "force-expand-multiline"
		},
		"prettyhtml": {
			"printWidth": 100,
			"singleQuote": false,
			"wrapAttributes": false,
			"sortAttributes": false
		}
	},
	// Enable/disable the Vetur document formatter.
	"vetur.format.enable": true,
	// Number of spaces per indentation level. Inherited by all formatters.
	"vetur.format.options.tabSize": 2,
	// Use tabs for indentation. Inherited by all formatters.
	"vetur.format.options.useTabs": false,
	// Whether to have initial indent for <script> region
	"vetur.format.scriptInitialIndent": false,
	// Whether to have initial indent for <style> region
	"vetur.format.styleInitialIndent": false,
	// Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.
	"vetur.grammar.customBlocks": {
		"docs": "md",
		"i18n": "json"
	},
	// Vetur will warn about not setup correctly for the project. You can disable it.
	"vetur.ignoreProjectWarning": false,
	// Whether to enable codeActions
	"vetur.languageFeatures.codeActions": true,
	// Whether to enable semantic highlighting. Currently only works for typescript
	"vetur.languageFeatures.semanticTokens": true,
	// Whether to automatic updating import path when rename or move a file
	"vetur.languageFeatures.updateImportOnFileMove": true,
	// Traces the communication between VS Code and Vue Language Server.
	"vetur.trace.server": "off",
	// Enable underline `.value` when using composition API.
	"vetur.underline.refValue": true,
	// Use dependencies from workspace. Support for TypeScript, Prettier, @starptech/prettyhtml, prettier-eslint, prettier-tslint, stylus-supremacy, @prettier/plugin-pug.
	"vetur.useWorkspaceDependencies": false,
	// Validate interpolations in <template> region using TypeScript language service
	"vetur.validation.interpolation": true,
	// Validate js/ts in <script>
	"vetur.validation.script": true,
	// Validate css/scss/less/postcss in <style>
	"vetur.validation.style": true,
	// Validate vue-html in <template> using eslint-plugin-vue
	"vetur.validation.template": true,
	// Validate props usage in <template> region. Show error/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions
	"vetur.validation.templateProps": false,
	// Set the brightness value for the glow effect. 0.0 is fully transparent and 1.0 is fully bright
	"synthwave84.brightness": 0.45,
	// Disable the glow effect, but show Synthwave '84 editor chrome updates
	"synthwave84.disableGlow": false,
	// Number of spaces for a signle indnent
	"bashBeautify.tabSize": 4,
	// Qiniu AccessKey
	"markdown-preview-enhanced.AccessKey": "",
	// Automatically show preview of markdown being edited.
	"markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,
	// In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
	"markdown-preview-enhanced.breakOnSingleNewLine": true,
	// Qiniu Bucket
	"markdown-preview-enhanced.Bucket": "",
	// Chrome executable path, which is used for Puppeteer export. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.chromePath": "",
	// Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
	"markdown-preview-enhanced.codeBlockTheme": "auto.css",
	// The configuration directory path. Leave it empty to use '~/.mume' as the config path. Please reload vscode to take effect.
	"markdown-preview-enhanced.configPath": "",
	// Qiniu Domain
	"markdown-preview-enhanced.Domain": "http://",
	// Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
	"markdown-preview-enhanced.enableCriticMarkupSyntax": false,
	// Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
	"markdown-preview-enhanced.enableEmojiSyntax": true,
	// Enable extended table syntax to support merging table cells.
	"markdown-preview-enhanced.enableExtendedTableSyntax": false,
	//  Enables transform audio video link to to html5 embed audio video tags.
	"markdown-preview-enhanced.enableHTML5Embed": false,
	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"markdown-preview-enhanced.enableLinkify": true,
	// Enables executing code chunks and importing javascript files.
	// ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
	"markdown-preview-enhanced.enableScriptExecution": false,
	// Enable smartypants and other sweet transforms.
	"markdown-preview-enhanced.enableTypographer": false,
	// Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
	"markdown-preview-enhanced.enableWikiLinkSyntax": true,
	// Front matter rendering option
	"markdown-preview-enhanced.frontMatterRenderingOption": "none",
	// Hide the default VSCode markdown preview extension buttons. Restarting the editor is required to make this config take effect.
	"markdown-preview-enhanced.hideDefaultVSCodeMarkdownPreviewButtons": true,
	// HTML attributes to pass to audio tags.
	"markdown-preview-enhanced.HTML5EmbedAudioAttributes": "controls preload=\"metadata\" width=\"320\"",
	// When true embed media with http:// schema in URLs. When false ignore and don't embed them.
	"markdown-preview-enhanced.HTML5EmbedIsAllowedHttp": false,
	//  Enables video/audio embed with ![]() syntax (default).
	"markdown-preview-enhanced.HTML5EmbedUseImageSyntax": true,
	// Enables video/audio embed with []() syntax.
	"markdown-preview-enhanced.HTML5EmbedUseLinkSyntax": false,
	// HTML attributes to pass to video tags.
	"markdown-preview-enhanced.HTML5EmbedVideoAttributes": "controls preload=\"metadata\" width=\"320\" height=\"240\"",
	// When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
	"markdown-preview-enhanced.imageFolderPath": "/assets",
	// ImageMagick command line path. Should be either `magick` or `convert`. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.imageMagickPath": "",
	// You can choose different image uploader to upload image
	"markdown-preview-enhanced.imageUploader": "imgur",
	// Default latex engine for Pandoc export and latex code chunk.
	"markdown-preview-enhanced.latexEngine": "pdflatex",
	// Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
	"markdown-preview-enhanced.liveUpdate": true,
	// Use customized Math expression block delimiters.
	"markdown-preview-enhanced.mathBlockDelimiters": [
		[
			"$$",
			"$$"
		],
		[
			"\\[",
			"\\]"
		]
	],
	// Use customized Math expression inline delimiters.
	"markdown-preview-enhanced.mathInlineDelimiters": [
		[
			"$",
			"$"
		],
		[
			"\\(",
			"\\)"
		]
	],
	// Choose the Math expression rendering method option for GFM markdown export (Save as Markdown).
	"markdown-preview-enhanced.mathRenderingOnlineService": "https://latex.codecogs.com/gif.latex",
	// Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
	"markdown-preview-enhanced.mathRenderingOption": "KaTeX",
	// Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
	"markdown-preview-enhanced.mermaidTheme": "default",
	// Args passed to pandoc command e.g. ["--smart", "--filter=/bin/exe"] Please use long argument names.
	"markdown-preview-enhanced.pandocArguments": [],
	// The pandoc markdown flavor you want
	"markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",
	// Pandoc executable path
	"markdown-preview-enhanced.pandocPath": "pandoc",
	// Render using PlantUML server instead of binary. Leave it empty to use the builtin plantuml.jar binary (`java` is required in system path). Eg: "http://localhost:8080/svg/"
	"markdown-preview-enhanced.plantumlServer": "",
	// Preview Theme
	"markdown-preview-enhanced.previewTheme": "github-light.css",
	// Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
	"markdown-preview-enhanced.printBackground": false,
	// Accepted protocols for links.
	"markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",
	// Args passed to puppeteer.launch({args: $puppeteerArgs})
	"markdown-preview-enhanced.puppeteerArgs": [],
	// Puppeteer waits for a certain timeout in milliseconds before the document export.
	"markdown-preview-enhanced.puppeteerWaitForTimeout": 0,
	// RevealJS Presentation Theme
	"markdown-preview-enhanced.revealjsTheme": "white.css",
	// Automatic scroll sync. This is now partially supported.
	"markdown-preview-enhanced.scrollSync": true,
	// Qiniu SecretKey
	"markdown-preview-enhanced.SecretKey": "",
	// Open Only One Preview.
	"markdown-preview-enhanced.singlePreview": true,
	// If checked, we use GitHub style piped wiki links, i.e. [[linkText|wikiLink]]. Otherwise, we use [[wikiLink|linkText]] as the original Wikipedia style.
	"markdown-preview-enhanced.useGitHubStylePipedLink": true,
	// Enable this option will render markdown by pandoc instead of markdown-it.
	"markdown-preview-enhanced.usePandocParser": false,
	// If set to true, then locally installed puppeteer-core will be required. Otherwise, the puppeteer globally installed by `npm install -g puppeteer` will be required.
	"markdown-preview-enhanced.usePuppeteerCore": true,
	// By default, the extension for wikilink is `.md`. For example: [[test]] will direct to file path `test.md`.
	"markdown-preview-enhanced.wikiLinkFileExtension": ".md",
	// Pet color
	"vscode-pets.petColor": "brown",
	// Pet size
	"vscode-pets.petSize": "nano",
	// Pet type
	"vscode-pets.petType": "cat",
	// VSCode pets webview position
	"vscode-pets.position": "explorer",
	// Background theme assets for your pets
	"vscode-pets.theme": "none",
	// Throw ball with mouse
	"vscode-pets.throwBallWithMouse": false,
	// Minimum level of debugger logs that are sent to VS Code.
	"java.debug.logLevel": "warn",
	// The specified console to launch Java program. If you want to customize the console for a specific debug session, please modify the 'console' config in launch.json.
	//  - internalConsole: VS Code debug console (input stream not supported).
	//  - integratedTerminal: VS Code integrated terminal.
	//  - externalTerminal: External terminal that can be configured in user settings.
	"java.debug.settings.console": "integratedTerminal",
	// Enable the run and debug code lens providers over main methods.
	"java.debug.settings.enableRunDebugCodeLens": true,
	// Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.exceptionBreakpoint.skipClasses": [],
	// Force building the workspace before launching java program.
	"java.debug.settings.forceBuildBeforeLaunch": true,
	// Reload the changed Java classes during debugging. Make sure 'java.autobuild.enabled' is not disabled.
	"java.debug.settings.hotCodeReplace": "manual",
	// Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks.
	"java.debug.settings.jdwp.async": "auto",
	// The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout.
	"java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,
	// The timeout (ms) of JDWP request when the debugger communicates with the target JVM.
	"java.debug.settings.jdwp.requestTimeout": 3000,
	// The maximum length of strings displayed in "Variables" or "Debug Console" viewlet, strings longer than this length will be trimmed, if 0 no trim is performed.
	"java.debug.settings.maxStringLength": 0,
	// The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
	"java.debug.settings.numericPrecision": 0,
	// Force to proceed when build fails
	"java.debug.settings.onBuildFailureProceed": false,
	// Show numbers in hex format in "Variables" viewlet.
	"java.debug.settings.showHex": false,
	// Show the logical structure for the Collection and Map classes in "Variables" viewlet.
	"java.debug.settings.showLogicalStructure": true,
	// Show fully qualified class names in "Variables" viewlet.
	"java.debug.settings.showQualifiedNames": false,
	// Show static variables in "Variables" viewlet.
	"java.debug.settings.showStaticVariables": false,
	// Show 'toString()' value for all classes that override 'toString' method in "Variables" viewlet.
	"java.debug.settings.showToString": true,
	// Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, e.g. java.*, *.Foo
	"java.debug.settings.stepping.skipClasses": [],
	// Skip constructor methods when stepping.
	"java.debug.settings.stepping.skipConstructors": false,
	// Skip static initializer methods when stepping.
	"java.debug.settings.stepping.skipStaticInitializers": false,
	// Skip synthetic methods when stepping.
	"java.debug.settings.stepping.skipSynthetics": false,
	// The default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json.
	"java.debug.settings.vmArgs": "",
	// Controls whether notifications can be used to report progress. If true, use status bar to report progress instead.
	"java.silentNotification": false,
	// Synchronize Java Projects explorer with changes
	"java.dependency.autoRefresh": true,
	// Package presentation mode: flat or hierarchical
	"java.dependency.packagePresentation": "flat",
	// The delay time (ms) the auto refresh is invoked when changes are detected
	"java.dependency.refreshDelay": 2000,
	// Show the members in the explorer
	"java.dependency.showMembers": false,
	// Synchronize Java Projects explorer selection with folder explorer
	"java.dependency.syncWithFolderExplorer": true,
	// The output path of the exported jar. Leave it empty if you want to manually pick the output location.
	"java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",
	// Whether to send back detailed information from error logs for diagnostic purpose.
	"java.help.collectErrorLog": false,
	// Sets the default view which is presented during the first use.
	//  - auto: Automatically pick the first experience view
	//  - overview: Present the Java Overview page
	//  - gettingStarted: Present the Java Beginner Tips page
	//  - welcome: Present the Java Help Center page
	//  - none: Do not show any view
	"java.help.firstView": "auto",
	// Show release notes of Extension Pack for Java on startup.
	"java.help.showReleaseNotes": true,
	// Specify the configurations for running the tests.
	"java.test.config": {},
	// Specify the name of the default test configuration.
	"java.test.defaultConfig": "",
	// Use `**` or `__` to wrap bold text.
	"markdown.extension.bold.indicator": "**",
	// Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
	"markdown.extension.completion.respectVscodeSearchExclude": true,
	// The root folder for path auto-completion.
	"markdown.extension.completion.root": "",
	// List of extra supported languages (e.g., rmd, qmd), default [].
	"markdown.extension.extraLangIds": [],
	// Use `*` or `_` to wrap italic text.
	"markdown.extension.italic.indicator": "*",
	// User-defined KaTeX macros.
	"markdown.extension.katex.macros": {},
	// List indentation scheme. (Also affects TOC generation.)
	// 
	// Whether to use different indentation sizes on different list contexts or stick to VS Code's tab size.
	//  - adaptive: Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:
	// 
	// ```markdown
	// - Parent
	//   - Sublist
	// 
	// 1. Parent
	//    1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	//  - inherit: Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):
	// 
	// ```markdown
	// - Parent
	//     - Sublist
	// 
	// 1. Parent
	//     1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	"markdown.extension.list.indentationSize": "adaptive",
	// List candidate markers. It will cycle through those markers
	"markdown.extension.list.toggle.candidate-markers": [
		"-",
		"*",
		"+",
		"1.",
		"1)"
	],
	// Enable basic math support (Powered by KaTeX).
	"markdown.extension.math.enabled": true,
	// Auto fix ordered list markers.
	"markdown.extension.orderedList.autoRenumber": true,
	// Ordered list marker.
	//  - one: Always use `1.` as ordered list marker.
	//  - ordered: Use increasing numbers as ordered list marker.
	"markdown.extension.orderedList.marker": "ordered",
	// Auto show preview to side.
	"markdown.extension.preview.autoShowPreviewToSide": false,
	// Convert image path to absolute path.
	"markdown.extension.print.absoluteImgPath": true,
	// Convert images to base64 when printing to HTML.
	"markdown.extension.print.imgToBase64": false,
	// Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
	"markdown.extension.print.includeVscodeStylesheets": true,
	// Print current document to HTML when file is saved.
	"markdown.extension.print.onFileSave": false,
	// Theme of the exported HTML. Only affects code blocks.
	"markdown.extension.print.theme": "light",
	// Enable/disable URL validation when printing.
	"markdown.extension.print.validateUrls": true,
	// If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
	"markdown.extension.syntax.decorationFileSizeLimit": 50000,
	// (**Deprecated**) Use `markdown.extension.theming.decoration.renderCodeSpan` instead. See <https://github.com/yzhang-gh/vscode-markdown/issues/888> for details.
	// 
	"markdown.extension.syntax.decorations": null,
	// (**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>.
	"markdown.extension.syntax.plainTheme": false,
	// Don't add padding to the delimiter row.
	"markdown.extension.tableFormatter.delimiterRowNoPadding": false,
	// Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter.
	"markdown.extension.tableFormatter.enabled": true,
	// Normalize table indentation to closest multiple of configured editor tab size.
	"markdown.extension.tableFormatter.normalizeIndentation": false,
	// Apply a border around a [code span](https://spec.commonmark.org/0.29/#code-spans).
	"markdown.extension.theming.decoration.renderCodeSpan": true,
	// (**Experimental**)
	"markdown.extension.theming.decoration.renderHardLineBreak": false,
	// (**Experimental**)
	"markdown.extension.theming.decoration.renderLink": false,
	// (**Experimental**)
	"markdown.extension.theming.decoration.renderParagraph": false,
	// Show a line through the middle of a [strikethrough](https://github.github.com/gfm/#strikethrough-extension-).
	"markdown.extension.theming.decoration.renderStrikethrough": true,
	// Shade the background of trailing space (U+0020) characters on a [line](https://spec.commonmark.org/0.29/#line).
	"markdown.extension.theming.decoration.renderTrailingSpace": false,
	// Range of levels for table of contents. Use `x..y` for level `x` to `y`.
	"markdown.extension.toc.levels": "1..6",
	// Lists of headings to omit by project file.
	// Example:
	// { "README.md": ["# Introduction"] }
	"markdown.extension.toc.omittedFromToc": {},
	// Use ordered list, that is:
	// 1. ...
	// 2. ...
	"markdown.extension.toc.orderedList": false,
	// Just plain text TOC, no links.
	"markdown.extension.toc.plaintext": false,
	// The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
	//  - github: GitHub
	//  - azureDevops: Azure DevOps
	//  - bitbucket-cloud: Bitbucket Cloud
	//  - gitea: Gitea
	//  - gitlab: GitLab
	//  - vscode: Visual Studio Code
	"markdown.extension.toc.slugifyMode": "github",
	// Use `-`, `*`, or `+` in the table of contents (for **unordered** list).
	"markdown.extension.toc.unorderedList.marker": "-",
	// Auto update TOC on save.
	"markdown.extension.toc.updateOnSave": true,
	// Json for Visual Studio Code
	"JSON-zain.author.ZainChen": "Welcome to vscode-json.",
	// Whether to update the menu in real time based on the contents of the json file!
	"JSON-zain.json.autorefresh": false,
	// A list of CSS based languages where suggestions are enabled.
	"html-css-class-completion.CSSLanguages": [
		"css",
		"sass",
		"scss"
	],
	// Enables completion when you're writing Emmet abbreviations.
	"html-css-class-completion.enableEmmetSupport": false,
	// A glob pattern that defines files and folders to exclude. The glob pattern will be matched against the file paths of resulting matches relative to their workspace.
	"html-css-class-completion.excludeGlobPattern": "",
	// A list of HTML based languages where suggestions are enabled.
	"html-css-class-completion.HTMLLanguages": [
		"html",
		"vue",
		"razor",
		"blade",
		"handlebars",
		"twig",
		"django-html",
		"php",
		"markdown",
		"erb",
		"ejs",
		"svelte"
	],
	// A glob pattern that defines files and folders to search for. The glob pattern will be matched against the paths of resulting matches relative to their workspace.
	"html-css-class-completion.includeGlobPattern": "**/*.{css,html}",
	// A list of JavaScript based languages where suggestions are enabled.
	"html-css-class-completion.JavaScriptLanguages": [
		"javascript",
		"javascriptreact",
		"typescriptreact"
	],
}